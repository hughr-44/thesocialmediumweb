[{"C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\index.js":"1","C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\App.js":"2","C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\reportWebVitals.js":"3","C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\screens\\OpenScreen.js":"4","C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\screens\\LoginScreen.js":"5","C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\screens\\LoadScreen.js":"6","C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\screens\\AuthTwitch.js":"7","C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\screens\\AuthYouTube.js":"8","C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\screens\\AuthInstagram.js":"9","C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\screens\\FeedScreen.js":"10","C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\components\\TwitchComponent.js":"11","C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\screens\\MainNavigation.js":"12","C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\screens\\ProfileScreen.js":"13","C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\screens\\LoadSocials.js":"14","C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\services\\firebase.js":"15","C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\components\\YoutubeComponent.js":"16","C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\components\\TwitterComponent.js":"17","C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\components\\InstagramComponent.js":"18","C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\components\\FollowOverlay.js":"19","C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\screens\\SearchScreen.js":"20","C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\screens\\OthersProfile.js":"21","C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\screens\\InfoScreen.js":"22"},{"size":500,"mtime":1607371017170,"results":"23","hashOfConfig":"24"},{"size":2598,"mtime":1609175620702,"results":"25","hashOfConfig":"24"},{"size":362,"mtime":1607108326456,"results":"26","hashOfConfig":"24"},{"size":2316,"mtime":1609182072304,"results":"27","hashOfConfig":"24"},{"size":4382,"mtime":1609201896943,"results":"28","hashOfConfig":"24"},{"size":4156,"mtime":1609182072276,"results":"29","hashOfConfig":"24"},{"size":4945,"mtime":1609182072276,"results":"30","hashOfConfig":"24"},{"size":5962,"mtime":1609185742400,"results":"31","hashOfConfig":"24"},{"size":6824,"mtime":1609184265560,"results":"32","hashOfConfig":"24"},{"size":26525,"mtime":1609185436050,"results":"33","hashOfConfig":"24"},{"size":7615,"mtime":1609179138906,"results":"34","hashOfConfig":"24"},{"size":2403,"mtime":1607640994003,"results":"35","hashOfConfig":"24"},{"size":14982,"mtime":1609185436069,"results":"36","hashOfConfig":"24"},{"size":66200,"mtime":1609202957601,"results":"37","hashOfConfig":"24"},{"size":818,"mtime":1607989635946,"results":"38","hashOfConfig":"24"},{"size":8734,"mtime":1609182474012,"results":"39","hashOfConfig":"24"},{"size":9276,"mtime":1609180659939,"results":"40","hashOfConfig":"24"},{"size":12302,"mtime":1609184265560,"results":"41","hashOfConfig":"24"},{"size":48260,"mtime":1609182072276,"results":"42","hashOfConfig":"24"},{"size":12197,"mtime":1609185436049,"results":"43","hashOfConfig":"24"},{"size":33472,"mtime":1609188273602,"results":"44","hashOfConfig":"24"},{"size":10465,"mtime":1609189344446,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"18vth4x",{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"48"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":45,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"48"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":110,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"48"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"48"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"48"},"C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\index.js",[],["109","110"],"C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\App.js",["111","112"],"import React from 'react';\n\nimport {HashRouter as Router, Link, Route} from 'react-router-dom';\n\nimport Container from 'react-bootstrap/Container';\n\nimport './App.css';\n\nimport OpenScreen from './screens/OpenScreen';\nimport LoginScreen from './screens/LoginScreen';\nimport LoadScreen from './screens/LoadScreen';\nimport AuthTwitch from './screens/AuthTwitch';\nimport AuthYouTube from './screens/AuthYouTube';\nimport AuthInstagram from './screens/AuthInstagram';\n\nimport FeedScreen from './screens/FeedScreen';\n\nimport ProfileScreen from './screens/ProfileScreen';\n\nimport SearchScreen from './screens/SearchScreen';\n\nimport LoadSocials from './screens/LoadSocials';\n\nimport OthersProfile from './screens/OthersProfile';\n\nimport InfoScreen from './screens/InfoScreen';\n\nimport firebase from \"firebase\";\nimport 'firebase/database';\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n    }\n  }\n\n  render(){\n    const styles = require('./App.css');\n    return (\n      <Router>\n        <Container className=\"p-0\" fluid={true}>\n      \n          <div className=\"main-body\">\n          <Route path=\"/\" exact render={() => <OpenScreen />} />\n          <Route path=\"/LoginScreen\" exact render={() => <LoginScreen />} />\n          <Route path=\"/LoadScreen\" exact render={() => <LoadScreen />} />\n          <Route path=\"/AuthTwitch\" exact render={() => <AuthTwitch />} />\n          <Route path=\"/AuthYouTube\" exact render={() => <AuthYouTube />} />\n          <Route path=\"/AuthInstagram\" exact render={() => <AuthInstagram />} />\n          <Route path=\"/LoadSocials\" exact render={() => <LoadSocials />} />\n\n          <Route path=\"/FeedScreen\" exact render={() => <FeedScreen />} />\n          <Route path=\"/ProfileScreen\" exact render={() => <ProfileScreen />} />\n          <Route path=\"/SearchScreen\" exact render={() => <SearchScreen />} />\n\n          <Route path=\"/InfoScreen\" exact render={() => <InfoScreen />} />\n\n          <Route path=\"/OthersProfile\" exact render={() => <OthersProfile />} />\n          </div>\n\n        </Container>\n      </Router>\n    );\n  }\n}\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyCIeFNZorTXAH5MSFxIAaILwRTNMfEr3fY\",\n  authDomain: \"thesocialmedium-110a0.firebaseapp.com\",\n  databaseURL: \"https://thesocialmedium-110a0.firebaseio.com\",\n  projectId: \"thesocialmedium-110a0\",\n  storageBucket: \"thesocialmedium-110a0.appspot.com\",\n  messagingSenderId: \"749462796772\",\n  appId: \"1:749462796772:web:44df3752d82016615caff1\",\n  measurementId: \"G-K9HLH22Z19\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default App;","C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\reportWebVitals.js",[],"C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\screens\\OpenScreen.js",[],"C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\screens\\LoginScreen.js",[],"C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\screens\\LoadScreen.js",["113","114","115","116","117","118","119","120","121","122","123","124","125","126"],"import React from 'react';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nimport axios from \"axios\";\r\n\r\nimport { TwitchEmbed, TwitchChat, TwitchClip, TwitchPlayer } from 'react-twitch-embed';\r\n\r\nimport YouTube from 'react-youtube-embed'\r\n\r\nimport { Timeline, Tweet } from 'react-twitter-widgets'\r\n\r\nimport InstagramEmbed from 'react-instagram-embed';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport firebase from \"firebase\";\r\nimport 'firebase/database';\r\n\r\n//var passport = require(\"passport\");\r\n//var twitchStrategy = require(\"passport-twitch\").Strategy;\r\n\r\n//import passport from \"passport\"\r\n//import twitchStrategy from \"passport-twitch\"\r\n\r\nimport OauthPopup from \"react-oauth-popup\";\r\n\r\nimport { OAuth2PopupFlow } from 'oauth2-popup-flow';\r\n\r\nimport TwitterLogin from 'react-twitter-auth'\r\n\r\nimport InstagramLogin from \"react-instagram-login\";\r\n\r\nimport { InstagramMedia } from 'react-instagram-media'\r\n\r\nclass LoadScreen extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            email: \"\",\r\n            //uid: firebase.auth().currentUser.uid,\r\n            password: \"\",\r\n            errorMessage: null,\r\n            twitterName: \"\",\r\n            igName: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n        console.log(this.props.testProp)\r\n\r\n        firebase.auth().onAuthStateChanged(function(user) {\r\n            if (user) {\r\n                console.log(\"YES logged in\")\r\n                \r\n                //this.props.history.push(\"/\");\r\n            } else {\r\n              console.log(\"NO logged in\")\r\n              this.props.history.push(\"/OpenScreen\");\r\n            }\r\n        }.bind(this));\r\n\r\n        //this.authTwitch()\r\n        //this.closeWindow()\r\n    }\r\n\r\n    authTwitch(){\r\n        const auth = new OAuth2PopupFlow({\r\n            authorizationUri: 'https://id.twitch.tv/oauth2/authorize',\r\n            clientId: '2fnwtwy41t2avoiqdc1py6oybitz4r',\r\n            //redirectUri: 'http://localhost:3000/#/AuthTwitch',\r\n            redirectUri: 'https://thesocialmediumappjs.herokuapp.com/#/AuthTwitch',\r\n            responseType: 'token',\r\n            scope: 'user:edit user:read:email user:edit:follows'\r\n        });\r\n        //user:edit:follows \r\n        console.log(\"1\")\r\n        auth.tryLoginPopup();\r\n        console.log(\"2\")\r\n\r\n        //window.open(\"\", \"_self\");\r\n        window.close();\r\n    }\r\n\r\n    closeWindow(){\r\n        window.close();\r\n    }\r\n\r\n    skipTwitch(){\r\n        console.log(\"skipping twitch\")\r\n        window.open(\"https://thesocialmediumappjs.herokuapp.com/#/AuthTwitch?access_token=NoTwitch\" ,\"_self\");\r\n    }\r\n\r\n    render(){\r\n        const igHtml = '<iframe width=\"320\" height=\"440\" src=\"http://instagram.com/p/CIMN_BVhsZ3/embed\" frameborder=\"0\"></iframe>'\r\n        return(\r\n            <div style={rootStyle} className=\"login-screen\" id=\"login\">\r\n\r\n                <Container style={mainContainer}>\r\n                    <Row style={{display: 'flex', justifyContent: 'center'}}>\r\n                        <h2 style={{color: '#e8e6e3'}} className=\"display-1 font-weight-bolder\">Authorize Twitch</h2>\r\n                    </Row>\r\n                    <Row style={{display: 'flex', justifyContent: 'center'}}>\r\n                        <Button onClick={this.authTwitch} style={button}><h4 style={textStyle}>Auth</h4></Button>\r\n                    </Row>\r\n\r\n                </Container>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst rootStyle = {\r\n    height: \"100vh\",\r\n    backgroundColor: \"#25282a\"\r\n    //backgroundColor: \"#ACACAC\"\r\n}\r\nconst mainContainer = {\r\n    //backgroundColor: \"#ACACAC\",\r\n    backgroundColor: \"#25282a\",\r\n    height: \"100%\",\r\n    fluid: true\r\n}\r\nconst button = {\r\n    shadowOpacity: 0.3,\r\n    shadowRadius: 3,\r\n    shadowOffset: {\r\n    height: 0,\r\n    width: 0\r\n    },\r\n    elevation: 1,\r\n    marginTop: '5%',\r\n    backgroundColor: \"#401058\",\r\n    borderRadius: 5,\r\n    borderColor: \"#393939\",\r\n    borderWidth: 1,\r\n    width: 120\r\n}\r\nconst textStyle = {\r\n    color: \"white\"\r\n}\r\n\r\nexport default withRouter(LoadScreen);","C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\screens\\AuthTwitch.js",["127","128"],"import React from 'react';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport firebase from \"firebase\";\r\nimport 'firebase/database';\r\n\r\n//import { db, auth } from '../services/firebase'\r\n\r\nimport Cookies from 'universal-cookie';\r\n\r\nimport { OAuth2PopupFlow } from 'oauth2-popup-flow';\r\n\r\nclass AuthTwitch extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            email: \"\",\r\n            uid: \"\",\r\n            password: \"\",\r\n            errorMessage: null,\r\n            twitterName: \"\",\r\n            igName: \"\"\r\n        };\r\n        console.log(window.location.href)\r\n        //console.log(this.state.uid)\r\n        //this.parseToken()\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n        firebase.auth().onAuthStateChanged(function(user) {\r\n            if (user) {\r\n                console.log(\"YES logged in\")\r\n                console.log(user.uid)\r\n                this.setState({uid: user.uid})\r\n                //this.props.history.push(\"/\");\r\n                this.parseToken()\r\n            } else {\r\n              console.log(\"NO logged in\")\r\n              //this.props.history.push(\"/OpenScreen\");\r\n              this.parseToken()\r\n            }\r\n        }.bind(this));\r\n\r\n        //this.authTwitch()\r\n        //this.authInstagram()\r\n    }\r\n\r\n    parseToken(){\r\n        console.log(\"parse token\")\r\n        console.log(window.location.href)\r\n\r\n        const returnUrl = window.location.href\r\n\r\n        var authToken = ''\r\n        for(var i=0; i<returnUrl.length; i++){\r\n            var currSubstring = returnUrl.substr(i, 13)\r\n            if('access_token=' == currSubstring){\r\n\r\n                if(returnUrl.substr(i+13, 8) == \"NoTwitch\"){\r\n                    console.log(\"twitch was skipped\")\r\n                    authToken = \"NA\"\r\n                    console.log(authToken)\r\n                    i = returnUrl.length\r\n                }\r\n                else{\r\n                    console.log(\"access_token= found\")\r\n                    authToken = returnUrl.substr(i+13, 30)\r\n                    console.log(authToken)\r\n                    i = returnUrl.length\r\n                }\r\n                \r\n            }\r\n        }\r\n\r\n        const cookies = new Cookies();\r\n        //cookies.set('twitchToken', authToken)\r\n        cookies.set('twitchToken', authToken, { path: '/' })\r\n\r\n        const collPath = '/mainCollection/' + this.state.uid +'/twitchInfo'\r\n        firebase.database().ref(collPath).update({\r\n            twitchAuthToken: authToken\r\n        })\r\n\r\n        //this.authYT()\r\n    }\r\n\r\n    authYT(){\r\n        const auth = new OAuth2PopupFlow({\r\n            authorizationUri: 'https://accounts.google.com/o/oauth2/v2/auth',\r\n            clientId: '749462796772-g5kquq4trrnbdhan4c6npo7kjjn2av1q.apps.googleusercontent.com',\r\n            //redirectUri: 'http://localhost:3005/',\r\n            redirectUri: 'https://smauthlanding.herokuapp.com/',\r\n            responseType: 'code',\r\n            scope: 'https://www.googleapis.com/auth/youtube.readonly https://www.googleapis.com/auth/youtube https://www.googleapis.com/auth/youtubepartner-channel-audit https://www.googleapis.com/auth/youtube.channel-memberships.creator https://www.googleapis.com/auth/youtube.force-ssl https://www.googleapis.com/auth/youtubepartner https://www.googleapis.com/auth/youtube.upload'\r\n        });\r\n\r\n        console.log(\"1\")\r\n        auth.tryLoginPopup();\r\n        console.log(\"2\")\r\n\r\n        window.close();\r\n\r\n        console.log(\"3\")\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div style={rootStyle} className=\"authtwitch-screen\" id=\"AuthTwitch\">\r\n\r\n                <Container style={mainContainer}>\r\n                    <Row style={{display: 'flex', justifyContent: 'center'}}>\r\n                        <h2 style={{color: '#e8e6e3'}} className=\"display-1 font-weight-bolder\">Authorize YouTube</h2>\r\n                    </Row>\r\n                    <Row style={{display: 'flex', justifyContent: 'center'}}>\r\n                        <Button onClick={this.authYT} style={button}><h4 style={textStyle}>Auth YT</h4></Button>\r\n                    </Row>\r\n                </Container>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst rootStyle = {\r\n    height: \"100vh\",\r\n    backgroundColor: \"#25282a\"\r\n    //backgroundColor: \"#ACACAC\"\r\n}\r\nconst mainContainer = {\r\n    //backgroundColor: \"#ACACAC\",\r\n    backgroundColor: \"#25282a\",\r\n    height: \"100%\",\r\n    fluid: true\r\n}\r\nconst button = {\r\n    shadowOpacity: 0.3,\r\n    shadowRadius: 3,\r\n    shadowOffset: {\r\n    height: 0,\r\n    width: 0\r\n    },\r\n    elevation: 1,\r\n    marginTop: '5%',\r\n    backgroundColor: \"#401058\",\r\n    borderRadius: 5,\r\n    borderColor: \"#393939\",\r\n    borderWidth: 1,\r\n    width: 120\r\n}\r\nconst textStyle = {\r\n    color: \"white\"\r\n}\r\n\r\nexport default withRouter(AuthTwitch);","C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\screens\\AuthYouTube.js",["129"],"import React from 'react';\r\nimport {withRouter} from 'react-router-dom';\r\nimport axios from \"axios\";\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport firebase from \"firebase\";\r\nimport 'firebase/database';\r\n\r\nimport Cookies from 'universal-cookie';\r\n\r\nimport { OAuth2PopupFlow } from 'oauth2-popup-flow';\r\n\r\nclass AuthYouTube extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            email: \"\",\r\n            uid: \"\",\r\n            password: \"\",\r\n            errorMessage: null,\r\n            twitterName: \"\",\r\n            igName: \"\"\r\n        };\r\n        console.log(window.location.href)\r\n        //console.log(this.state.uid)\r\n\r\n        //const cookies = new Cookies();\r\n        //const returnToken = cookies.get('ytAuthReturn')\r\n\r\n        //console.log('returnToken')\r\n        //console.log(returnToken)\r\n        //this.parseToken(returnToken)\r\n    }\r\n\r\n    componentDidMount(){\r\n        firebase.auth().onAuthStateChanged(function(user) {\r\n            if (user) {\r\n                console.log(\"YES logged in\")\r\n                console.log(user.uid)\r\n                this.setState({uid: user.uid})\r\n                \r\n                const cookies = new Cookies();\r\n                const returnToken = cookies.get('ytAuthReturn', { path: '/', domain: 'https://smauthlanding.herokuapp.com/' })\r\n                const returnToken2 = cookies.get('ytAuthReturn', { path: '/' })\r\n\r\n                console.log('returnToken')\r\n                console.log(returnToken)\r\n                console.log(returnToken2)\r\n                this.parseToken(returnToken)\r\n            } else {\r\n              console.log(\"NO logged in\")\r\n\r\n              //this.parseToken(\"temp\")\r\n\r\n              this.props.history.push(\"/OpenScreen\");\r\n            }\r\n        }.bind(this));\r\n\r\n        //this.authTwitch()\r\n        //this.authInstagram()\r\n    }\r\n    \r\n    parseToken(returnToken){\r\n        //const returnUrl = returnToken\r\n        const returnUrl = window.location.href\r\n        console.log(\"checking window\")\r\n        console.log(returnUrl)\r\n        console.log(window.location.href)\r\n        var authToken = ''\r\n        for(var i=0; i<returnUrl.length; i++){\r\n            var currSubstring = returnUrl.substr(i, 5)\r\n            if('code=' == currSubstring){\r\n                console.log(\"access_token= found\")\r\n                authToken = returnUrl.substr(i+5, 75)\r\n                console.log(authToken)\r\n                i = returnUrl.length\r\n            }\r\n        }\r\n\r\n        var ytToken = ''\r\n        const exchangeEndpoint = 'https://smbackendnodejs.herokuapp.com/postYouTubeExchange'\r\n        //local\r\n        //const exchangeEndpoint = '/postYouTubeExchange'\r\n        axios.post(exchangeEndpoint + \"/?token=\" + authToken).then(response => {\r\n            console.log(response)\r\n            console.log(response.data.access_token)\r\n            ytToken = response.data.access_token\r\n\r\n            const collPath = '/mainCollection/' + this.state.uid +'/ytInfo'\r\n            firebase.database().ref(collPath).update({\r\n                youtubeAuthToken: ytToken\r\n            })\r\n\r\n            const cookies = new Cookies()\r\n            cookies.set('ytToken', ytToken, { path: '/' })\r\n        })\r\n        .catch(error=>console.log(error))\r\n\r\n        //this.authInstagram()\r\n    }\r\n\r\n    authInstagram(){    \r\n        const auth = new OAuth2PopupFlow({\r\n            authorizationUri: 'https://api.instagram.com/oauth/authorize',\r\n            clientId: '971610706609059',\r\n            //redirectUri: 'https://localhost:3005/',\r\n            redirectUri: 'https://smauthlanding.herokuapp.com/',\r\n            scope: 'user_profile,user_media',\r\n            responseType: 'code'\r\n        });\r\n \r\n        console.log(\"1\")\r\n        auth.tryLoginPopup();\r\n        console.log(\"2\")\r\n         \r\n        window.close();\r\n    }\r\n\r\n    skipInstagram(){\r\n        console.log(\"skipping instagram\")\r\n        window.open(\"https://thesocialmediumappjs.herokuapp.com/#/AuthInstagram?code=NoIg\" ,\"_self\");\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div style={rootStyle} className=\"authyoutube-screen\" id=\"AuthYouTube\">\r\n\r\n                <Container style={mainContainer}>\r\n                    <Row style={{display: 'flex', justifyContent: 'center'}}>\r\n                        <h2 style={{color: '#e8e6e3'}} className=\"display-1 font-weight-bolder\">Authorize Instagram</h2>\r\n                    </Row>\r\n                    <Row style={{display: 'flex', justifyContent: 'center'}}>\r\n                        <Button onClick={this.authInstagram} style={button}><h4 style={textStyle}>Auth Instagram</h4></Button>\r\n                    </Row>\r\n                    <Row style={{display: 'flex', justifyContent: 'center'}}>\r\n                        <h2 style={{color: '#e8e6e3'}} className=\"display-1 font-weight-bolder\">Skip if Wheezy hasn't set up your IG. DM him for setup.</h2>\r\n                    </Row>\r\n                    <Row style={{display: 'flex', justifyContent: 'center'}}>\r\n                        <Button onClick={this.skipInstagram} style={button}><h4 style={textStyle}>Skip Instagram</h4></Button>\r\n                    </Row>\r\n                </Container>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst rootStyle = {\r\n    height: \"100vh\",\r\n    backgroundColor: \"#25282a\"\r\n    //backgroundColor: \"#ACACAC\"\r\n}\r\nconst mainContainer = {\r\n    //backgroundColor: \"#ACACAC\",\r\n    backgroundColor: \"#25282a\",\r\n    height: \"100%\",\r\n    fluid: true\r\n}\r\nconst button = {\r\n    shadowOpacity: 0.3,\r\n    shadowRadius: 3,\r\n    shadowOffset: {\r\n    height: 0,\r\n    width: 0\r\n    },\r\n    elevation: 1,\r\n    marginTop: '5%',\r\n    backgroundColor: \"#401058\",\r\n    borderRadius: 5,\r\n    borderColor: \"#393939\",\r\n    borderWidth: 1,\r\n    width: 120\r\n}\r\nconst textStyle = {\r\n    color: \"white\"\r\n}\r\n\r\nexport default withRouter(AuthYouTube);","C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\screens\\AuthInstagram.js",["130","131","132","133","134"],"import React from 'react';\r\nimport {withRouter} from 'react-router-dom';\r\nimport axios from \"axios\";\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Button from 'react-bootstrap/Button'\r\nimport Form from 'react-bootstrap/Form'\r\n\r\nimport firebase from \"firebase\";\r\nimport 'firebase/database';\r\n\r\nimport Cookies from 'universal-cookie';\r\n\r\nimport { OAuth2PopupFlow } from 'oauth2-popup-flow';\r\n\r\nclass AuthInstagram extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            email: \"\",\r\n            uid: \"\",\r\n            password: \"\",\r\n            errorMessage: null,\r\n            twitterName: \"\",\r\n            igName: \"\"\r\n        };\r\n        console.log(window.location.href)\r\n\r\n        const cookies = new Cookies();\r\n        const returnToken = cookies.get('igAuthReturn')\r\n\r\n        //this.parseToken(returnToken)\r\n    }\r\n\r\n    componentDidMount(){\r\n        firebase.auth().onAuthStateChanged(function(user) {\r\n            if (user) {\r\n                console.log(\"YES logged in\")\r\n                console.log(user.uid)\r\n                this.setState({uid: user.uid})\r\n                \r\n                const cookies = new Cookies();\r\n                const returnToken = cookies.get('igAuthReturn', { path: '/', domain: 'https://smauthlanding.herokuapp.com' })\r\n\r\n                console.log('returnToken')\r\n                console.log(returnToken)\r\n                this.parseToken(returnToken)\r\n            } else {\r\n              console.log(\"NO logged in\")\r\n              this.props.history.push(\"/OpenScreen\");\r\n            }\r\n        }.bind(this));\r\n\r\n        //this.authTwitch()\r\n        //this.authInstagram()\r\n    }\r\n\r\n    parseToken(returnToken){\r\n        const returnUrl = window.location.href\r\n        console.log(\"checking window\")\r\n        console.log(returnUrl)\r\n        var authToken = ''\r\n        for(var i=0; i<returnUrl.length; i++){\r\n            var currSubstring = returnUrl.substr(i, 5)\r\n\r\n            if('code=' == currSubstring){\r\n\r\n                if(returnUrl.substr(i+5, 4) == \"NoIg\"){\r\n                    console.log(\"ig was skipped\")\r\n                    authToken = \"NA\"\r\n                    console.log(authToken)\r\n                    i = returnUrl.length\r\n                }\r\n                else{\r\n                    console.log(\"code= found\")\r\n                    authToken = returnUrl.substr(i+5, 238)\r\n                    console.log(authToken)\r\n                    i = returnUrl.length\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        if(authToken == \"NA\"){\r\n            \r\n            const collPath = '/mainCollection/' + this.state.uid +'/igInfo'\r\n            firebase.database().ref(collPath).update({\r\n                igAuthToken: authToken,\r\n                igUserID: \"NoID\",\r\n                userName: \"NoIG\"\r\n            })\r\n\r\n        }\r\n        else{\r\n\r\n        var igToken = ''\r\n        var igID = ''\r\n        const exchangeEndpoint = 'https://smbackendnodejs.herokuapp.com/postInstagramExchange'\r\n        //local\r\n        //const exchangeEndpoint = '/postInstagramExchange'\r\n        axios.post(exchangeEndpoint + \"/?token=\" + authToken).then(response => {\r\n            console.log(response.data.access_token)\r\n            igToken = response.data.access_token\r\n            igID = response.data.user_id\r\n\r\n            const collPath = '/mainCollection/' + this.state.uid +'/igInfo'\r\n            firebase.database().ref(collPath).update({\r\n                igAuthToken: igToken,\r\n                igUserID: igID\r\n            })\r\n\r\n        })\r\n        .catch(error=>console.log(error))\r\n\r\n        }\r\n    }\r\n\r\n    /*\r\n    authTwitter(){    \r\n        const auth = new OAuth2PopupFlow({\r\n            authorizationUri: 'https://api.instagram.com/oauth/authorize',\r\n            clientId: '971610706609059',\r\n            redirectUri: 'https://localhost:3005/',\r\n            scope: 'user_profile,user_media',\r\n            responseType: 'code'\r\n        });\r\n \r\n        console.log(\"1\")\r\n        auth.tryLoginPopup();\r\n        console.log(\"2\")\r\n         \r\n        window.close();\r\n    }*/\r\n\r\n    authTwitter(){\r\n\r\n        var twitterToken = ''\r\n        const exchangeEndpoint = 'https://smbackendnodejs.herokuapp.com/postTwitterExchange'\r\n        //local\r\n        //const exchangeEndpoint = '/postTwitterExchange'\r\n        axios.post(exchangeEndpoint).then(response => {\r\n            console.log(response)\r\n            console.log(response.data)\r\n            console.log(response.data.access_token)\r\n            twitterToken = response.data.access_token\r\n\r\n            const collPath = '/mainCollection/' + this.state.uid +'/twitterInfo'\r\n            firebase.database().ref(collPath).update({\r\n                twitterAuthToken: twitterToken,\r\n                userName: this.state.twitterName\r\n            })\r\n\r\n            this.props.history.push(\"/LoadSocials\", {testProp: \"test test\"});\r\n        })\r\n        .catch(error=>console.log(error))\r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div style={rootStyle} className=\"authinstagram-screen\" id=\"AuthInstagram\">\r\n\r\n                <Container style={mainContainer}>\r\n                    <Row style={{display: 'flex', justifyContent: 'center'}}>\r\n                        <h2 style={{color: '#e8e6e3'}} className=\"display-1 font-weight-bolder\">Enter Twitter Name</h2>\r\n                    </Row>\r\n                \r\n                    <Row style={{display: 'flex', justifyContent: 'center'}}>\r\n                    <Form style={{marginTop: 60}}>\r\n                        <Form.Group controlId=\"formBasicUserName\">\r\n                            <Form.Label style={{color: '#e8e6e3'}}>Twitter Name: </Form.Label>\r\n                            <Form.Control type=\"username\" placeholder=\"Twitter @ (don't include @)\" onChange={e => this.setState({ twitterName: e.target.value })} />\r\n                        </Form.Group>\r\n\r\n                        <Button onClick={this.authTwitter.bind(this)} style={button}><h4 style={textStyle}>Auth Twitter</h4></Button>\r\n                    </Form>\r\n                    </Row>\r\n                </Container>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst rootStyle = {\r\n    height: \"100vh\",\r\n    backgroundColor: \"#25282a\"\r\n    //backgroundColor: \"#ACACAC\"\r\n}\r\nconst mainContainer = {\r\n    //backgroundColor: \"#ACACAC\",\r\n    backgroundColor: \"#25282a\",\r\n    height: \"100%\",\r\n    fluid: true\r\n}\r\nconst button = {\r\n    shadowOpacity: 0.3,\r\n    shadowRadius: 3,\r\n    shadowOffset: {\r\n    height: 0,\r\n    width: 0\r\n    },\r\n    elevation: 1,\r\n    marginTop: '5%',\r\n    backgroundColor: \"#401058\",\r\n    borderRadius: 5,\r\n    borderColor: \"#393939\",\r\n    borderWidth: 1,\r\n    width: 120\r\n}\r\nconst textStyle = {\r\n    color: \"white\"\r\n}\r\n\r\nexport default withRouter(AuthInstagram);","C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\screens\\FeedScreen.js",["135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179"],"import React from 'react';\r\nimport { withRouter, Link } from 'react-router-dom';\r\nimport axios from \"axios\";\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form'\r\n\r\nimport Modal from 'react-bootstrap/Modal'\r\n\r\nimport { List, Image, Button } from 'semantic-ui-react'\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\nimport firebase from \"firebase\";\r\nimport 'firebase/database';\r\n\r\nimport Cookies from 'universal-cookie';\r\n\r\n\r\nimport { TwitchEmbed, TwitchChat, TwitchClip, TwitchPlayer } from 'react-twitch-embed';\r\n\r\nimport YouTube from 'react-youtube-embed'\r\n\r\nimport { Timeline, Tweet } from 'react-twitter-widgets'\r\nimport { TwitterTimelineEmbed, TwitterShareButton, TwitterTweetEmbed } from 'react-twitter-embed';\r\n\r\nimport { InstagramMedia } from 'react-instagram-media'\r\n//import InstagramEmbed from 'react-social-embed'\r\n\r\n\r\nimport TwitchComponent from \"../components/TwitchComponent\";\r\nimport YoutubeComponent from \"../components/YoutubeComponent\";\r\nimport TwitterComponent from \"../components/TwitterComponent\";\r\nimport InstagramComponent from \"../components/InstagramComponent\";\r\n\r\n\r\nimport DefaultPFP from '../pictureIcons/defaultpfp.jpg'\r\n\r\nimport TwitchLogo from '../pictureIcons/twitch-image.png'\r\nimport IgLogo from '../pictureIcons/ig-image.png'\r\nimport TwitterLogo from '../pictureIcons/twitter-image.png'\r\nimport YTLogo from '../pictureIcons/youtube-image.png'\r\nimport AllLogo from '../pictureIcons/allpic.jpg'\r\n\r\nimport ThumbUpAltIcon from '@material-ui/icons/ThumbUpAlt';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport RepeatIcon from '@material-ui/icons/Repeat';\r\n\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\n\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Nav from 'react-bootstrap/Nav'\r\n\r\nimport CustomScroll from 'react-custom-scroll';\r\nimport { ScrollView } from \"@cantonjs/react-scroll-view\";\r\nimport ScrollPagedView from 'react-scroll-paged-view'\r\n\r\nimport StickyFooter from 'react-sticky-footer';\r\n\r\nclass FeedScreen extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        console.log(props.location.state)\r\n\r\n        this.state = {\r\n            email: \"\",\r\n            uid: props.location.state.myUID,\r\n            password: \"\",\r\n            errorMessage: null,\r\n            twitterName: \"\",\r\n            igName: \"\",\r\n            refreshing: false,\r\n            testRow: [],\r\n            postNum: 0,\r\n            combinedRows: [],\r\n            feedList: [],\r\n            ytSubVidsData: props.location.state.subsVids,\r\n            //ytSubVids: [],\r\n            currentYtSubVids: [],\r\n            ytSubVids: props.location.state.createdYtSubVids,\r\n            twitchStreamsData: props.location.state.followsTwitchStreams,\r\n            //twitchStreams: [],\r\n            currentTwitchStreams: [],\r\n            twitchStreams: props.location.state.createdTwitchStreams,\r\n            tweetsData: props.location.state.followsTweets,\r\n            //tweetRows: [],\r\n            currentTweetRows: [],\r\n            tweetRows: props.location.state.createdTweetRows,\r\n            igData: props.location.state.followsIgPosts,\r\n            //igRows: [],\r\n            currentIgRows: [],\r\n            igRows: props.location.state.createdIgRows,\r\n            currNumPosts: 20,\r\n            feedFilter: \"all\",\r\n\r\n            combinedList: props.location.state.combinedPosts,\r\n\r\n            currentFeed: props.location.state.combinedPosts.slice(0, 20)\r\n        };\r\n        console.log(\"in feed screen\")\r\n        //console.log(this.props.location.state.subsVids)\r\n\r\n        //this.setState({ytSubVidsData: this.props.location.state.subsVids})\r\n        //this.setState({twitchStreamsData: this.props.location.state.followsTwitchStreams})\r\n        //this.setState({tweetsData: this.props.location.state.followsTweets})\r\n        //this.setState({igData: this.props.location.state.followsIgPosts})\r\n\r\n        //const sortedVids = this.sortVideos()\r\n        //const sortedTweets = await this.sortTweets()\r\n        //const sortedIg = await this.sortIg()\r\n        //this.createFeed()\r\n\r\n        //this.handleScroll = this.handleScroll.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n        firebase.auth().onAuthStateChanged(function(user) {\r\n            if (user) {\r\n                console.log(\"YES logged in\")\r\n\r\n                //firebase.analytics().logEvent(\"open_feed\", {\"uid\": user.uid});\r\n            } else {\r\n              console.log(\"NO logged in\")\r\n              this.props.history.push(\"/OpenScreen\");\r\n            }\r\n        }.bind(this));\r\n\r\n        console.log(\"mounted\")\r\n\r\n        console.log(\"testing the props\")\r\n        console.log(this.state.uid)\r\n        //console.log(this.state.ytSubVidsData)\r\n        //console.log(this.state.twitchStreamsData)\r\n        //console.log(this.state.followsIgPosts)\r\n        //console.log(this.state.followsTweets)\r\n\r\n        console.log(this.state.tweetRows)\r\n        console.log(this.state.igRows)\r\n        console.log(this.state.twitchStreams)\r\n        console.log(this.state.ytSubVids)\r\n\r\n        console.log(this.state.combinedList)\r\n\r\n        window.addEventListener(\"scroll\", this.handleScroll.bind(this));\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"scroll\", this.handleScroll.bind(this));\r\n    }\r\n\r\n    async createFeed(){\r\n        const twitchRows = await this.createTwitchRows()\r\n        //this.setState({twitchStreams: twitchRows})\r\n\r\n        const sortedVids = await this.sortVideos()\r\n        const ytVidsRows = await this.createYtRows(sortedVids)\r\n        //this.setState({ytSubVids: ytVidsRows})\r\n\r\n        const sortedTweets = await this.sortTweets()\r\n        const tweetRows = await this.createTweetRows(sortedTweets)\r\n        //this.setState({tweetRows: tweetRows})\r\n\r\n        //const sortedIg = await this.sortIg()\r\n        //const igRows = await this.createIgRows(sortedIg)\r\n        //this.setState({igRows: igRows})\r\n    }\r\n\r\n    getIgPost(){\r\n        console.log(this.state.uid)\r\n        const collPath = '/mainCollection/'+ this.state.uid + '/igInfo'\r\n        var follows = []\r\n        console.log(collPath)\r\n        firebase.database().ref(collPath).once('value').then(async (snapshot) => {\r\n            follows = snapshot.child('followsIgPosts').val()\r\n            console.log(follows)\r\n            this.setState({igData: follows})\r\n            this.sortIg()\r\n        })\r\n    }\r\n\r\n    sortIg(){\r\n        console.log(\"ig sorting\")\r\n        console.log(this.state.igData)\r\n        var totalIgList = this.state.igData\r\n\r\n        //sort tweets list by date\r\n        \r\n        for(var x=totalIgList.length - 1; x>=0; x--){\r\n            for(var y=1; y<=x; y++){\r\n\r\n            var swap = false\r\n            var date1 = totalIgList[y-1][3]\r\n            var date2 = totalIgList[y][3]\r\n\r\n            if( parseInt(date1.substring(0,4)) > parseInt(date2.substring(0,4)) ){\r\n                swap = true\r\n            }\r\n            else if( parseInt(date1.substring(0,4)) < parseInt(date2.substring(0,4)) ){\r\n                swap = false\r\n            }\r\n            else if( parseInt(date1.substring(5,7)) > parseInt(date2.substring(5,7)) ){\r\n                swap = true\r\n            }\r\n            else if( parseInt(date1.substring(5,7)) < parseInt(date2.substring(5,7)) ){\r\n                swap = false\r\n            }\r\n            else if( parseInt(date1.substring(8,10)) > parseInt(date2.substring(8,10)) ){\r\n                swap = true\r\n            }\r\n            else if( parseInt(date1.substring(8,10)) < parseInt(date2.substring(8,10)) ){\r\n                swap = false\r\n            }\r\n            else if( parseInt(date1.substring(11,13)) > parseInt(date2.substring(11,13)) ){\r\n                swap = true\r\n            }\r\n            else if( parseInt(date1.substring(11,13)) < parseInt(date2.substring(11,13)) ){\r\n                swap = false\r\n            }\r\n            else if( parseInt(date1.substring(14,16)) > parseInt(date2.substring(14,16)) ){\r\n                swap = true\r\n            }\r\n            else if( parseInt(date1.substring(14,16)) < parseInt(date2.substring(14,16)) ){\r\n                swap = false\r\n            }\r\n            else if( parseInt(date1.substring(14,16)) > parseInt(date2.substring(14,16)) ){\r\n                swap = true\r\n            }\r\n            else if( parseInt(date1.substring(17,19)) < parseInt(date2.substring(17,19)) ){\r\n                swap = false\r\n            }\r\n\r\n            if(!swap){\r\n                var temp = totalIgList[y-1]\r\n                totalIgList[y-1] = totalIgList[y]\r\n                totalIgList[y] = temp\r\n            }\r\n            }\r\n        }\r\n        //console.log(totalYtList)\r\n        return totalIgList\r\n    }\r\n\r\n    sortTweets(){\r\n        console.log(this.state.tweetsData)\r\n        var totalTweetList = this.state.tweetsData\r\n\r\n        //sort tweets list by date\r\n        console.log(\"tweet sorting\")\r\n        for(var x=totalTweetList.length - 1; x>=0; x--){\r\n            for(var y=1; y<=x; y++){\r\n\r\n            var swap = false\r\n            var date1 = totalTweetList[y-1][2]\r\n            var date2 = totalTweetList[y][2]\r\n\r\n            if( parseInt(date1.substring(0,4)) > parseInt(date2.substring(0,4)) ){\r\n                swap = true\r\n            }\r\n            else if( parseInt(date1.substring(0,4)) < parseInt(date2.substring(0,4)) ){\r\n                swap = false\r\n            }\r\n            else if( parseInt(date1.substring(5,7)) > parseInt(date2.substring(5,7)) ){\r\n                swap = true\r\n            }\r\n            else if( parseInt(date1.substring(5,7)) < parseInt(date2.substring(5,7)) ){\r\n                swap = false\r\n            }\r\n            else if( parseInt(date1.substring(8,10)) > parseInt(date2.substring(8,10)) ){\r\n                swap = true\r\n            }\r\n            else if( parseInt(date1.substring(8,10)) < parseInt(date2.substring(8,10)) ){\r\n                swap = false\r\n            }\r\n            else if( parseInt(date1.substring(11,13)) > parseInt(date2.substring(11,13)) ){\r\n                swap = true\r\n            }\r\n            else if( parseInt(date1.substring(11,13)) < parseInt(date2.substring(11,13)) ){\r\n                swap = false\r\n            }\r\n            else if( parseInt(date1.substring(14,16)) > parseInt(date2.substring(14,16)) ){\r\n                swap = true\r\n            }\r\n            else if( parseInt(date1.substring(14,16)) < parseInt(date2.substring(14,16)) ){\r\n                swap = false\r\n            }\r\n            else if( parseInt(date1.substring(14,16)) > parseInt(date2.substring(14,16)) ){\r\n                swap = true\r\n            }\r\n            else if( parseInt(date1.substring(17,19)) < parseInt(date2.substring(17,19)) ){\r\n                swap = false\r\n            }\r\n\r\n            if(!swap){\r\n                var temp = totalTweetList[y-1]\r\n                totalTweetList[y-1] = totalTweetList[y]\r\n                totalTweetList[y] = temp\r\n            }\r\n            }\r\n        }\r\n        //console.log(totalYtList)\r\n        return totalTweetList\r\n    }\r\n\r\n    createTweetRows(sortedTweets){\r\n        console.log(\"creating tweet rows\")\r\n        console.log(sortedTweets)\r\n        const tweetRows = []\r\n        for(var i=0; i<sortedTweets.length; i++){\r\n            //console.log(sortedVids[i][1])\r\n            const newTweet = <TwitterComponent twitterName={sortedTweets[i][0]} postNum={sortedTweets[i][1]}/>\r\n            tweetRows.push(newTweet)\r\n        }\r\n        this.setState({tweetRows: tweetRows})\r\n        return tweetRows\r\n    }\r\n\r\n    sortVideos(){\r\n        console.log(this.state.ytSubVidsData)\r\n        var totalYtList = this.state.ytSubVidsData\r\n\r\n        //sort ytVideos list by date\r\n        console.log(\"youtube sorting\")\r\n        //console.log(totalYtList)\r\n        for(var x=totalYtList.length - 1; x>=0; x--){\r\n            for(var y=1; y<=x; y++){\r\n\r\n            var swap = false\r\n            var date1 = totalYtList[y-1][1]\r\n            var date2 = totalYtList[y][1]\r\n\r\n            if( parseInt(date1.substring(0,4)) > parseInt(date2.substring(0,4)) ){\r\n                swap = true\r\n            }\r\n            else if( parseInt(date1.substring(0,4)) < parseInt(date2.substring(0,4)) ){\r\n                swap = false\r\n            }\r\n            else if( parseInt(date1.substring(5,7)) > parseInt(date2.substring(5,7)) ){\r\n                swap = true\r\n            }\r\n            else if( parseInt(date1.substring(5,7)) < parseInt(date2.substring(5,7)) ){\r\n                swap = false\r\n            }\r\n            else if( parseInt(date1.substring(8,10)) > parseInt(date2.substring(8,10)) ){\r\n                swap = true\r\n            }\r\n            else if( parseInt(date1.substring(8,10)) < parseInt(date2.substring(8,10)) ){\r\n                swap = false\r\n            }\r\n            else if( parseInt(date1.substring(11,13)) > parseInt(date2.substring(11,13)) ){\r\n                swap = true\r\n            }\r\n            else if( parseInt(date1.substring(11,13)) < parseInt(date2.substring(11,13)) ){\r\n                swap = false\r\n            }\r\n            else if( parseInt(date1.substring(14,16)) > parseInt(date2.substring(14,16)) ){\r\n                swap = true\r\n            }\r\n            else if( parseInt(date1.substring(14,16)) < parseInt(date2.substring(14,16)) ){\r\n                swap = false\r\n            }\r\n            else if( parseInt(date1.substring(14,16)) > parseInt(date2.substring(14,16)) ){\r\n                swap = true\r\n            }\r\n            else if( parseInt(date1.substring(17,19)) < parseInt(date2.substring(17,19)) ){\r\n                swap = false\r\n            }\r\n\r\n            if(!swap){\r\n                var temp = totalYtList[y-1]\r\n                totalYtList[y-1] = totalYtList[y]\r\n                totalYtList[y] = temp\r\n            }\r\n            }\r\n        }\r\n        console.log(totalYtList)\r\n        return totalYtList\r\n    }\r\n\r\n    createYtRows(sortedVids){\r\n        const ytVidRows = []\r\n        //for(var i=0; i<sortedVids.length; i++)\r\n        for(var i=0; i<sortedVids.length; i++){\r\n            //console.log(sortedVids[i][1])\r\n            const newVid = <YoutubeComponent key={sortedVids[i][0][0]} videoId={sortedVids[i][0][1]} thumbnailUrl={sortedVids[i][0][2]} vidTitle={sortedVids[i][0][3]} channelName={sortedVids[i][0][4]} profilePic={sortedVids[i][0][5]} userName={sortedVids[i][0][6]} bio={sortedVids[i][0][7]} description={sortedVids[i][0][8]} authToken={sortedVids[i][0][9]}/>\r\n            ytVidRows.push(newVid)\r\n        }\r\n        this.setState({ytSubVids: ytVidRows})\r\n        return ytVidRows\r\n    }\r\n\r\n    createTwitchRows(){\r\n        var twitchRows = []\r\n        var liveStreams = this.state.twitchStreamsData\r\n        for(var i=0; i<liveStreams.length; i++){ //liveStreams.length\r\n            //console.log(liveStreams[i].user_name)\r\n            const twitchRow = <TwitchComponent key={liveStreams[i][0]} userName={liveStreams[i][1]} streamTitle={liveStreams[i][2]} twitchAuth={liveStreams[i][3]} myName={liveStreams[i][4]} thumbnail={liveStreams[i][5]} profilePic={liveStreams[i][6]}/>\r\n            //const twitchRow = [liveStreams[i].user_name, liveStreams[i].user_name, liveStreams[i].title, this.state.twitchAuthToken, this.state.twitchName]\r\n            twitchRows.push(twitchRow)\r\n        }\r\n        this.setState({twitchStreams: twitchRows})\r\n        return twitchRows\r\n    }\r\n\r\n    fillAll(){\r\n        this.setState({currentFeed: this.state.combinedList.slice(0, 20)})\r\n        this.setState({feedFilter: \"all\"})\r\n        this.setState({currNumPosts: 20})\r\n    }\r\n\r\n    fillTwitch(){\r\n        this.setState({currentFeed: this.state.twitchStreams.slice(0, 10)})\r\n        this.setState({feedFilter: \"twitch\"})\r\n        this.setState({currNumPosts: 10})\r\n    }\r\n\r\n    fillYT(){\r\n        this.setState({currentFeed: this.state.ytSubVids.slice(0, 10)})\r\n        this.setState({feedFilter: \"yt\"})\r\n        this.setState({currNumPosts: 10})\r\n    }\r\n\r\n    fillIG(){\r\n        this.setState({currentFeed: this.state.igRows.slice(0, 10)})\r\n        this.setState({feedFilter: \"ig\"})\r\n        this.setState({currNumPosts: 10})\r\n    }\r\n\r\n    fillTwitter(){\r\n        this.setState({currentFeed: this.state.tweetRows.slice(0, 10)})\r\n        this.setState({feedFilter: \"twitter\"})\r\n        this.setState({currNumPosts: 10})\r\n    }\r\n\r\n    handleScroll() {\r\n        const windowHeight = \"innerHeight\" in window ? window.innerHeight : document.documentElement.offsetHeight;\r\n        const body = document.body;\r\n        const html = document.documentElement;\r\n        const docHeight = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\r\n        const windowBottom = windowHeight + window.pageYOffset;\r\n        if (windowBottom >= docHeight - 5) {\r\n            console.log(\"bottom reached\")\r\n\r\n            var newNumPosts = this.state.currNumPosts + 10\r\n\r\n            if(this.state.feedFilter == \"all\"){\r\n                this.setState({currentFeed: this.state.combinedList.slice(0, newNumPosts)})\r\n            }\r\n            else if(this.state.feedFilter == \"twitch\"){\r\n                this.setState({currentFeed: this.state.twitchStreams.slice(0, newNumPosts)})\r\n            }\r\n            else if(this.state.feedFilter == \"yt\"){\r\n                this.setState({currentFeed: this.state.ytSubVids.slice(0, newNumPosts)})\r\n            }\r\n            else if(this.state.feedFilter == \"ig\"){\r\n                this.setState({currentFeed: this.state.igRows.slice(0, newNumPosts)})\r\n            }\r\n            else{\r\n                this.setState({currentFeed: this.state.tweetRows.slice(0, newNumPosts)})\r\n            }\r\n\r\n            this.setState({currNumPosts: newNumPosts})\r\n\r\n        }\r\n        else {\r\n            console.log(\"scrolling\")\r\n            console.log(docHeight)\r\n            console.log(windowBottom)\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div style={rootStyle} className=\"authyoutube-screen\" id=\"AuthYouTube\">\r\n\r\n   \r\n                <Container style={headerComponent} >\r\n                    <Row style={{display: 'flex', justifyContent: 'center'}}>\r\n                        <Col style={{display: 'flex', flex: 1, flexDirection: 'row', justifyContent: 'center'}}>\r\n                            <Avatar onClick={this.fillAll.bind(this)} style={{width: 50, height: 50}} src={AllLogo} />\r\n                        </Col>\r\n                        <Col style={{display: 'flex', flex: 1, flexDirection: 'row', justifyContent: 'center'}}>\r\n                            <Avatar onClick={this.fillTwitch.bind(this)} style={{width: 50, height: 50}} src={TwitchLogo} />\r\n                        </Col>\r\n                        <Col style={{display: 'flex', flex: 1, flexDirection: 'row', justifyContent: 'center'}}>\r\n                            <Avatar onClick={this.fillYT.bind(this)} style={{width: 50, height: 50}} src={YTLogo} />\r\n                        </Col>\r\n                        <Col style={{display: 'flex', flex: 1, flexDirection: 'row', justifyContent: 'center'}}>\r\n                            <Avatar onClick={this.fillIG.bind(this)} style={{width: 50, height: 50}} src={IgLogo} />\r\n                        </Col>\r\n                        <Col style={{display: 'flex', flex: 1, flexDirection: 'row', justifyContent: 'center'}}>\r\n                            <Avatar onClick={this.fillTwitter.bind(this)} style={{width: 50, height: 50}} src={TwitterLogo} />\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n\r\n                <Container style={{zIndex: 0}}>\r\n\r\n                {this.state.currentFeed}\r\n\r\n                {/* {this.state.tweetRows.slice(0, 5)} */}\r\n\r\n                {/* {this.state.igRows.slice(0, 5)} */}\r\n\r\n                {/* {this.state.ytSubVids.slice(0, 5)} */}\r\n\r\n                {/* {this.state.twitchStreams.slice(0, 5)} */}\r\n\r\n                </Container>\r\n          \r\n                \r\n                \r\n                <StickyFooter\r\n                    bottomThreshold={50}\r\n                    normalStyles={{\r\n                    backgroundColor: \"#999999\",\r\n                    padding: \"2rem\"\r\n                    }}\r\n                    stickyStyles={{\r\n                    backgroundColor: \"rgba(255,255,255,.8)\",\r\n                    padding: \"2rem\"\r\n                    }}\r\n                >\r\n\r\n                <Navbar style={{footer}} sticky='bottom' bg=\"dark\" variant=\"dark\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Nav.Link as={Link} \r\n                            to={{pathname: \"/FeedScreen\",\r\n                                state:\r\n                                    this.props.location.state\r\n                            }}\r\n                        >\r\n                            <HomeIcon style={{marginLeft: 100, marginRight: 40, color: 'black', maxWidth: '50px', maxHeight: '50px', minWidth: '50px', minHeight: '50px'}} />\r\n                        </Nav.Link>\r\n                        <Nav.Link as={Link} \r\n                            to={{pathname: \"/FeedScreen\",\r\n                                state:\r\n                                    this.props.location.state\r\n                            }}\r\n                        >\r\n                            <StarIcon style={{marginLeft: 40, marginRight: 40, color: 'black', maxWidth: '50px', maxHeight: '50px', minWidth: '50px', minHeight: '50px'}} />\r\n                        </Nav.Link>\r\n                        <Nav.Link as={Link} \r\n                            to={{pathname: \"/ProfileScreen\",\r\n                                state:\r\n                                    this.props.location.state\r\n                            }}\r\n                        >\r\n                            <PersonIcon style={{marginLeft: 40, marginRight: 40, color: 'black', maxWidth: '50px', maxHeight: '50px', minWidth: '50px', minHeight: '50px'}} />\r\n                        </Nav.Link>\r\n                        <Nav.Link as={Link} \r\n                            to={{pathname: \"/SearchScreen\",\r\n                                state:\r\n                                    this.props.location.state\r\n                            }}\r\n                        >\r\n                            <SearchIcon style={{marginLeft: 40, marginRight: 40, color: 'black', maxWidth: '50px', maxHeight: '50px', minWidth: '50px', minHeight: '50px'}} />\r\n                        </Nav.Link>\r\n                        <Nav.Link as={Link} \r\n                            to={{pathname: \"/InfoScreen\",\r\n                                state:\r\n                                    this.props.location.state\r\n                            }}\r\n                        >\r\n                            <InfoIcon style={{marginLeft: 40, marginRight: 100, color: 'black', maxWidth: '50px', maxHeight: '50px', minWidth: '50px', minHeight: '50px'}} />\r\n                        </Nav.Link>\r\n                    </Nav>\r\n                </Navbar>\r\n\r\n                </StickyFooter>\r\n  \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst headerComponent = {\r\n    backgroundColor: \"#474d50\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    borderRadius: 10,\r\n    borderWidth: 1,\r\n    borderColor: '#fff',\r\n    fluid: true,\r\n    flex: 1,\r\n    marginLeft: 50,\r\n    marginRight: 50,\r\n    paddingTop: 20,\r\n    paddingBottom: 20,\r\n    marginBottom: 20,\r\n    alignSelf: \"center\",\r\n    width: 800,\r\n    position: '-webkit-sticky',\r\n    position: 'sticky',\r\n    top: 0,\r\n    zIndex: 1000\r\n}\r\n\r\nconst footer = {\r\n    backgroundColor: \"#474d50\",\r\n    clear: 'both',\r\n    position: 'relative',\r\n    height: '200px',\r\n    marginTop: '-200px'\r\n}\r\n\r\nconst tweetComponent = {\r\n    backgroundColor: \"#ACACAC\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"stretch\",\r\n    borderRadius: 10,\r\n    borderWidth: 1,\r\n    borderColor: '#fff',\r\n    //fluid: true,\r\n    //flex: 1,\r\n    marginLeft: 50,\r\n    marginRight: 50,\r\n    paddingTop: 20,\r\n    paddingBottom: 20,\r\n    marginBottom: 20,\r\n    alignSelf: \"center\",\r\n    width: 800\r\n}\r\n\r\nconst tweetComponent2 = {\r\n    backgroundColor: \"#ACACAC\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"stretch\",\r\n    borderRadius: 10,\r\n    borderWidth: 1,\r\n    borderColor: '#fff',\r\n    //fluid: true,\r\n    //flex: 1,\r\n    marginLeft: 50,\r\n    marginRight: 50,\r\n    paddingTop: 20,\r\n    paddingBottom: 20,\r\n    marginBottom: 20,\r\n    alignSelf: \"center\",\r\n    width: 800\r\n}\r\n\r\nconst twitchComponent = {\r\n    backgroundColor: \"#ACACAC\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    borderRadius: 10,\r\n    borderWidth: 1,\r\n    borderColor: '#fff',\r\n    fluid: true,\r\n    flex: 1,\r\n    marginLeft: 50,\r\n    marginRight: 50,\r\n    paddingTop: 20,\r\n    paddingBottom: 20,\r\n    marginBottom: 20,\r\n    alightSelf: \"center\",\r\n    width: 800\r\n}\r\n\r\nconst container = {\r\n    marginHorizontal: 10,\r\n    marginVertical: 10,\r\n    paddingLeft: 50,\r\n    paddingRight: 50,\r\n    backgroundColor: \"#ACACAC\",\r\n    width: \"90%\",\r\n    flex: 1,\r\n    display: 'flex',\r\n    justifyContent: \"center\",\r\n    borderRadius: 10,\r\n    borderWidth: 1,\r\n    borderColor: '#fff'\r\n}\r\n\r\nconst rootStyle = {\r\n    height: \"100%\",\r\n    backgroundColor: \"#25282a\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    paddingTop: 30,\r\n    paddingBottom: 30,\r\n    display: 'flex',\r\n    flexDirection: \"column\"\r\n}\r\nconst rootStyle2 = {\r\n    height: \"100%\",\r\n    backgroundColor: \"#313131\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    paddingTop: 30,\r\n    paddingBottom: 30,\r\n    display: 'flex',\r\n    flexDirection: \"column\"\r\n}\r\n\r\nconst mainContainer = {\r\n    backgroundColor: \"#313131\",\r\n    height: \"100%\",\r\n    //fluid: true\r\n}\r\nconst button = {\r\n    shadowOpacity: 0.3,\r\n    shadowRadius: 3,\r\n    shadowOffset: {\r\n    height: 0,\r\n    width: 0\r\n    },\r\n    elevation: 1,\r\n    marginTop: '5%',\r\n    backgroundColor: \"#401058\",\r\n    borderRadius: 5,\r\n    borderColor: \"#393939\",\r\n    borderWidth: 1,\r\n    width: 70,\r\n    height: 30,\r\n    color: \"white\",\r\n    justifyContent: \"left\"\r\n}\r\nconst textStyle = {\r\n    color: \"black\"\r\n}\r\n\r\nconst textStyle2 = {\r\n    color: \"white\",\r\n    alightItems: \"center\"\r\n}\r\n\r\nexport default withRouter(FeedScreen);","C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\components\\TwitchComponent.js",["180","181","182","183","184","185","186","187","188","189","190","191"],"import React from 'react';\r\n\r\nimport firebase from \"firebase\";\r\nimport 'firebase/database';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\n\r\nimport { TwitchEmbed, TwitchChat, TwitchClip, TwitchPlayer } from 'react-twitch-embed';\r\n\r\nimport DefaultPFP from '../pictureIcons/defaultpfp.jpg'\r\n\r\nimport TwitchLogo from '../pictureIcons/twitch-image.png'\r\nimport IgLogo from '../pictureIcons/ig-image.png'\r\nimport TwitterLogo from '../pictureIcons/twitter-image.png'\r\nimport YTLogo from '../pictureIcons/youtube-image.png'\r\nimport AllLogo from '../pictureIcons/allpic.jpg'\r\n\r\nimport { List, Button } from 'semantic-ui-react'\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\nimport Modal from '@material-ui/core/Modal';\r\nimport FollowOverlay from \"../components/FollowOverlay\";\r\n\r\nclass TwitchComponent extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        const authToken = this.props.twitchAuth\r\n\r\n        const uName = this.props.userName\r\n        const mName = this.props.myName\r\n\r\n        var thumbUrl = \"\"\r\n\r\n        var startRow = <Image onClick={this.watchChannel.bind(this)} src={thumbUrl} rounded />\r\n\r\n        if(this.props.streamTitle == \"Offline\"){\r\n            console.log(\"was offline\")\r\n            thumbUrl = 'https://ps.w.org/stream-status-for-twitch/assets/screenshot-2.jpg?rev=1565951'\r\n\r\n            startRow = <Image src={thumbUrl} rounded />\r\n        }\r\n        else{\r\n            thumbUrl = this.props.thumbnail.substr(0, this.props.thumbnail.length - 20) + '800x480.jpg'\r\n\r\n            startRow = <Image onClick={this.watchChannel.bind(this)} src={thumbUrl} rounded />\r\n        }\r\n\r\n        this.state = {\r\n            uid: this.props.myUID,\r\n            userName: uName,\r\n            myName: mName,\r\n            twitchAuth: authToken,\r\n            modalVisible: false,\r\n            trimmedTitle: '',\r\n            twitchRow: startRow,\r\n            followClicked: false,\r\n\r\n            userCheck: ''\r\n        }\r\n    };\r\n\r\n    componentDidMount(){\r\n        this.trimNames()\r\n        this.checkingUser()\r\n    }\r\n\r\n    checkingUser(){\r\n        console.log(\"checking if user is on platform\")\r\n        const collPath = '/twitchConnections'\r\n        const userName = this.props.userName\r\n        firebase.database().ref(collPath).once('value').then((snapshot) => {\r\n            console.log(\"checking user\")\r\n            const exists = snapshot.child(userName).val()\r\n            if(exists){\r\n                console.log(exists.uid)\r\n                this.setState({userCheck: exists.uid})\r\n            } \r\n            else{\r\n                this.setState({userCheck: 'NA'})\r\n            }\r\n        })\r\n    }\r\n\r\n    trimNames(){\r\n        console.log(\"trimming titles\")\r\n        console.log(this.state.userName)\r\n        console.log(this.props.userName)\r\n        console.log(this.props.streamTitle)\r\n        console.log(this.props.profilePic)\r\n\r\n        var forTitle = 35 - 3 - this.props.userName.length\r\n\r\n        var title = ''\r\n        if(this.props.userName.length + this.props.streamTitle.length <= 35){\r\n            title = this.props.userName + ' - ' + this.props.streamTitle\r\n        }\r\n        else{\r\n            title = this.props.userName + ' - ' + this.props.streamTitle.substr(0,forTitle) + '...'\r\n        }\r\n        \r\n        this.setState({trimmedTitle: title})\r\n    }\r\n\r\n    watchChannel() {\r\n        const newRow = <TwitchEmbed\r\n            channel={this.state.userName}\r\n            id={this.state.userName}\r\n            theme=\"dark\"\r\n            width={800}\r\n            muted\r\n            allowFullscreen={true}\r\n            onVideoPause={() => console.log(':(')}\r\n        />      \r\n\r\n        this.setState({twitchRow: newRow})\r\n    }\r\n\r\n    clickFollow(){\r\n        this.setState({followClicked: !this.state.followClicked})\r\n    }\r\n\r\n    render(){\r\n        return(\r\n\r\n                <Container style={twitchComponent}>\r\n                    <Row style={{display: 'flex', justifyContent: 'center', height: 85}}>\r\n                        <Col style={{display: 'flex', flex: 1}}>\r\n                            <Avatar style={{width: 50, height: 50, marginLeft: 10}} src={this.props.profilePic} />\r\n                        </Col>\r\n                        <Col style={{display: 'flex', flex: 5, flexDirection: \"column\", justifyContent: \"flex-start\", alignSelf: \"start\"}}>\r\n                            <Row style={{display: 'flex', flex: 1, justifyContent: \"flex-start\", alignSelf: \"start\"}}>\r\n                                <Button onClick={this.clickFollow.bind(this)} style={button}>Follow</Button>\r\n                                <Modal\r\n                                    open={this.state.followClicked}\r\n                                    onClose={this.clickFollow.bind(this)}\r\n                                    aria-labelledby=\"simple-modal-title\"\r\n                                    aria-describedby=\"simple-modal-description\"\r\n                                >\r\n                                    \r\n                                    <FollowOverlay platform=\"twitch\" userName={this.state.userName}  myUID={this.state.uid} userCheck={this.state.userCheck}/>\r\n                                    \r\n                                </Modal>\r\n                            </Row>\r\n                            <Row style={{display: 'flex', flex: 1, justifyContent: \"flex-start\",  alignSelf: \"start\"}}>\r\n                                <h2 style={{ color: '#e8e6e3' }} className=\"display-1 font-weight-bolder\">{this.state.trimmedTitle}</h2> \r\n                            </Row>\r\n                        </Col>\r\n                        <Col style={{display: 'flex', flex: 1, justifyContent: 'flex-end', marginRight: 10}}>\r\n                            <Avatar style={{width: 50, height: 50}} src={TwitchLogo} />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row style={{display: 'flex', justifyContent: 'center'}}>\r\n                        {this.state.twitchRow}\r\n                    </Row>\r\n                </Container>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst rootStyle = {\r\n    height: \"100hv\",\r\n    backgroundColor: \"#313131\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    paddingTop: 30,\r\n    paddingBottom: 30,\r\n    display: 'flex',\r\n    flexDirection: \"column\"\r\n}\r\n\r\n\r\nconst twitchComponent = {\r\n    backgroundColor: \"#474d50\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    borderRadius: 10,\r\n    borderWidth: 1,\r\n    borderColor: '#fff',\r\n    fluid: true,\r\n    flex: 1,\r\n    marginLeft: 50,\r\n    marginRight: 50,\r\n    paddingTop: 20,\r\n    paddingBottom: 20,\r\n    marginBottom: 20,\r\n    alightSelf: \"center\",\r\n    width: 800\r\n}\r\n\r\nconst button2 = {\r\n    shadowOpacity: 0.3,\r\n    shadowRadius: 3,\r\n    shadowOffset: {\r\n    height: 0,\r\n    width: 0\r\n    },\r\n    elevation: 1,\r\n    marginTop: '5%',\r\n    backgroundColor: \"#401058\",\r\n    borderRadius: 5,\r\n    borderColor: \"#393939\",\r\n    borderWidth: 1,\r\n    width: 70,\r\n    height: 30,\r\n    color: \"white\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    marginLeft: 10,\r\n    marginBottom: 35\r\n}\r\n\r\nconst button = {\r\n    shadowOpacity: 0.3,\r\n    shadowRadius: 3,\r\n    shadowOffset: {\r\n    height: 0,\r\n    width: 0\r\n    },\r\n    elevation: 1,\r\n    marginTop: '5%',\r\n    backgroundColor: \"#401058\",\r\n    borderRadius: 5,\r\n    borderColor: \"#393939\",\r\n    borderWidth: 1,\r\n    width: 70,\r\n    height: 30,\r\n    color: \"white\",\r\n    justifyContent: \"left\"\r\n}\r\n\r\nexport default TwitchComponent;","C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\screens\\MainNavigation.js",["192","193","194","195","196","197","198","199","200","201","202","203"],"import React from 'react';\r\n\r\nimport {withRouter} from 'react-router-dom';\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\nimport { RoutedTabs, NavTab } from \"react-router-tabs\";\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Nav from 'react-bootstrap/Nav'\r\n\r\nimport FeedScreen from '../screens/FeedScreen';\r\n\r\nimport ThumbUpAltIcon from '@material-ui/icons/ThumbUpAlt';\r\n\r\nclass MainNavigation extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            email: \"\",\r\n            //uid: auth.currentUser.uid,\r\n            password: \"\",\r\n            errorMessage: null,\r\n            twitterName: \"\",\r\n            igName: \"\"\r\n        };\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div style={rootStyle} className=\"open-screen\" id=\"open\">\r\n                <Row>\r\n                    test test teset\r\n                </Row>\r\n                <Navbar style={{justifyContent: 'center'}}fixed='bottom' sticky='bottom' bg=\"dark\" variant=\"dark\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Nav.Link href=\"/FeedScreen\">\r\n                            <ThumbUpAltIcon style={{color: 'black', maxWidth: '40px', maxHeight: '40px', minWidth: '40px', minHeight: '40px'}} />\r\n                        </Nav.Link>\r\n                        <Nav.Link href=\"/FeedScreen\">\r\n                            <ThumbUpAltIcon style={{color: 'black', maxWidth: '40px', maxHeight: '40px', minWidth: '40px', minHeight: '40px'}} />\r\n                        </Nav.Link>\r\n                    </Nav>\r\n                </Navbar>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst rootStyle = {\r\n    height: \"100vh\",\r\n    backgroundColor: \"#ACACAC\"\r\n}\r\nconst mainContainer = {\r\n    backgroundColor: \"#ACACAC\",\r\n    height: \"100%\",\r\n    fluid: true\r\n}\r\nconst button = {\r\n    shadowOpacity: 0.3,\r\n    shadowRadius: 3,\r\n    shadowOffset: {\r\n    height: 0,\r\n    width: 0\r\n    },\r\n    elevation: 1,\r\n    marginTop: '5%',\r\n    backgroundColor: \"#401058\",\r\n    borderRadius: 5,\r\n    borderColor: \"#393939\",\r\n    borderWidth: 1,\r\n    width: 120\r\n}\r\nconst textStyle = {\r\n    color: \"white\"\r\n}\r\nconst title = {\r\n    color: \"black\",\r\n    marginTop: \"20%\"\r\n}\r\n\r\nexport default withRouter(MainNavigation);",["204","205"],"C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\screens\\ProfileScreen.js",["206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235"],"import React from 'react';\r\nimport { withRouter, Link } from 'react-router-dom';\r\nimport axios from \"axios\";\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport { List, Image, Button } from 'semantic-ui-react'\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\nimport firebase from \"firebase\";\r\nimport 'firebase/database';\r\n\r\nimport Cookies from 'universal-cookie';\r\n\r\nimport DefaultPFP from '../pictureIcons/defaultpfp.jpg'\r\n\r\nimport TwitchLogo from '../pictureIcons/twitch-image.png'\r\nimport IgLogo from '../pictureIcons/ig-image.png'\r\nimport TwitterLogo from '../pictureIcons/twitter-image.png'\r\nimport YTLogo from '../pictureIcons/youtube-image.png'\r\n\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\n\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Nav from 'react-bootstrap/Nav'\r\n\r\nimport StickyFooter from 'react-sticky-footer';\r\n\r\nimport AutoScrollContainer from 'auto-scroll-container'\r\n\r\nimport { StickyContainer, Sticky } from 'react-sticky';\r\n\r\n\r\nimport ThumbUpAltIcon from '@material-ui/icons/ThumbUpAlt';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport RepeatIcon from '@material-ui/icons/Repeat';\r\n\r\nimport { TwitchEmbed, TwitchChat, TwitchClip, TwitchPlayer } from 'react-twitch-embed';\r\n\r\nimport YouTube from 'react-youtube-embed'\r\n\r\nimport { Timeline, Tweet } from 'react-twitter-widgets'\r\nimport { TwitterTimelineEmbed, TwitterShareButton, TwitterTweetEmbed } from 'react-twitter-embed';\r\n\r\nimport { InstagramMedia } from 'react-instagram-media'\r\n\r\nclass ProfileScreen extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        console.log(props.location.state)\r\n\r\n        const startRow = <Row style={{marginTop: 100, marginBottom: 900}}>Click above to view socials...</Row>\r\n        var startRows = []\r\n        startRows.push(startRow)\r\n\r\n        this.state = {\r\n            email: \"\",\r\n            uid: props.location.state.myUID,\r\n            password: \"\",\r\n            errorMessage: null,\r\n\r\n            displayName: \"\",\r\n            twitterName: \"\",\r\n            igName: \"\",\r\n            twitchName: \"\",\r\n            youtubeName: \"\",\r\n\r\n            twitchRow: props.location.state.createdMyTwitchStreams,\r\n            ytRows: props.location.state.createdMyYtSubVids,\r\n            twitterRows: props.location.state.createdMyTweetRows,\r\n            igRows: props.location.state.createdMyIgRows,\r\n            currentFeed: startRows,\r\n\r\n            twitchPFP: this.props.location.state.myTwitchStream[6],\r\n            ytPFP: this.props.location.state.myYTvids[0][5],\r\n            currPFP: DefaultPFP,\r\n            pfpCount: 0,\r\n            currPFPplatform: DefaultPFP\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n        firebase.auth().onAuthStateChanged(function(user) {\r\n            if (user) {\r\n                console.log(\"YES logged in\")\r\n\r\n            } else {\r\n              console.log(\"NO logged in\")\r\n              this.props.history.push(\"/OpenScreen\");\r\n            }\r\n        }.bind(this));\r\n\r\n        console.log(this.props.location.state.myTwitchStream[6])\r\n        console.log(this.props.location.state.myYTvids[0][5])\r\n\r\n        const collPath = '/mainCollection/' + this.state.uid\r\n        firebase.database().ref(collPath).once('value').then((snapshot) => {\r\n            const myDisplayName = snapshot.child('displayName').val()\r\n            this.setState({displayName: myDisplayName})\r\n\r\n            const newTwitter = snapshot.child('twitterInfo').val()\r\n            const newIG = snapshot.child('igInfo').val()\r\n            const newTwitch = snapshot.child('twitchInfo').val()\r\n            const newYoutube = snapshot.child('ytInfo').val()\r\n\r\n            this.setState({twitchName: newTwitch.userName})\r\n            this.setState({youtubeName: newYoutube.userName})\r\n            this.setState({twitterName: newTwitter.userName})\r\n            this.setState({igName: newIG.userName})\r\n\r\n            this.switchPFP()\r\n        })\r\n    }\r\n\r\n    fillTwitch(){\r\n        var fillRows = []\r\n        const startRow = <Row style={{marginTop: 100, marginBottom: 300}}></Row>\r\n        fillRows.push(this.state.twitchRow)\r\n        fillRows.push(startRow)\r\n        this.setState({currentFeed: fillRows})\r\n    }\r\n\r\n    fillYT(){\r\n        this.setState({currentFeed: this.state.ytRows})\r\n    }\r\n\r\n    fillIG(){\r\n        this.setState({currentFeed: this.state.igRows})\r\n    }\r\n\r\n    fillTwitter(){\r\n        this.setState({currentFeed: this.state.twitterRows})\r\n    }\r\n\r\n    switchPFP(){\r\n        if(this.state.pfpCount == 0){\r\n            this.setState({currPFPplatform: TwitchLogo})\r\n            this.setState({currPFP: this.state.twitchPFP})\r\n            this.setState({pfpCount: 1})\r\n        }\r\n        else if(this.state.pfpCount == 1){\r\n            this.setState({currPFPplatform: YTLogo})\r\n            this.setState({currPFP: this.state.ytPFP})\r\n            this.setState({pfpCount: 0})\r\n        }\r\n        else{\r\n            this.setState({currPFPplatform: DefaultPFP})\r\n            this.setState({currPFP: DefaultPFP})\r\n            this.setState({pfpCount: 0})\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div style={rootStyle} className=\"profile-screen\" id=\"ProfileScreen\">\r\n\r\n\r\n                <Container style={headerComponent} >\r\n                    <Row style={{display: 'flex', justifyContent: 'center'}}>\r\n                        <Col style={{display: 'flex', flex: 1}}>\r\n                            <Avatar onClick={this.switchPFP.bind(this)} style={{width: 100, height: 100, marginLeft: 10}} src={this.state.currPFP} />\r\n                            <Avatar style={{width: 20, height: 20, marginLeft: 0}} src={this.state.currPFPplatform} />\r\n                        </Col>\r\n                        <Col style={{display: 'flex', flex: 5, flexDirection: \"column\", justifyContent: \"flex-start\", alignSelf: \"start\"}}>\r\n                            <Row style={{display: 'flex', flex: 1, justifyContent: \"flex-start\", alignSelf: \"start\", marginLeft: 20, marginTop: 10}}>\r\n                                <Button style={button}>Follow</Button>\r\n                            </Row>\r\n                            <Row style={{display: 'flex', flex: 1, justifyContent: \"flex-start\",  alignSelf: \"start\", marginLeft: 22}}>\r\n                                <h2 style={{ color: '#e8e6e3' }}>{this.state.displayName}</h2> \r\n                            </Row>\r\n                        </Col>\r\n                        <Col style={{display: 'flex', flex: 1, justifyContent: 'flex-end', marginRight: 10}}>\r\n                            {/* <Avatar style={{width: 50, height: 50}} src={TwitchLogo} /> */}\r\n                        </Col>\r\n                    </Row>\r\n                    <Row style={{display: 'flex', justifyContent: 'center', marginTop: 10, height: 90}}>\r\n                        <Col style={{display: 'flex', flex: 1, flexDirection: 'column', justifyContent: 'center', marginLeft: 50}}>\r\n                            <Row  style={{display: 'flex', flex: 1, flexDirection: 'row', height: 30}}>\r\n                                <h3 style={{ color: '#e8e6e3' }}>Social</h3> \r\n                            </Row>\r\n                            <Row style={{display: 'flex', flex: 1, flexDirection: 'row', alignItems: 'center'}}>\r\n                                <Avatar onClick={this.fillTwitch.bind(this)} style={{width: 30, height: 30}} src={TwitchLogo} />\r\n                                <h3 style={{marginLeft: 5, color: '#e8e6e3'}}>{this.state.twitchName}</h3> \r\n                            </Row>\r\n                            <Row style={{display: 'flex', flex: 1, flexDirection: 'row', alignItems: 'center', height: 20}}>\r\n                                <Avatar onClick={this.fillYT.bind(this)} style={{width: 30, height: 30}} src={YTLogo} />\r\n                                <h3 style={{marginLeft: 5, color: '#e8e6e3'}}>{this.state.youtubeName}</h3> \r\n                            </Row>\r\n                        </Col>\r\n                        <Col style={{display: 'flex', flex: 1, flexDirection: 'column', justifyContent: 'center', marginLeft: 50}}>\r\n                            <Row  style={{display: 'flex', flex: 1, flexDirection: 'row', height: 30}}>\r\n                                <h3 style={{ color: '#e8e6e3' }}>Social</h3> \r\n                            </Row>\r\n                            <Row style={{display: 'flex', flex: 1, flexDirection: 'row', alignItems: 'center'}}>\r\n                                <Avatar onClick={this.fillIG.bind(this)} style={{width: 30, height: 30}} src={IgLogo} />\r\n                                <h3 style={{marginLeft: 5, color: '#e8e6e3'}}>{this.state.igName}</h3> \r\n                            </Row>\r\n                            <Row style={{display: 'flex', flex: 1, flexDirection: 'row', alignItems: 'center', height: 20}}>\r\n                                <Avatar onClick={this.fillTwitter.bind(this)} style={{width: 30, height: 30}} src={TwitterLogo} />\r\n                                <h3 style={{marginLeft: 5, color: '#e8e6e3'}}>{this.state.twitterName}</h3> \r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n\r\n                <Container style={{zIndex: 0}}>\r\n\r\n                    {this.state.currentFeed}\r\n\r\n                </Container>\r\n\r\n                <StickyFooter\r\n                    bottomThreshold={50}\r\n                    normalStyles={{\r\n                    backgroundColor: \"#999999\",\r\n                    padding: \"2rem\"\r\n                    }}\r\n                    stickyStyles={{\r\n                    backgroundColor: \"rgba(255,255,255,.8)\",\r\n                    padding: \"2rem\"\r\n                    }}\r\n                >\r\n\r\n                <Navbar style={{footer}} sticky='bottom' bg=\"dark\" variant=\"dark\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Nav.Link as={Link} \r\n                            to={{pathname: \"/FeedScreen\",\r\n                                state:\r\n                                    this.props.location.state\r\n                            }}\r\n                        >\r\n                            <HomeIcon style={{marginLeft: 100, marginRight: 40, color: 'black', maxWidth: '50px', maxHeight: '50px', minWidth: '50px', minHeight: '50px'}} />\r\n                        </Nav.Link>\r\n                        <Nav.Link as={Link} \r\n                            to={{pathname: \"/FeedScreen\",\r\n                                state:\r\n                                    this.props.location.state\r\n                            }}\r\n                        >\r\n                            <StarIcon style={{marginLeft: 40, marginRight: 40, color: 'black', maxWidth: '50px', maxHeight: '50px', minWidth: '50px', minHeight: '50px'}} />\r\n                        </Nav.Link>\r\n                        <Nav.Link as={Link} \r\n                            to={{pathname: \"/ProfileScreen\",\r\n                                state:\r\n                                    this.props.location.state\r\n                            }}\r\n                        >\r\n                            <PersonIcon style={{marginLeft: 40, marginRight: 40, color: 'black', maxWidth: '50px', maxHeight: '50px', minWidth: '50px', minHeight: '50px'}} />\r\n                        </Nav.Link>\r\n                        <Nav.Link as={Link} \r\n                            to={{pathname: \"/SearchScreen\",\r\n                                state:\r\n                                    this.props.location.state\r\n                            }}\r\n                        >\r\n                            <SearchIcon style={{marginLeft: 40, marginRight: 40, color: 'black', maxWidth: '50px', maxHeight: '50px', minWidth: '50px', minHeight: '50px'}} />\r\n                        </Nav.Link>\r\n                        <Nav.Link as={Link} \r\n                            to={{pathname: \"/InfoScreen\",\r\n                                state:\r\n                                    this.props.location.state\r\n                            }}\r\n                        >\r\n                            <InfoIcon style={{marginLeft: 40, marginRight: 100, color: 'black', maxWidth: '50px', maxHeight: '50px', minWidth: '50px', minHeight: '50px'}} />\r\n                        </Nav.Link>\r\n                    </Nav>\r\n                </Navbar>\r\n\r\n                </StickyFooter>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst myscrollstyle = {\r\n    height: '100vh',\r\n    width: '400px',\r\n    marginReft: 'auto',\r\n    marginRight: 'auto',\r\n    overflowY: 'scroll'\r\n}\r\n\r\nconst footer = {\r\n    clear: 'both',\r\n    position: 'relative',\r\n    marginTop: '-200px',\r\n}\r\n\r\nconst tweetComponent = {\r\n    backgroundColor: \"#ACACAC\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"stretch\",\r\n    borderRadius: 10,\r\n    borderWidth: 1,\r\n    borderColor: '#fff',\r\n    //fluid: true,\r\n    //flex: 1,\r\n    marginLeft: 50,\r\n    marginRight: 50,\r\n    paddingTop: 20,\r\n    paddingBottom: 20,\r\n    marginBottom: 20,\r\n    alignSelf: \"center\",\r\n    width: 800\r\n}\r\n\r\nconst headerComponent = {\r\n    //backgroundColor: \"#ACACAC\",\r\n    backgroundColor: \"#474d50\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    borderRadius: 10,\r\n    borderWidth: 1,\r\n    borderColor: '#fff',\r\n    fluid: true,\r\n    flex: 1,\r\n    marginLeft: 50,\r\n    marginRight: 50,\r\n    paddingTop: 20,\r\n    paddingBottom: 20,\r\n    marginBottom: 20,\r\n    alignSelf: \"center\",\r\n    width: 800,\r\n    position: '-webkit-sticky',\r\n    position: 'sticky',\r\n    top: 0,\r\n    zIndex: 1000\r\n}\r\n\r\nconst twitchComponent = {\r\n    backgroundColor: \"#ACACAC\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    borderRadius: 10,\r\n    borderWidth: 1,\r\n    borderColor: '#fff',\r\n    fluid: true,\r\n    flex: 1,\r\n    marginLeft: 50,\r\n    marginRight: 50,\r\n    paddingTop: 20,\r\n    paddingBottom: 20,\r\n    marginBottom: 20,\r\n    alightSelf: \"center\",\r\n    width: 800\r\n}\r\n\r\nconst rootStyle = {\r\n    height: \"100hv\",\r\n    //backgroundColor: \"#313131\",\r\n    backgroundColor: \"#25282a\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    paddingTop: 30,\r\n    paddingBottom: 30,\r\n    display: 'flex',\r\n    flexDirection: \"column\"\r\n}\r\n\r\nconst button = {\r\n    shadowOpacity: 0.3,\r\n    shadowRadius: 3,\r\n    shadowOffset: {\r\n    height: 0,\r\n    width: 0\r\n    },\r\n    elevation: 1,\r\n    marginTop: '5%',\r\n    backgroundColor: \"#401058\",\r\n    borderRadius: 5,\r\n    borderColor: \"#393939\",\r\n    borderWidth: 1,\r\n    width: 70,\r\n    height: 30,\r\n    color: \"white\",\r\n    justifyContent: \"left\"\r\n}\r\n\r\nexport default withRouter(ProfileScreen);","C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\screens\\LoadSocials.js",["236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"import React from 'react';\r\nimport {Redirect, withRouter} from 'react-router-dom';\r\nimport axios from \"axios\";\r\n\r\nimport firebase from \"firebase\";\r\nimport 'firebase/database';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Button from 'react-bootstrap/Button'\r\n\r\n//import { db, auth } from '../services/firebase'\r\n\r\nimport Cookies from 'universal-cookie';\r\n\r\nimport { OAuth2PopupFlow } from 'oauth2-popup-flow';\r\n\r\nimport TwitchComponent from \"../components/TwitchComponent\";\r\nimport YoutubeComponent from \"../components/YoutubeComponent\";\r\nimport TwitterComponent from \"../components/TwitterComponent\";\r\nimport InstagramComponent from \"../components/InstagramComponent\";\r\n\r\nclass LoadSocials extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            email: \"\",\r\n            uid: firebase.auth().currentUser.uid,\r\n            password: \"\",\r\n            errorMessage: null,\r\n\r\n            doneLoading: false,\r\n\r\n            twitchToken: \"\",\r\n            twitchID: \"\",\r\n            twitchName: \"\",\r\n            myTwitchStream: [],\r\n            followsTwitchStreams: [],\r\n\r\n            youtubeToken: \"\",\r\n            youtubeID: \"\",\r\n            youtubeName: \"\",\r\n            myYTvids: [],\r\n            nextPageToken: \"\",\r\n            ytSubsList: [],\r\n            subsVids: [],\r\n            totalSubsFetched: 0,\r\n\r\n            igToken: \"\",\r\n            igUserID: \"\",\r\n            myIgPosts: [],\r\n            myIgName: \"\",\r\n            followsIgPosts: [],\r\n\r\n            twitterToken: \"\",\r\n            twitterName: \"\",\r\n            myTweets: [],\r\n            twitterId: \"\",\r\n            followsTweets: [],\r\n\r\n            createdTweetRows: [],\r\n            createdIgRows: [],\r\n            createdYtSubVids: [],\r\n            createdTwitchStreams: [],\r\n\r\n            combinedPosts: [],\r\n\r\n            createdMyTweetRows: [],\r\n            createdMyIgRows: [],\r\n            createdMyYtSubVids: [],\r\n            createdMyTwitchStreams: [],\r\n\r\n            displayName: '',\r\n\r\n            doneLoading: false,\r\n            leaveButtonText: \"Loading...\"\r\n        };\r\n        console.log(this.state.uid)\r\n        console.log(window.location.href)\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n        firebase.auth().onAuthStateChanged(function(user) {\r\n            if (user) {\r\n                console.log(\"YES logged in\")\r\n\r\n                this.setState({uid: user.uid})\r\n\r\n                firebase.analytics().logEvent(\"login\", {\"uid\": user.uid});\r\n            } else {\r\n              console.log(\"NO logged in\")\r\n              this.props.history.push(\"/OpenScreen\");\r\n            }\r\n        }.bind(this));\r\n\r\n        const cookies = new Cookies();\r\n        const ytToken = cookies.get('ytToken')\r\n\r\n        console.log('yt token')\r\n        console.log(ytToken)\r\n\r\n        const twitchToken = cookies.get('twitchToken')\r\n\r\n        console.log('twitch token')\r\n        console.log(twitchToken)\r\n\r\n        const igToken = cookies.get('igToken')\r\n\r\n        console.log('ig token')\r\n        console.log(igToken)\r\n\r\n        this.loadTwitch()\r\n        this.loadYt()\r\n        this.loadIg()\r\n        //this.loadTwitter()\r\n    }\r\n    \r\n    loadTwitch(){\r\n        console.log(\"load test twitch\")\r\n        const collPath = '/mainCollection/' + this.state.uid\r\n        firebase.database().ref(collPath).once('value').then((snapshot) => {\r\n            const newTwitch = snapshot.child('twitchInfo').val()\r\n            const displayName = snapshot.child('displayName').val()\r\n            this.setState({displayName: displayName})\r\n\r\n            this.setState({twitchToken: newTwitch.twitchAuthToken})\r\n\r\n            this.getStreams()\r\n        })\r\n    }\r\n\r\n    async getStreams(){\r\n\r\n        //let twitchLoadRow = <Text style={styles.greeting}>Loading Twitch Streams...</Text>\r\n        //this.setState({rows: twitchLoadRow})\r\n\r\n        //get all followed accounts\r\n        var authFormat = 'Bearer ' + this.state.twitchToken\r\n          \r\n        var followURL = \"https://api.twitch.tv/helix/users\"\r\n\r\n        console.log(authFormat)\r\n        console.log(followURL)\r\n\r\n        fetch(followURL, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Client-ID': '2fnwtwy41t2avoiqdc1py6oybitz4r',\r\n                'Authorization': authFormat\r\n            }\r\n        })\r\n        .then(response => response.json())\r\n        .then((responseJson)=> {\r\n            console.log(responseJson)\r\n            console.log(responseJson.data[0].id)\r\n\r\n            const pfpLink = responseJson.data[0].profile_image_url\r\n\r\n            var followsStreamsURL = \"https://api.twitch.tv/helix/streams?user_id=\" + responseJson.data[0].id\r\n\r\n            this.setState({twitchID: responseJson.data[0].id})\r\n\r\n            var myTwitchName = responseJson.data[0].login\r\n            this.setState({twitchName: responseJson.data[0].login})\r\n\r\n            //console.log(followsStreamsURL)\r\n            var authFormat = 'Bearer ' + this.state.twitchToken\r\n            fetch(followsStreamsURL, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Client-ID': '2fnwtwy41t2avoiqdc1py6oybitz4r',\r\n                    'Authorization': authFormat\r\n                }\r\n            })\r\n            .then(response => response.json())\r\n            .then(async (responseJson)=> {\r\n                //console.log(myTwitchName)\r\n                console.log(responseJson)\r\n                console.log(\"USER DATA CHECK\")\r\n                console.log(responseJson.data)\r\n\r\n                let liveCheck = responseJson.data\r\n\r\n                //let liveCheck = responseJson.data\r\n                //console.log(liveCheck.length)\r\n                if(liveCheck.length !== 0){\r\n                    //console.log(\"live\")\r\n                    //const myTwitchRow = <TwitchComponent key={liveCheck[0].user_name} userName={liveCheck[0].user_name} streamTitle={liveCheck[0].title} twitchAuth={this.state.twitchToken} myName={this.state.twitchName}/>\r\n                    //const twitchRow = [liveStreams[i].user_name, liveStreams[i].user_name, liveStreams[i].title, this.state.twitchAuthToken, this.state.twitchName, liveStreams[i].thumbnail_url, profJson.data[0].profile_image_url, liveStreams[i].user_id]\r\n                    \r\n                    const urlForProfPic = 'https://api.twitch.tv/helix/users?id=' + liveCheck[0].user_id\r\n                    \r\n                    const profJson = await fetch(urlForProfPic, {\r\n                    method: 'GET',\r\n                    headers: {\r\n                        'Client-ID': '2fnwtwy41t2avoiqdc1py6oybitz4r',\r\n                        'Authorization': authFormat\r\n                    }\r\n                    }).then(response => response.json())\r\n                    \r\n                    const myTwitchRow = [liveCheck[0].user_name, liveCheck[0].user_name, liveCheck[0].title, this.state.twitchToken, this.state.twitchName, liveCheck[0].thumbnail_url, profJson.data[0].profile_image_url, liveCheck[0].user_id]\r\n                    this.setState({myTwitchStream: myTwitchRow})\r\n                }\r\n                else{\r\n                    //console.log(\"not live\")\r\n                    //const myTwitchRow = <TwitchComponent key={this.state.twitchName} userName={this.state.twitchName} streamTitle={\"Offline\"} twitchAuth={this.state.twitchAuthToken} myName={this.state.twitchName}/>\r\n                    const myTwitchRow = [this.state.twitchName, this.state.twitchName, \"Offline\", this.state.twitchToken, this.state.twitchName, 'no thumbnail', pfpLink]\r\n                    this.setState({myTwitchStream: myTwitchRow})\r\n                }\r\n\r\n                console.log(this.state.myTwitchStream)\r\n\r\n\r\n                //now get follows live streams\r\n                \r\n                var currFollow = 100\r\n                var totalFollows = await this.getTwitchFollows(0, 100)\r\n                var followsList = totalFollows.follows\r\n\r\n                var remainNum = parseInt(totalFollows._total) % 100\r\n\r\n                //console.log(followNums)\r\n                //console.log(followList)\r\n                //console.log(remainNum)\r\n                //console.log(parseInt(totalFollows._total)/100)\r\n                \r\n                for(var i=1; i<(parseInt(totalFollows._total)/100)-1; i++){\r\n                    var newFollowsCall = await this.getTwitchFollows(currFollow, 100)\r\n                    var tempList = followsList.concat(newFollowsCall.follows)\r\n                    followsList = tempList\r\n                    currFollow = currFollow + 100\r\n                }\r\n\r\n                var remainFollowsCall = await this.getTwitchFollows(currFollow, remainNum)\r\n                var tempList = followsList.concat(remainFollowsCall.follows)\r\n                followsList = tempList\r\n\r\n                var followsListForDB = []\r\n                for(var i=0; i<followsList.length; i++){\r\n                    //console.log(followsList[i].channel._id)\r\n                    //console.log(followsList[i].channel.name)\r\n                    followsListForDB[i] = [followsList[i].channel.name, followsList[i].channel._id]\r\n                }\r\n\r\n                const collPath = '/usersFollows/' + this.state.uid\r\n                firebase.database().ref(collPath).update({\r\n                    twitch: followsListForDB\r\n                })\r\n\r\n                for(var i=0; i<(parseInt(totalFollows._total)/100); i++){\r\n                    var followsStreamsURL = \"https://api.twitch.tv/helix/streams?\"\r\n\r\n                    var numToGet = remainNum\r\n                    if(i+1<(parseInt(totalFollows._total)/100)){\r\n                        numToGet = 100\r\n                    }\r\n                    for(var j=0; j<numToGet; j++){\r\n                        followsStreamsURL = followsStreamsURL + \"user_id=\" + followsList[j].channel._id + \"&\"\r\n                    }\r\n\r\n\r\n                    fetch(followsStreamsURL, {\r\n                        method: 'GET',\r\n                        headers: {\r\n                            'Client-ID': '2fnwtwy41t2avoiqdc1py6oybitz4r',\r\n                            'Authorization': authFormat\r\n                        }\r\n                    })\r\n                    .then(response => response.json())\r\n                    .then(async (responseJson)=> {\r\n                        //console.log(responseJson)\r\n                        //console.log(\"CHECK TWITCH DATA\")\r\n                        //console.log(responseJson.data)\r\n                        //console.log(responseJson.data[0].thumbnail_url)\r\n                        const streamThumb = responseJson.data[0].thumbnail_url\r\n                        const liveStreams = responseJson.data\r\n                        var twitchRows = []\r\n                        for(var i=0; i<liveStreams.length; i++){\r\n                            //console.log(liveStreams[i].user_name)\r\n                            //const twitchRow = <TwitchComponent key={liveStreams[i].user_name} userName={liveStreams[i].user_name} streamTitle={liveStreams[i].title} twitchAuth={this.state.twitchAuthToken} myName={this.state.twitchName}/>\r\n                            const urlForProfPic = 'https://api.twitch.tv/helix/users?id=' + liveStreams[i].user_id\r\n\r\n                            const profJson = await fetch(urlForProfPic, {\r\n                                method: 'GET',\r\n                                headers: {\r\n                                    'Client-ID': '2fnwtwy41t2avoiqdc1py6oybitz4r',\r\n                                    'Authorization': authFormat\r\n                                }\r\n                            }).then(response => response.json())\r\n\r\n                            const twitchRow = [liveStreams[i].user_name, liveStreams[i].user_name, liveStreams[i].title, this.state.twitchToken, this.state.twitchName, liveStreams[i].thumbnail_url, profJson.data[0].profile_image_url, liveStreams[i].user_id]\r\n\r\n                            //console.log(\"profile pic 2\")\r\n                            //console.log(profPic)\r\n                            //const twitchRow = [liveStreams[i].user_name, liveStreams[i].user_name, liveStreams[i].title, this.state.twitchAuthToken, this.state.twitchName, streamThumb, profPic]\r\n                            twitchRows.push(twitchRow)\r\n                        }\r\n                        this.setState({followsTwitchStreams: twitchRows})\r\n\r\n                        //console.log(this.state.followsTwitchStreams)\r\n\r\n\r\n                        const createdTwitchRows = this.createTwitchRows()\r\n                        const creatMyTwitchRows = this.createMyTwitchRows()\r\n\r\n\r\n                        //move onto youtube auth\r\n                        this.checkTwitch()\r\n                    })\r\n                    .catch(error=>console.log(error))\r\n                }\r\n\r\n            })\r\n            .catch(error=>console.log(error))\r\n\r\n        })\r\n        .catch(error=>console.log(error)) //to catch the errors if any\r\n        \r\n    }\r\n\r\n    async getTwitchFollows(cursor, getNum){\r\n        var followsURL = \"https://api.twitch.tv/kraken/users/\" + this.state.twitchID + \"/follows/channels?limit=\" + getNum + \"&sortby=last_broadcast&offset=\" + cursor\r\n\r\n        const followsCall = await fetch(followsURL, {\r\n            method: 'GET',\r\n            headers: { \r\n                'Accept': 'application/vnd.twitchtv.v5+json',\r\n                'Client-ID': '2fnwtwy41t2avoiqdc1py6oybitz4r',\r\n            }\r\n        })\r\n        .then(response => response.json())\r\n        .catch(error=>console.log(error))\r\n\r\n        return followsCall   \r\n    }\r\n\r\n    checkTwitch(){\r\n        console.log(\"checking the twitch load\")\r\n        console.log(this.state.myTwitchStream)\r\n        console.log(this.state.followsTwitchStreams)\r\n    }\r\n\r\n    loadYt(){\r\n        console.log(\"load test yt\")\r\n        const collPath = '/mainCollection/' + this.state.uid\r\n        firebase.database().ref(collPath).once('value').then((snapshot) => {\r\n            const newYt = snapshot.child('ytInfo').val()\r\n\r\n            this.setState({youtubeToken: newYt.youtubeAuthToken})\r\n\r\n            this.getYTvids()\r\n        })\r\n    }\r\n\r\n    getYTvids(){\r\n        console.log(\"getting yt vids\")\r\n\r\n        //let twitchLoadRow = <Text style={styles.greeting}>Loading YouTube Videos...</Text>\r\n        //this.setState({rows: twitchLoadRow})\r\n\r\n        var ytidURL = 'https://www.googleapis.com/youtube/v3/channels?part=snippet%2CcontentDetails%2Cstatistics%2CbrandingSettings%2CtopicDetails&mine=true&key=AIzaSyCIeFNZorTXAH5MSFxIAaILwRTNMfEr3fY'\r\n\r\n        var ytAuthFormat = 'Bearer ' + this.state.youtubeToken\r\n        console.log(ytidURL)\r\n        console.log(ytAuthFormat)\r\n        fetch(ytidURL, {\r\n            headers: {\r\n                'Authorization': ytAuthFormat,\r\n                'Accept': 'application/json'\r\n            }\r\n        })\r\n        .then(response => response.json())\r\n        .then((responseJson)=> {\r\n            //console.log(responseJson)\r\n            //console.log(responseJson.items)\r\n            //console.log(responseJson.items[0])\r\n            //console.log(responseJson.items[0].contentDetails)\r\n            //console.log(responseJson.items[0].contentDetails.relatedPlaylists)\r\n            //console.log(responseJson.items[0].contentDetails.relatedPlaylists.uploads)\r\n            \r\n            var playlistURL = 'https://www.googleapis.com/youtube/v3/playlistItems?playlistId=' + responseJson.items[0].contentDetails.relatedPlaylists.uploads + '&part=snippet&maxResults=50&key=AIzaSyCIeFNZorTXAH5MSFxIAaILwRTNMfEr3fY'\r\n\r\n            const profilePic = responseJson.items[0].snippet.thumbnails.medium.url\r\n\r\n            const chanID = responseJson.items[0].id\r\n            const chanName = responseJson.items[0].snippet.title\r\n\r\n            this.setState({youtubeID: chanID})\r\n            this.setState({youtubeName: chanName})\r\n\r\n            console.log(\"YOUTUBE NAME\")\r\n            console.log(chanName)\r\n            //console.log(responseJson.items[0].snippet.channelTitle)\r\n            console.log(responseJson.items[0].snippet)\r\n\r\n            const channelDescription = responseJson.items[0].snippet.description\r\n\r\n            console.log(playlistURL)\r\n            fetch(playlistURL, {\r\n                headers: {\r\n                    'Authorization': ytAuthFormat,\r\n                    'Accept': 'application/json'\r\n                }\r\n            })\r\n            .then(response => response.json())\r\n            .then((responseJson)=> {\r\n                //console.log(responseJson)\r\n                //console.log(responseJson.items[0])\r\n                //console.log(responseJson.items[0].snippet.resourceId.videoId)\r\n                //console.log(responseJson.items[0].snippet.title)\r\n                //console.log(responseJson.items.length)\r\n\r\n                const vidsList = responseJson.items\r\n\r\n                //const newVid = <YoutubeComponent key={vidsList[i].snippet.resourceId.videoId} videoId={vidsList[i].snippet.resourceId.videoId} thumbnailUrl={vidsList[i].snippet.thumbnails.high.url} vidTitle={vidsList[i].snippet.title} channelName={vidsList[i].snippet.channelTitle}/>\r\n                var newRows = []\r\n                for(var i=0; i<vidsList.length-1; i++){\r\n                    //console.log(vidsList[i].id.videoId)\r\n                    //const newVid = <YoutubeComponent key={vidsList[i].snippet.resourceId.videoId} videoId={vidsList[i].snippet.resourceId.videoId} thumbnailUrl={vidsList[i].snippet.thumbnails.high.url} vidTitle={vidsList[i].snippet.title} channelName={vidsList[i].snippet.channelTitle}/>\r\n                    //const newVid = [vidsList[i].snippet.resourceId.videoId, vidsList[i].snippet.resourceId.videoId, vidsList[i].snippet.thumbnails.high.url, vidsList[i].snippet.title, vidsList[i].snippet.channelTitle, profilePic, subsList[currNum][0], channelDescription, responseJson.items[0].snippet.description]\r\n                    const newVid = [vidsList[i].snippet.resourceId.videoId, vidsList[i].snippet.resourceId.videoId, vidsList[i].snippet.thumbnails.high.url, vidsList[i].snippet.title, vidsList[i].snippet.channelTitle, profilePic, chanID, channelDescription, responseJson.items[i].snippet.description, this.state.youtubeToken, responseJson.items[i].snippet.publishedAt]\r\n                    newRows.push(newVid)\r\n                }\r\n                this.setState({myYTvids: newRows})\r\n                //console.log(this.state.myYTvids)\r\n\r\n                this.getYTsubs()\r\n\r\n            })\r\n            .catch(error=>console.log(error)) //to catch the errors if any\r\n\r\n\r\n\r\n\r\n        })\r\n        .catch(error=>console.log(error)) //to catch the errors if any\r\n\r\n    }\r\n\r\n    getYTsubs(){\r\n\r\n        var ytidURL = 'https://www.googleapis.com/youtube/v3/subscriptions?part=snippet%2CcontentDetails&mine=true&order=alphabetical&maxResults=10&key=AIzaSyCIeFNZorTXAH5MSFxIAaILwRTNMfEr3fY'\r\n  \r\n        var ytAuthFormat = 'Bearer ' + this.state.youtubeToken\r\n        console.log(ytidURL)\r\n        console.log(ytAuthFormat)\r\n        var subItems = []\r\n        var subList = []\r\n        fetch(ytidURL, {\r\n            headers: {\r\n                'Authorization': ytAuthFormat,\r\n                'Accept': 'application/json'\r\n            }\r\n        })\r\n        .then(response => response.json())\r\n        .then((responseJson)=> {\r\n            console.log('getting subscriptions')\r\n            //console.log(responseJson)\r\n            //console.log(responseJson.items)\r\n            subItems = []\r\n            subItems = responseJson.items\r\n            //console.log(subItems.length)\r\n            //console.log(subItems[0])\r\n            //console.log(subItems[0].snippet.resourceId)\r\n            //console.log(responseJson.nextPageToken)\r\n            this.setState({nextPageToken: responseJson.nextPageToken})\r\n            //console.log(responseJson.pageInfo.totalResults)\r\n           \r\n            subList = []\r\n            for(var i=0; i<subItems.length; i++){\r\n                const newSub = [subItems[i].snippet.resourceId.channelId, subItems[i].snippet.title]\r\n                subList.push(newSub)\r\n            }\r\n\r\n            //console.log(subList.length)\r\n\r\n            this.setState({totalSubsFetched: subList.length})\r\n            this.setState({ytSubsList: subList})\r\n\r\n            this.nextSubPage(responseJson.nextPageToken, subList.length, responseJson.pageInfo.totalResults)\r\n\r\n        })\r\n        .catch(error=>console.log(error)) //to catch the errors if any\r\n\r\n    }\r\n\r\n    nextSubPage(pageCode, numSubs, totalSubs){\r\n        console.log(\"next page function\")\r\n        //console.log(pageCode)\r\n        //console.log(numSubs)\r\n        //console.log(totalSubs)\r\n\r\n        var newNumSubs = 0\r\n\r\n        var subList = []\r\n\r\n        var subItems = []\r\n\r\n        var ytNext = 'https://www.googleapis.com/youtube/v3/subscriptions?pageToken=' + pageCode + '&part=snippet%2CcontentDetails&mine=true&order=alphabetical&maxResults=50&key=AIzaSyCIeFNZorTXAH5MSFxIAaILwRTNMfEr3fY'\r\n        //console.log(ytNext)\r\n        var newToken = ''\r\n        var ytAuthFormat = 'Bearer ' + this.state.youtubeToken\r\n        fetch(ytNext, {\r\n            headers: {\r\n                'Authorization': ytAuthFormat,\r\n                'Accept': 'application/json'\r\n            }\r\n        })\r\n        .then(response => response.json())\r\n        .then((responseJson)=> {\r\n            console.log(\"getting next page\")\r\n            //console.log(responseJson)\r\n            //console.log(responseJson.items)\r\n            //console.log(responseJson.items.length)\r\n            //console.log(responseJson.nextPageToken)\r\n            newToken = responseJson.nextPageToken\r\n            this.setState({nextPageToken: responseJson.nextPageToken})\r\n            subItems = []\r\n            subItems = responseJson.items\r\n            subList = []\r\n            for(var i=0; i<subItems.length; i++){\r\n                const newSub = [subItems[i].snippet.resourceId.channelId, subItems[i].snippet.title]\r\n                subList.push(newSub)\r\n            }\r\n\r\n            var tempList = []\r\n            tempList = this.state.ytSubsList\r\n            var combinedList = tempList.concat(subList)\r\n            this.setState({ytSubsList: combinedList})\r\n\r\n            console.log(\"before combined\")\r\n            //console.log(subList)\r\n\r\n            console.log(\"NEW LIST!\")\r\n            //console.log(combinedList)\r\n\r\n            console.log(\"new sub list\")\r\n            //console.log(subList)\r\n            //console.log(subList.length)\r\n            //console.log(numSubs)\r\n            //console.log(totalSubs)\r\n\r\n            newNumSubs = this.state.totalSubsFetched + subList.length\r\n            //console.log(\"new num\")\r\n            //console.log(newNumSubs)\r\n            this.setState({totalSubsFetched: newNumSubs})\r\n\r\n        })\r\n        .then(() => {\r\n            console.log(\"next next next\")\r\n            //console.log(newToken)\r\n            //console.log(this.state.nextPageToken)\r\n            if(newToken != undefined){\r\n                this.nextSubPage(this.state.nextPageToken, this.state.totalSubsFetched, totalSubs)\r\n            }\r\n            else{\r\n                //console.log(\"DONE\")\r\n                //console.log(this.state.ytSubsList)\r\n                //console.log(this.state.ytSubsList.length)\r\n\r\n                const collPath = '/usersFollows/' + this.state.uid\r\n                firebase.database().ref(collPath).update({\r\n                    youtube: this.state.ytSubsList\r\n                })\r\n\r\n                this.getSubVids(0, this.state.ytSubsList.length)\r\n            }\r\n        })\r\n        .catch(error=>console.log(error))\r\n\r\n    }\r\n\r\n    getSubVids(currNum, totalNum){\r\n        console.log(\"getting sub videos\")\r\n\r\n        const subsList = this.state.ytSubsList\r\n        //console.log(subsList)\r\n        \r\n        // CHANGE TO DO MULTIPLE IDs IN ONE CALL TO SAVE QUOTA SPACE-\r\n        var ytidURL = 'https://www.googleapis.com/youtube/v3/channels?part=snippet%2CcontentDetails%2Cstatistics%2CbrandingSettings%2CtopicDetails&id=' + subsList[currNum][0] + '&key=AIzaSyCIeFNZorTXAH5MSFxIAaILwRTNMfEr3fY'\r\n\r\n        var ytAuthFormat = 'Bearer ' + this.state.youtubeToken\r\n\r\n        var channelDescription = ''\r\n        var videoDescription = ''\r\n\r\n        fetch(ytidURL, {\r\n            headers: {\r\n                'Authorization': ytAuthFormat,\r\n                'Accept': 'application/json'\r\n            }\r\n        })\r\n        .then(response => response.json())\r\n        .then((responseJson)=> {\r\n            //console.log(currNum)            \r\n            //console.log(responseJson)\r\n            //console.log(\"CONTENT DETAILS AND BRANDING SETTINGS\")\r\n            //console.log(responseJson.items[0].snippet)\r\n            //console.log(responseJson.items[0].snippet.title)\r\n            //console.log(responseJson.items[0].snippet.customUrl)\r\n            //console.log(responseJson.items[0].snippet.description)\r\n            //console.log(responseJson.items[0].contentDetails)\r\n            //console.log(responseJson.items[0].brandingSettings.channel.description)\r\n\r\n            const channelDescription = responseJson.items[0].snippet.description\r\n\r\n            //console.log(responseJson.items[0].contentDetails.relatedPlaylists.uploads)\r\n\r\n            //console.log(\"channel profile pic\")\r\n            //console.log(responseJson.items[0].snippet.thumbnails.medium.url)\r\n\r\n            const profilePic = responseJson.items[0].snippet.thumbnails.medium.url\r\n\r\n            var playlistURL = 'https://www.googleapis.com/youtube/v3/playlistItems?playlistId=' + responseJson.items[0].contentDetails.relatedPlaylists.uploads + '&part=snippet&maxResults=5&key=AIzaSyCIeFNZorTXAH5MSFxIAaILwRTNMfEr3fY'\r\n\r\n            //console.log(playlistURL)\r\n            fetch(playlistURL, {\r\n                headers: {\r\n                    'Authorization': ytAuthFormat,\r\n                    'Accept': 'application/json'\r\n                }\r\n            })\r\n            .then(response => response.json())\r\n            .then((responseJson)=> {\r\n                //console.log(responseJson)\r\n                //console.log(responseJson.items[0])\r\n                //console.log(responseJson.items[0].snippet.resourceId.videoId)\r\n                //console.log(responseJson.items[0].snippet.title)\r\n                //console.log(responseJson.items[0].snippet.description)\r\n                //console.log(responseJson.items.length)\r\n\r\n                const vidsList = responseJson.items\r\n\r\n                //const newVid = <YoutubeComponent key={vidsList[i].snippet.resourceId.videoId} videoId={vidsList[i].snippet.resourceId.videoId} thumbnailUrl={vidsList[i].snippet.thumbnails.high.url} vidTitle={vidsList[i].snippet.title} channelName={vidsList[i].snippet.channelTitle}/>\r\n                var newRows = []\r\n                for(var i=0; i<vidsList.length-1; i++){\r\n                    //console.log(responseJson.items[i].snippet.description)\r\n                    //const newVid = <YoutubeComponent key={vidsList[i].snippet.resourceId.videoId} videoId={vidsList[i].snippet.resourceId.videoId} thumbnailUrl={vidsList[i].snippet.thumbnails.high.url} vidTitle={vidsList[i].snippet.title} channelName={vidsList[i].snippet.channelTitle}/>\r\n                    const newVid = [vidsList[i].snippet.resourceId.videoId, vidsList[i].snippet.resourceId.videoId, vidsList[i].snippet.thumbnails.high.url, vidsList[i].snippet.title, vidsList[i].snippet.channelTitle, profilePic, subsList[currNum][0], channelDescription, responseJson.items[i].snippet.description, this.state.youtubeToken]\r\n                    newRows.push([newVid, vidsList[i].snippet.publishedAt, vidsList[i].snippet.resourceId.videoId])\r\n                }\r\n\r\n                var tempVidList = this.state.subsVids\r\n                var combinedList = tempVidList.concat(newRows)\r\n\r\n                this.setState({subsVids: combinedList})\r\n                //console.log(this.state.subsVids)\r\n\r\n            })\r\n            .catch(error=>console.log(error)) //to catch the errors if any\r\n\r\n        })\r\n        .then(() => {\r\n            if(currNum + 1 == this.state.ytSubsList.length){\r\n                console.log(\"done with subs\")\r\n                console.log(this.state.subsVids)\r\n                console.log(this.state.myYTvids)\r\n               \r\n                //this.dupCheck()\r\n                //this.authInstagram()\r\n\r\n\r\n                const sortedVids = this.sortVideos()\r\n\r\n            }\r\n            else{\r\n                this.getSubVids(currNum + 1, this.state.ytSubsList.length)\r\n            }\r\n        })\r\n        .catch(error=>console.log(error))\r\n\r\n        //console.log(\"FINISHED\")\r\n        \r\n    }\r\n\r\n    loadIg(){\r\n        console.log(\"load test ig\")\r\n        const collPath = '/mainCollection/' + this.state.uid\r\n        firebase.database().ref(collPath).once('value').then((snapshot) => {\r\n            const newYt = snapshot.child('igInfo').val()\r\n\r\n            this.setState({igToken: newYt.igAuthToken})\r\n            this.setState({igUserID: newYt.igUserID})\r\n\r\n            if(newYt.igAuthToken == \"NA\"){\r\n                console.log(\"no ig account\")\r\n                this.setState({myIgName: \"NoIG\"})\r\n                this.getFollowsIgPosts()\r\n            }\r\n            else{\r\n                this.getIgPost(this.state.igUserID, this.state.igToken)\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    getIgPost(userID, authToken){\r\n        //console.log(\"getting ig posts\")\r\n        //this.setState({rows: this.state.defaultRow})\r\n\r\n        console.log(\"in get ig posts\")\r\n\r\n        var newRows = []\r\n\r\n        var igMediaURL = 'https://graph.instagram.com/' + userID + '/media?fields=permalink,username,media_url&access_token=' + authToken\r\n        console.log(igMediaURL)\r\n\r\n        fetch(igMediaURL)\r\n            .then(response => response.json())\r\n            .then((responseJson)=> {\r\n              console.log('response')\r\n              console.log(responseJson)\r\n              console.log(responseJson.data[0].username)\r\n              console.log(responseJson.data[0].permalink)\r\n\r\n              const permLink = responseJson.data[0].permalink\r\n              const permID = permLink.substr(permLink.length - 12, 11)\r\n\r\n              console.log(permID)\r\n\r\n              const posts = responseJson.data\r\n              console.log(posts.length)\r\n              console.log(posts)\r\n              var postsRows = []\r\n              for(var i=0; i<10; i++){\r\n                  console.log(posts[i].permalink)\r\n                  const postsID = posts[i].permalink\r\n                  const trimID = postsID.substr(postsID.length - 12, 11)\r\n                  //const igRow = <InstagramComponent key={trimID} postID={trimID}/> \r\n                  const igRow = [trimID, trimID, posts[i].username, userID, posts[i].media_url]     \r\n                  newRows.push(igRow)\r\n              }\r\n              //this.setState({igPosts: newRows})\r\n              console.log(newRows)\r\n\r\n              this.setState({myIgPosts: newRows})\r\n              //this.setState({myIgName: newRows[0][2]})\r\n\r\n\r\n                fetch('https://graph.instagram.com/' + userID + '?fields=username,id,media_count&access_token=' + authToken)\r\n                .then(response => response.json())\r\n                .then((responseJson)=> {\r\n                    console.log('response')\r\n                    console.log(responseJson.username)\r\n                    this.setState({myIgName: responseJson.username})\r\n                })\r\n                .catch(error=>console.log(error)) //to catch the errors if any\r\n\r\n\r\n              \r\n              //this.authTwitter()\r\n              //this.setTwitterName()\r\n              this.getFollowsIgPosts()\r\n\r\n            })\r\n            .catch(error=>console.log(error)) //to catch the errors if any\r\n\r\n    }\r\n\r\n    getFollowsIgPosts(){\r\n        console.log(\"getting follows\")\r\n        const collPath = '/mainCollection/'+ this.state.uid\r\n        var follows = []\r\n        firebase.database().ref(collPath).once('value').then(async (snapshot) => {\r\n            follows = snapshot.child('inAppFollows').val()\r\n            console.log(follows)\r\n            console.log(follows.length)\r\n\r\n            this.retrieveIgPosts(follows)\r\n        })\r\n    }\r\n\r\n    async retrieveIgPosts(follows){\r\n        var newRows = []\r\n        for(var i=0; i<follows.length; i++){\r\n            const collPath1 = '/mainCollection/'+ follows[i] + '/igInfo'\r\n            firebase.database().ref(collPath1).once('value').then(async (snapshot) => {\r\n                console.log(snapshot.child('userName').val())\r\n                const igName = snapshot.child('userName').val()\r\n                const igAuth = snapshot.child('igAuthToken').val()\r\n                const igID = snapshot.child('igUserID').val()\r\n\r\n                /*\r\n                const responseJson = await fetch(\"https://api.twitter.com/labs/2/tweets/search?tweet.fields=created_at,author_id,text&query=from%3A\" + twitterName, {\r\n                    headers: {\r\n                    Authorization: \"Bearer \" + twitterAuth\r\n                    }\r\n                })\r\n                .then(response => response.json())\r\n                .then((responseJson)=>{\r\n                    for(var i=0; i<responseJson.data.length; i++){\r\n                        console.log('getting tweet info')\r\n                        console.log(responseJson.data[i])\r\n                        const twitRow = [twitterName, responseJson.data[i].id, responseJson.data[i].created_at]\r\n                        newRows.push(twitRow)\r\n                    }\r\n                })\r\n                .then(()=>{\r\n                    console.log('TWITTER ROWS')\r\n                    console.log(newRows)\r\n                    this.setState({followsTweets: newRows})\r\n                })\r\n                .then(()=>{\r\n                    this.leaveLoading()\r\n                })\r\n                */\r\n\r\n                if(igAuth == \"NA\"){\r\n                    console.log(\"no ig connected\")\r\n                }\r\n                else{\r\n\r\n\r\n               var igMediaURL = 'https://graph.instagram.com/' + igID + '/media?fields=permalink,timestamp,username,profile_picture_url,media_url&access_token=' + igAuth\r\n               console.log(igMediaURL)\r\n       \r\n               fetch(igMediaURL)\r\n                   .then(response => response.json())\r\n                   .then(async (responseJson)=> {\r\n                     console.log('response INSTAGRAM')\r\n                     console.log(responseJson)\r\n                     console.log(responseJson.data[0].username)\r\n                     console.log(responseJson.data[0].permalink)\r\n       \r\n                     const permLink = responseJson.data[0].permalink\r\n                     const permID = permLink.substr(permLink.length - 12, 11)\r\n       \r\n                     console.log(permID)\r\n\r\n                     var igProfPic = 'https://graph.instagram.com/' + igID + '/user?fields=profile_picture_url&access_token=' + igAuth\r\n                     const profPicCall = await fetch(igProfPic)\r\n                     .then(response => response.json())\r\n                     .catch(error=>console.log(error))\r\n                     console.log(\"TRYING TO GET PROFILE PIC\")\r\n                     console.log(profPicCall)\r\n       \r\n                     const posts = responseJson.data\r\n                     console.log(posts.length)\r\n                     console.log(posts)\r\n                     var postsRows = []\r\n                     for(var i=0; i<10; i++){\r\n                         console.log(posts[i].permalink)\r\n                         const postsID = posts[i].permalink\r\n                         const trimID = postsID.substr(postsID.length - 12, 11)\r\n                         //const igRow = <InstagramComponent key={trimID} postID={trimID}/> \r\n                         const igRow = [trimID, trimID, posts[i].username, posts[i].timestamp, igID, posts[i].media_url]     \r\n                         newRows.push(igRow)\r\n                     }\r\n                     //this.setState({igPosts: newRows})\r\n                     console.log(newRows)\r\n       \r\n                   })\r\n                   .then(()=>{\r\n                    console.log('IG ROWS')\r\n                    console.log(newRows)\r\n                    this.setState({followsIgPosts: newRows})\r\n\r\n                    //var tempVidList = this.state.followsIgPosts\r\n                    //var combinedList = tempVidList.concat(newRows)\r\n\r\n                    //this.setState({followsIgPosts: combinedList})\r\n                   })\r\n                   .then(()=>{\r\n                    //this.setTwitterName()\r\n                    const sortedIg = this.sortIg()\r\n                    //const igRows = await this.createIgRows(sortedIg)\r\n\r\n                    /*\r\n                    if(i + 1 == follows.length){\r\n                        console.log(\"done ig follows\")\r\n            \r\n                        this.setTwitterName()\r\n                        const sortedIg = this.sortIg()\r\n                        const igRows = await this.createIgRows(sortedIg)\r\n                    }\r\n                    else{\r\n                        console.log(\"continuing follows ig posts\")\r\n                    }\r\n                    */\r\n\r\n                   })\r\n                   .catch(error=>console.log(error)) //to catch the errors if any\r\n\r\n                }\r\n\r\n            })\r\n        }\r\n    }\r\n\r\n    loadTwitter(){\r\n        console.log(\"load test twitter\")\r\n        const collPath = '/mainCollection/' + this.state.uid\r\n        firebase.database().ref(collPath).once('value').then((snapshot) => {\r\n            const newTwitter = snapshot.child('twitterInfo').val()\r\n\r\n            this.setState({twitterToken: newTwitter.twitterAuthToken})\r\n            this.setState({twitterName: newTwitter.userName})\r\n\r\n            this.getTweets(this.state.twitterToken, this.state.twitterName)\r\n        })\r\n    }\r\n\r\n    async getTweets(token, twitterName){\r\n        // TEMPORARY UNTIL TWITTER APIv2 COMES OUT\r\n\r\n        //let twitterLoadRow = <Text style={styles.greeting}>Loading the bird app...</Text>\r\n        //this.setState({rows: twitterLoadRow})\r\n\r\n        console.log(\"getting tweets\")\r\n\r\n        const newRows = []\r\n\r\n        const exchangeEndpoint = 'https://smbackendnodejs.herokuapp.com/getTwitterUser'\r\n        //local\r\n        //const exchangeEndpoint = '/getTwitterUser'\r\n        axios.get(exchangeEndpoint + \"?twitterName=\" + twitterName + \"&token=\" + token).then(response => {\r\n            console.log(response)\r\n            console.log(response.data)\r\n\r\n            this.setState({twitterId: response.data.data.id})\r\n\r\n            const exchangeEndpoint2 = 'https://smbackendnodejs.herokuapp.com/getTweets'\r\n            //local\r\n            //const exchangeEndpoint2 = '/getTweets'\r\n            axios.get(exchangeEndpoint2 + \"?twitterName=\" + response.data.data.id + \"&token=\" + token).then(responseJson => {\r\n    \r\n                    console.log(\"next getting tweets\")\r\n                    console.log(responseJson)\r\n\r\n                    //loop through here\r\n\r\n                    \r\n                    for(var i=0; i<responseJson.data.data.length; i++){\r\n                        console.log(responseJson.data[i])\r\n                        //const twitRow = <TwitterComponent twitterName=\"wheezyoutcast\" postNum={responseJson.data[i].id}/>\r\n                        const twitRow = [twitterName, responseJson.data.data[i].id, responseJson.data.data[i].created_at]\r\n                        newRows.push(twitRow)\r\n                    }\r\n    \r\n                    console.log(newRows)\r\n                    this.setState({myTweets: newRows})\r\n\r\n\r\n\r\n                    //this.getFollowsTweets()\r\n                    \r\n                    //this.leaveLoading()\r\n    \r\n            })\r\n            \r\n            const exchangeEndpoint3 = 'https://smbackendnodejs.herokuapp.com/getTwitterFollowing'\r\n\r\n            axios.get(exchangeEndpoint3 + \"?twitterId=\" + response.data.data.id + \"&token=\" + token).then(async (responseJson) => {\r\n    \r\n                    console.log(\"GETTING TWITTER FOLLOWINGS\")\r\n                    console.log(responseJson)\r\n                    console.log(responseJson.data.data)\r\n\r\n                    var followsList = responseJson.data.data\r\n\r\n                    var followsTweets = await this.retrieveTweets2(followsList, token)\r\n                    this.setState({followsTweets: followsTweets})\r\n                    var followsTweetsSorted = await this.sortTweets()\r\n                    this.leaveLoading()\r\n    \r\n            })\r\n\r\n        })\r\n\r\n    }\r\n\r\n    async getFollowsTweets(){\r\n        console.log(\"getting follows\")\r\n        const collPath = '/mainCollection/'+ this.state.uid\r\n        var follows = []\r\n        firebase.database().ref(collPath).once('value').then(async (snapshot) => {\r\n            follows = snapshot.child('inAppFollows').val()\r\n            console.log(follows)\r\n            console.log(follows.length)\r\n\r\n            this.retrieveTweets(follows)\r\n        })\r\n    }\r\n\r\n    async retrieveTweets(follows){\r\n        var newRows = []\r\n        for(var i=0; i<follows.length; i++){\r\n            const collPath1 = '/mainCollection/'+ follows[i] + '/twitterInfo'\r\n            firebase.database().ref(collPath1).once('value').then(async (snapshot) => {\r\n                console.log(snapshot.child('userName').val())\r\n                const twitterName = snapshot.child('userName').val()\r\n                const twitterAuth = snapshot.child('twitterAuthToken').val()\r\n\r\n                if(twitterName){\r\n                const exchangeEndpoint = 'https://smbackendnodejs.herokuapp.com/getTweets'\r\n                //local\r\n                //const exchangeEndpoint = '/getTweets'\r\n                axios.get(exchangeEndpoint + \"?twitterName=\" + twitterName + \"&token=\" + twitterAuth).then(responseJson => {\r\n    \r\n                    console.log(\"next getting FOLLOWS tweets\")\r\n                    console.log(responseJson)\r\n\r\n                    //loop through here\r\n                    \r\n                    for(var i=0; i<responseJson.data.data.length; i++){\r\n                        console.log(responseJson.data.data[i])\r\n                        //const twitRow = <TwitterComponent twitterName=\"wheezyoutcast\" postNum={responseJson.data[i].id}/>\r\n                        const twitRow = [twitterName, responseJson.data.data[i].id, responseJson.data.data[i].created_at]\r\n                        newRows.push(twitRow)\r\n                    }\r\n    \r\n                    console.log(newRows)\r\n                    this.setState({followsTweets: newRows})\r\n\r\n                    //var tempVidList = this.state.followsTweets\r\n                    //var combinedList = tempVidList.concat(newRows)\r\n\r\n                    //this.setState({followsTweets: combinedList})\r\n\r\n\r\n\r\n                    const sortedTweets = this.sortTweets()\r\n    \r\n                })\r\n                }\r\n                else{\r\n                    console.log(\"was null\")\r\n                }\r\n\r\n            })\r\n\r\n            /*\r\n            if(i + 1 == follows.length){\r\n                console.log(\"SORTING TWEETS\")\r\n                const sortedTweets = this.sortTweets()\r\n            }\r\n            */\r\n        }\r\n        //const sortedTweets = this.sortTweets()\r\n        this.leaveLoading()\r\n    }\r\n\r\n    async retrieveTweets2(follows, token){\r\n        var newRows = []\r\n        for(var i=0; i<follows.length; i++){\r\n\r\n            const exchangeEndpoint = 'https://smbackendnodejs.herokuapp.com/getTweets'\r\n            axios.get(exchangeEndpoint + \"?twitterName=\" + follows[i].id + \"&token=\" + token).then(responseJson => {\r\n    \r\n                console.log(\"next getting FOLLOWS tweets\")\r\n                console.log(responseJson)\r\n                console.log(i)\r\n                console.log(follows.length)\r\n\r\n                //loop through here\r\n\r\n                if(responseJson.data.data){\r\n                    \r\n                    for(var i=0; i<responseJson.data.data.length; i++){\r\n                        //console.log(responseJson.data.data[i])\r\n                        //const twitRow = <TwitterComponent twitterName=\"wheezyoutcast\" postNum={responseJson.data[i].id}/>\r\n                        const twitRow = [follows[i].id, responseJson.data.data[i].id, responseJson.data.data[i].created_at]\r\n                        newRows.push(twitRow)\r\n                    }\r\n        \r\n                    //console.log(newRows)\r\n                    //this.setState({followsTweets: newRows})\r\n\r\n                    var tempVidList = this.state.followsTweets\r\n                    var combinedList = tempVidList.concat(newRows)\r\n\r\n                    this.setState({followsTweets: combinedList})\r\n\r\n\r\n                    if(i + 1 == follows.length){\r\n                        const sortedTweets = this.sortTweets()\r\n                    }\r\n                    \r\n                }\r\n                else{\r\n                    console.log(\"DATA WAS UNDEFINED\")\r\n                }\r\n            })\r\n\r\n        }\r\n        //const sortedTweets = this.sortTweets()\r\n        return newRows\r\n        //this.leaveLoading()\r\n    }\r\n\r\n    async leaveLoading(){\r\n        console.log(\"LEAVING LOADING SCREEN\")\r\n        console.log('follows ig posts')\r\n        console.log(this.state.followsIgPosts)\r\n\r\n        //twitch\r\n        const collPath = '/mainCollection/' + this.state.uid +'/twitchInfo'\r\n        firebase.database().ref(collPath).update({\r\n            userName: this.state.twitchName\r\n        })\r\n\r\n        const collPath2 = '/twitchConnections/' + this.state.twitchName\r\n        firebase.database().ref(collPath2).update({\r\n            uid: this.state.uid\r\n        })\r\n\r\n        //youtube\r\n        const collPath3 = '/mainCollection/' + this.state.uid +'/ytInfo'\r\n        firebase.database().ref(collPath3).update({\r\n            youtubeID: this.state.youtubeID,\r\n            userName: this.state.youtubeName\r\n        })\r\n\r\n        const collPath4 = '/youtubeConnections/' + this.state.youtubeID\r\n        firebase.database().ref(collPath4).update({\r\n            uid: this.state.uid\r\n        })\r\n\r\n        //instagram\r\n        const collPath5 = '/mainCollection/' + this.state.uid +'/igInfo'\r\n        firebase.database().ref(collPath5).update({\r\n            userName: this.state.myIgName,\r\n            followsIgPosts: this.state.followsIgPosts\r\n        })\r\n\r\n        \r\n        const collPath6 = '/igConnections/' + this.state.igUserID\r\n        firebase.database().ref(collPath6).update({\r\n            uid: this.state.uid\r\n        })\r\n        \r\n\r\n        //twitter\r\n\r\n        // NEED TO CHANGE THIS TO USER TWITTER ID AFTER AUTHORIZATION\r\n        // CANT USE . $ _ etc. IN THE COLLPATH\r\n        \r\n        const collPath7 = '/mainCollection/' + this.state.uid +'/twitterInfo'\r\n        firebase.database().ref(collPath7).update({\r\n            userName: this.state.twitterName,\r\n            twitterId: this.state.twitterId\r\n        })\r\n\r\n        const collPath8 = '/twitterConnections/' + this.state.twitterId\r\n        firebase.database().ref(collPath8).update({\r\n            uid: this.state.uid\r\n        })\r\n        \r\n        //user connections list\r\n        const collPath9 = '/usersConnections/' + this.state.uid\r\n        firebase.database().ref(collPath9).update({\r\n            displayName: this.state.displayName,\r\n            twitchName: this.state.twitchName,\r\n            youtubeName: this.state.youtubeName,\r\n            youtubeID: this.state.youtubeID,\r\n            igName: this.state.myIgName,\r\n            igUserID: this.state.igUserID,\r\n            twitterName: this.state.twitterName\r\n        })\r\n\r\n\r\n        console.log(\"leaving loading\")\r\n        console.log(this.state.myIgPosts)\r\n        //console.log(this.state.subsVids)\r\n\r\n        const twitchProp = this.state.followsTwitchStreams\r\n        console.log(twitchProp)\r\n\r\n        //this.props.navigation.setParams({ testProp2: \"testing 1234\" });\r\n\r\n\r\n        \r\n        //const twitchRows = this.createTwitchRows()\r\n        //this.setState({createdTwitchStreams: twitchRows})\r\n\r\n        //const sortedVids = this.sortVideos()\r\n        //const ytVidsRows = this.createYtRows(sortedVids)\r\n        //this.setState({createdYtSubVids: ytVidsRows})\r\n\r\n        //const sortedTweets = this.sortTweets()\r\n        //const tweetRows = this.createTweetRows(sortedTweets)\r\n        //this.setState({createdTweetRows: tweetRows})\r\n\r\n        //const sortedIg = await this.sortIg()\r\n        //const igRows = await this.createIgRows(sortedIg)\r\n        //this.setState({igRows: igRows})\r\n\r\n        this.setState({leaveButtonText: \"Enter\"})\r\n        //this.setState({doneLoading: true})\r\n    }\r\n\r\n\r\n\r\n    sortTweets(){\r\n        var totalTweetList = this.state.followsTweets\r\n\r\n        //sort tweets list by date\r\n        console.log(\"tweet sorting\")\r\n        console.log(totalTweetList)\r\n        for(var x=totalTweetList.length - 1; x>=0; x--){\r\n            for(var y=1; y<=x; y++){\r\n\r\n            var swap = false\r\n            var date1 = totalTweetList[y-1][2]\r\n            var date2 = totalTweetList[y][2]\r\n\r\n            if( parseInt(date1.substring(0,4)) > parseInt(date2.substring(0,4)) ){\r\n                swap = true\r\n            }\r\n            else if( parseInt(date1.substring(0,4)) < parseInt(date2.substring(0,4)) ){\r\n                swap = false\r\n            }\r\n            else if( parseInt(date1.substring(5,7)) > parseInt(date2.substring(5,7)) ){\r\n                swap = true\r\n            }\r\n            else if( parseInt(date1.substring(5,7)) < parseInt(date2.substring(5,7)) ){\r\n                swap = false\r\n            }\r\n            else if( parseInt(date1.substring(8,10)) > parseInt(date2.substring(8,10)) ){\r\n                swap = true\r\n            }\r\n            else if( parseInt(date1.substring(8,10)) < parseInt(date2.substring(8,10)) ){\r\n                swap = false\r\n            }\r\n            else if( parseInt(date1.substring(11,13)) > parseInt(date2.substring(11,13)) ){\r\n                swap = true\r\n            }\r\n            else if( parseInt(date1.substring(11,13)) < parseInt(date2.substring(11,13)) ){\r\n                swap = false\r\n            }\r\n            else if( parseInt(date1.substring(14,16)) > parseInt(date2.substring(14,16)) ){\r\n                swap = true\r\n            }\r\n            else if( parseInt(date1.substring(14,16)) < parseInt(date2.substring(14,16)) ){\r\n                swap = false\r\n            }\r\n            else if( parseInt(date1.substring(14,16)) > parseInt(date2.substring(14,16)) ){\r\n                swap = true\r\n            }\r\n            else if( parseInt(date1.substring(17,19)) < parseInt(date2.substring(17,19)) ){\r\n                swap = false\r\n            }\r\n\r\n            if(!swap){\r\n                var temp = totalTweetList[y-1]\r\n                totalTweetList[y-1] = totalTweetList[y]\r\n                totalTweetList[y] = temp\r\n            }\r\n            }\r\n        }\r\n        //console.log(totalYtList)\r\n        const tweetRows = this.createTweetRows(totalTweetList)\r\n        const tweetMyRows = this.createMyTweetRows()\r\n        //this.setState({createdTweetRows: tweetRows})\r\n        \r\n        return totalTweetList\r\n    }\r\n\r\n    createTweetRows(sortedTweets){\r\n        console.log(\"creating tweet rows\")\r\n        console.log(sortedTweets)\r\n        const tweetRows = []\r\n        for(var i=0; i<sortedTweets.length; i++){\r\n            //console.log(sortedVids[i][1])\r\n            const newTweet = <TwitterComponent twitterName={sortedTweets[i][0]} postNum={sortedTweets[i][1]} myUID={this.state.uid}/>\r\n            tweetRows.push(newTweet)\r\n        }\r\n        this.setState({createdTweetRows: tweetRows})\r\n        this.combineRows()\r\n        return tweetRows\r\n    }\r\n\r\n    createMyTweetRows(){\r\n        console.log(\"creating tweet rows\")\r\n        var sortedTweets = this.state.myTweets\r\n        const tweetRows = []\r\n        for(var i=0; i<sortedTweets.length; i++){\r\n            //console.log(sortedVids[i][1])\r\n            const newTweet = <TwitterComponent twitterName={sortedTweets[i][0]} postNum={sortedTweets[i][1]} myUID={this.state.uid}/>\r\n            tweetRows.push(newTweet)\r\n        }\r\n        this.setState({createdMyTweetRows: tweetRows})\r\n        return tweetRows\r\n    }\r\n\r\n    sortIg(){\r\n        console.log(this.state.followsIgPosts)\r\n        var totalIgList = this.state.followsIgPosts\r\n\r\n        //sort tweets list by date\r\n        console.log(\"ig sorting\")\r\n        for(var x=totalIgList.length - 1; x>=0; x--){\r\n            for(var y=1; y<=x; y++){\r\n\r\n            var swap = false\r\n            var date1 = totalIgList[y-1][3]\r\n            var date2 = totalIgList[y][3]\r\n\r\n            if( parseInt(date1.substring(0,4)) > parseInt(date2.substring(0,4)) ){\r\n                swap = true\r\n            }\r\n            else if( parseInt(date1.substring(0,4)) < parseInt(date2.substring(0,4)) ){\r\n                swap = false\r\n            }\r\n            else if( parseInt(date1.substring(5,7)) > parseInt(date2.substring(5,7)) ){\r\n                swap = true\r\n            }\r\n            else if( parseInt(date1.substring(5,7)) < parseInt(date2.substring(5,7)) ){\r\n                swap = false\r\n            }\r\n            else if( parseInt(date1.substring(8,10)) > parseInt(date2.substring(8,10)) ){\r\n                swap = true\r\n            }\r\n            else if( parseInt(date1.substring(8,10)) < parseInt(date2.substring(8,10)) ){\r\n                swap = false\r\n            }\r\n            else if( parseInt(date1.substring(11,13)) > parseInt(date2.substring(11,13)) ){\r\n                swap = true\r\n            }\r\n            else if( parseInt(date1.substring(11,13)) < parseInt(date2.substring(11,13)) ){\r\n                swap = false\r\n            }\r\n            else if( parseInt(date1.substring(14,16)) > parseInt(date2.substring(14,16)) ){\r\n                swap = true\r\n            }\r\n            else if( parseInt(date1.substring(14,16)) < parseInt(date2.substring(14,16)) ){\r\n                swap = false\r\n            }\r\n            else if( parseInt(date1.substring(14,16)) > parseInt(date2.substring(14,16)) ){\r\n                swap = true\r\n            }\r\n            else if( parseInt(date1.substring(17,19)) < parseInt(date2.substring(17,19)) ){\r\n                swap = false\r\n            }\r\n\r\n            if(!swap){\r\n                var temp = totalIgList[y-1]\r\n                totalIgList[y-1] = totalIgList[y]\r\n                totalIgList[y] = temp\r\n            }\r\n            }\r\n        }\r\n        //console.log(totalYtList)\r\n        const igRows = this.createIgRows(totalIgList)\r\n        const igMyRows = this.createMyIgRows()\r\n        return totalIgList\r\n    }\r\n\r\n    createIgRows(sortedIg2){\r\n        console.log(\"creating ig rows\")\r\n        var sortedIg = sortedIg2\r\n        var igRows = []\r\n        for(var i=0; i<sortedIg.length; i++){\r\n            //console.log(sortedVids[i][1])\r\n            const newIg = <InstagramComponent postID={sortedIg[i][0]} name={sortedIg[i][2]} token={this.state.igToken} myUID={this.state.uid} igID={sortedIg[i][4]} mediaUrl={sortedIg[i][5]}/>   \r\n            igRows.push(newIg)\r\n        }\r\n        this.setState({createdIgRows: igRows})\r\n        return igRows\r\n    }\r\n\r\n    createMyIgRows(){\r\n        console.log(\"creating my ig rows\")\r\n        var sortedIg = this.state.myIgPosts\r\n        var igRows = []\r\n        for(var i=0; i<sortedIg.length; i++){\r\n            //console.log(sortedVids[i][1])\r\n            const newIg = <InstagramComponent postID={sortedIg[i][0]} name={sortedIg[i][2]} token={this.state.igToken} myUID={this.state.uid} igID={sortedIg[i][3]} mediaUrl={sortedIg[i][4]}/>   \r\n            igRows.push(newIg)\r\n        }\r\n        this.setState({createdMyIgRows: igRows})\r\n        return igRows\r\n    }\r\n\r\n    sortVideos(){\r\n        var totalYtList = this.state.subsVids\r\n\r\n        //sort ytVideos list by date\r\n        console.log(\"youtube sorting\")\r\n        //console.log(totalYtList)\r\n        for(var x=totalYtList.length - 1; x>=0; x--){\r\n            for(var y=1; y<=x; y++){\r\n\r\n            var swap = false\r\n            var date1 = totalYtList[y-1][1]\r\n            var date2 = totalYtList[y][1]\r\n\r\n            if( parseInt(date1.substring(0,4)) > parseInt(date2.substring(0,4)) ){\r\n                swap = true\r\n            }\r\n            else if( parseInt(date1.substring(0,4)) < parseInt(date2.substring(0,4)) ){\r\n                swap = false\r\n            }\r\n            else if( parseInt(date1.substring(5,7)) > parseInt(date2.substring(5,7)) ){\r\n                swap = true\r\n            }\r\n            else if( parseInt(date1.substring(5,7)) < parseInt(date2.substring(5,7)) ){\r\n                swap = false\r\n            }\r\n            else if( parseInt(date1.substring(8,10)) > parseInt(date2.substring(8,10)) ){\r\n                swap = true\r\n            }\r\n            else if( parseInt(date1.substring(8,10)) < parseInt(date2.substring(8,10)) ){\r\n                swap = false\r\n            }\r\n            else if( parseInt(date1.substring(11,13)) > parseInt(date2.substring(11,13)) ){\r\n                swap = true\r\n            }\r\n            else if( parseInt(date1.substring(11,13)) < parseInt(date2.substring(11,13)) ){\r\n                swap = false\r\n            }\r\n            else if( parseInt(date1.substring(14,16)) > parseInt(date2.substring(14,16)) ){\r\n                swap = true\r\n            }\r\n            else if( parseInt(date1.substring(14,16)) < parseInt(date2.substring(14,16)) ){\r\n                swap = false\r\n            }\r\n            else if( parseInt(date1.substring(14,16)) > parseInt(date2.substring(14,16)) ){\r\n                swap = true\r\n            }\r\n            else if( parseInt(date1.substring(17,19)) < parseInt(date2.substring(17,19)) ){\r\n                swap = false\r\n            }\r\n\r\n            if(!swap){\r\n                var temp = totalYtList[y-1]\r\n                totalYtList[y-1] = totalYtList[y]\r\n                totalYtList[y] = temp\r\n            }\r\n            }\r\n        }\r\n        console.log(totalYtList)\r\n        const ytVidsRows = this.createYtRows(totalYtList)\r\n        const ytMyVidsRows = this.createMyYtRows()\r\n        //this.setState({createdYtSubVids: ytVidsRows})\r\n        return totalYtList\r\n    }\r\n\r\n    createYtRows(sortedVids2){\r\n        var ytVidRows = []\r\n        var sortedVids = sortedVids2\r\n        //for(var i=0; i<sortedVids.length; i++)\r\n        for(var i=0; i<sortedVids.length; i++){\r\n            //console.log(sortedVids[i][1])\r\n            const newVid = <YoutubeComponent key={sortedVids[i][0][0]} date={sortedVids[i][1]} videoId={sortedVids[i][0][1]} thumbnailUrl={sortedVids[i][0][2]} vidTitle={sortedVids[i][0][3]} channelName={sortedVids[i][0][4]} profilePic={sortedVids[i][0][5]} userName={sortedVids[i][0][6]} bio={sortedVids[i][0][7]} description={sortedVids[i][0][8]} authToken={sortedVids[i][0][9]} myUID={this.state.uid}/>\r\n            ytVidRows.push(newVid)\r\n        }\r\n        //this.setState({ytSubVids: ytVidRows})\r\n        this.setState({createdYtSubVids: ytVidRows})\r\n        this.loadTwitter()\r\n        return ytVidRows\r\n    }\r\n\r\n    createMyYtRows(){\r\n        var ytVidRows = []\r\n        var myVids = this.state.myYTvids\r\n        //for(var i=0; i<sortedVids.length; i++)\r\n        for(var i=0; i<myVids.length; i++){\r\n            //console.log(sortedVids[i][1])\r\n            const newVid = <YoutubeComponent key={myVids[i][0]} date={myVids[i][10]} videoId={myVids[i][1]} thumbnailUrl={myVids[i][2]} vidTitle={myVids[i][3]} channelName={myVids[i][4]} profilePic={myVids[i][5]} userName={myVids[i][6]} bio={myVids[i][7]} description={myVids[i][8]} authToken={myVids[i][9]}  myUID={this.state.uid}/>\r\n            ytVidRows.push(newVid)\r\n        }\r\n        //this.setState({ytSubVids: ytVidRows})\r\n        this.setState({createdMyYtSubVids: ytVidRows})\r\n        return ytVidRows\r\n    }\r\n\r\n    createMyTwitchRows(){\r\n        var twitchRows = []\r\n        var liveStreams = this.state.myTwitchStream\r\n        \r\n        const twitchRow = <TwitchComponent key={liveStreams[0]} userName={liveStreams[1]} streamTitle={liveStreams[2]} twitchAuth={liveStreams[3]} myName={liveStreams[4]} thumbnail={liveStreams[5]} profilePic={liveStreams[6]}  myUID={this.state.uid}/>\r\n        twitchRows.push(twitchRow)\r\n        //this.setState({twitchStreams: twitchRows})\r\n        this.setState({createdMyTwitchStreams: twitchRows})\r\n        return twitchRows\r\n    }\r\n\r\n    createTwitchRows(){\r\n        var twitchRows = []\r\n        var liveStreams = this.state.followsTwitchStreams\r\n        for(var i=0; i<liveStreams.length; i++){ //liveStreams.length\r\n            //console.log(liveStreams[i].user_name)\r\n            const twitchRow = <TwitchComponent key={liveStreams[i][0]} userName={liveStreams[i][1]} streamTitle={liveStreams[i][2]} twitchAuth={liveStreams[i][3]} myName={liveStreams[i][4]} thumbnail={liveStreams[i][5]} profilePic={liveStreams[i][6]} myUID={this.state.uid}/>\r\n            //const twitchRow = [liveStreams[i].user_name, liveStreams[i].user_name, liveStreams[i].title, this.state.twitchAuthToken, this.state.twitchName]\r\n            twitchRows.push(twitchRow)\r\n        }\r\n        //this.setState({twitchStreams: twitchRows})\r\n        this.setState({createdTwitchStreams: twitchRows})\r\n        return twitchRows\r\n    }\r\n\r\n    combineRows(){\r\n        var twitchStreams = this.state.createdTwitchStreams\r\n        var ytVids = this.state.createdYtSubVids\r\n        var tweets = this.state.createdTweetRows\r\n        var igposts = this.state.createdIgRows\r\n        var num = 0\r\n        var combinedPosts = []\r\n        while(num < twitchStreams.length || num < ytVids.length || num < tweets.length || num < igposts.length){\r\n            if(num < twitchStreams.length){\r\n                combinedPosts.push(twitchStreams[num])\r\n            }\r\n            if(num < ytVids.length){\r\n                combinedPosts.push(ytVids[num])\r\n            }\r\n            if(num < tweets.length){\r\n                combinedPosts.push(tweets[num])\r\n            }\r\n            if(num < igposts.length){\r\n                combinedPosts.push(igposts[num])\r\n            }\r\n            num = num + 1\r\n        }\r\n        this.setState({combinedPosts: combinedPosts})\r\n        this.setState({doneLoading: true})\r\n    }\r\n\r\n    goToFeed(){\r\n        /*\r\n        this.props.history.push(\"/FeedScreen\", {\r\n            testProp2: \"testing 1234\",\r\n            followsTwitchStreams: this.state.followsTwitchStreams,\r\n            subsVids: this.state.subsVids,\r\n            myTwitchStream: this.state.myTwitchStream,\r\n            myYTvids: this.state.myYTvids,\r\n            myIgPosts: this.state.myIgPosts,\r\n            myTweets: this.state.myTweets,\r\n            followsTweets: this.state.followsTweets,\r\n            followsIgPosts: this.state.followsIgPosts\r\n        });\r\n        */\r\n       \r\n        this.props.history.push({ pathname: \"/FeedScreen\", state: {\r\n            myUID: this.state.uid,\r\n            testProp2: \"testing 1234\",\r\n            followsTwitchStreams: this.state.followsTwitchStreams,\r\n            subsVids: this.state.subsVids,\r\n            myTwitchStream: this.state.myTwitchStream,\r\n            myYTvids: this.state.myYTvids,\r\n            myIgPosts: this.state.myIgPosts,\r\n            myTweets: this.state.myTweets,\r\n            followsTweets: this.state.followsTweets,\r\n            followsIgPosts: this.state.followsIgPosts,\r\n\r\n            createdTweetRows: this.state.createdTweetRows,\r\n            createdIgRows: this.state.createdIgRows,\r\n            createdTwitchStreams: this.state.createdTwitchStreams,\r\n            createdYtSubVids: this.state.createdYtSubVids,\r\n\r\n            combinedPosts: this.state.combinedPosts,\r\n\r\n            createdMyTweetRows: this.state.createdMyTweetRows,\r\n            createdMyIgRows: this.state.createdMyIgRows,\r\n            createdMyTwitchStreams: this.state.createdMyTwitchStreams,\r\n            createdMyYtSubVids: this.state.createdMyYtSubVids\r\n        }});\r\n        \r\n    }\r\n\r\n    render(){\r\n\r\n        return(\r\n            <div style={rootStyle} className=\"authyoutube-screen\" id=\"AuthYouTube\">\r\n\r\n                <Container style={mainContainer}>\r\n                    <Row style={{display: 'flex', justifyContent: 'center'}}>\r\n                        <h2 style={{color: '#e8e6e3'}} className=\"display-1 font-weight-bolder\">Wait for button to say \"Enter\"</h2>\r\n                    </Row>\r\n                    {/*\r\n                    <Row style={{display: 'flex', justifyContent: 'center'}}>\r\n                        <Button onClick={this.loadTwitch.bind(this)} style={button}><h4 style={textStyle}>Load Twitch</h4></Button>\r\n                    </Row>\r\n                    <Row style={{display: 'flex', justifyContent: 'center'}}>\r\n                        <Button onClick={this.loadYt.bind(this)} style={button}><h4 style={textStyle}>Load YouTube</h4></Button>\r\n                    </Row>\r\n                    <Row style={{display: 'flex', justifyContent: 'center'}}>\r\n                        <Button onClick={this.loadIg.bind(this)} style={button}><h4 style={textStyle}>Load Ig</h4></Button>\r\n                    </Row>\r\n                    <Row style={{display: 'flex', justifyContent: 'center'}}>\r\n                        <Button onClick={this.loadTwitter.bind(this)} style={button}><h4 style={textStyle}>Load Twitter</h4></Button>\r\n                    </Row>\r\n                    */}\r\n                    <Row style={{display: 'flex', justifyContent: 'center'}}>\r\n                        <Button onClick={this.state.doneLoading ? this.goToFeed.bind(this) : null} style={button}><h4 style={textStyle}>{this.state.leaveButtonText}</h4></Button>\r\n                    </Row>\r\n                </Container>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst rootStyle = {\r\n    height: \"100vh\",\r\n    backgroundColor: \"#25282a\"\r\n    //backgroundColor: \"#ACACAC\"\r\n}\r\nconst mainContainer = {\r\n    //backgroundColor: \"#ACACAC\",\r\n    backgroundColor: \"#25282a\",\r\n    height: \"100%\",\r\n    fluid: true\r\n}\r\nconst button = {\r\n    shadowOpacity: 0.3,\r\n    shadowRadius: 3,\r\n    shadowOffset: {\r\n    height: 0,\r\n    width: 0\r\n    },\r\n    elevation: 1,\r\n    marginTop: '5%',\r\n    backgroundColor: \"#401058\",\r\n    borderRadius: 5,\r\n    borderColor: \"#393939\",\r\n    borderWidth: 1,\r\n    width: 120\r\n}\r\nconst textStyle = {\r\n    color: \"white\"\r\n}\r\n\r\nexport default withRouter(LoadSocials);","C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\services\\firebase.js",[],"C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\components\\YoutubeComponent.js",["268","269","270","271","272","273"],"import React from 'react';\r\n\r\nimport firebase from \"firebase\";\r\nimport 'firebase/database';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\nimport Form from 'react-bootstrap/Form'\r\n\r\nimport ThumbUpAltIcon from '@material-ui/icons/ThumbUpAlt';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\n\r\nimport YTLogo from '../pictureIcons/youtube-image.png'\r\n\r\nimport DefaultPFP from '../pictureIcons/defaultpfp.jpg'\r\n\r\nimport YouTube from 'react-youtube-embed'\r\n\r\nimport { List, Button } from 'semantic-ui-react'\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\nimport Modal from '@material-ui/core/Modal';\r\nimport FollowOverlay from \"../components/FollowOverlay\";\r\n\r\nclass YoutubeComponent extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        //console.log(\"constructor\")\r\n\r\n        this.state = {\r\n            //thumbnailUrl: thumbURL,\r\n            //ytRow: newRow,\r\n            uid: this.props.myUID,\r\n            trimmedTitle: '',\r\n            liked: false,\r\n            commentValue: '',\r\n            hasStopped: false,\r\n            liked: false,\r\n            likeColor: \"white\",\r\n\r\n            followClicked: false,\r\n            userCheck: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.trimNames()\r\n        this.checkingUser()\r\n    }\r\n\r\n    checkingUser(){\r\n        console.log(\"checking if user is on platform\")\r\n        const collPath = '/youtubeConnections'\r\n        const userName = this.props.userName\r\n        firebase.database().ref(collPath).once('value').then((snapshot) => {\r\n            console.log(\"checking user\")\r\n            const exists = snapshot.child(userName).val()\r\n            if(exists){\r\n                console.log(exists.uid)\r\n                this.setState({userCheck: exists.uid})\r\n            } \r\n            else{\r\n                this.setState({userCheck: 'NA'})\r\n            }\r\n        })\r\n    }\r\n\r\n    trimNames(){\r\n        var forTitle = 35 - 3 - this.props.channelName.length\r\n\r\n        var title = ''\r\n        if(this.props.channelName.length + this.props.vidTitle.length <= 35){\r\n            title = this.props.channelName + ' - ' + this.props.vidTitle\r\n        }\r\n        else{\r\n            title = this.props.channelName + ' - ' + this.props.vidTitle.substr(0,forTitle) + '...'\r\n        }\r\n        \r\n        this.setState({trimmedTitle: title})\r\n    }\r\n\r\n    sendComment(){\r\n        console.log(\"sending comment\")\r\n\r\n        const commentText = this.state.commentValue + \"\\n\\n\" + \"via The Social Medium\"\r\n\r\n        fetch(\"https://youtube.googleapis.com/youtube/v3/commentThreads?part=snippet,id&key=AIzaSyCIeFNZorTXAH5MSFxIAaILwRTNMfEr3fY\", {\r\n                body: \"{\\\"snippet\\\":{\\\"channelId\\\":\\\"\" + this.props.userName + \"\\\",\\\"videoId\\\":\\\"\" + this.props.videoId + \"\\\",\\\"topLevelComment\\\":{\\\"snippet\\\":{\\\"textOriginal\\\":\\\"\" + commentText + \"\\\"}}}}\",\r\n                headers: {\r\n                    Accept: \"application/json\",\r\n                    Authorization: \"Bearer \" + this.props.authToken,\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                method: \"POST\"\r\n            })\r\n            .then(response => response.json())\r\n            .then((responseJson)=> {\r\n                console.log('sending comment')\r\n                console.log(responseJson)\r\n\r\n            })\r\n            .catch(error=>console.log(error))\r\n\r\n        //this.setState({commentValue: \"\"})\r\n    }\r\n\r\n    clickLike(){\r\n        console.log(\"like clicked\")\r\n        console.log(this.props.authToken)\r\n\r\n        fetch(\"https://youtube.googleapis.com/youtube/v3/videos/rate?id=\" + this.props.videoId + \"&rating=like&key=AIzaSyCIeFNZorTXAH5MSFxIAaILwRTNMfEr3fY\", {\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                Authorization: \"Bearer \" + this.props.authToken,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            method: \"POST\"\r\n        })\r\n        .then(response => response.text())\r\n        .then((responseJson)=> {\r\n            console.log('liking the video')\r\n            console.log(responseJson)\r\n\r\n        })\r\n        .catch(error=>console.log(error))\r\n\r\n        this.setState({likeColor: \"#401058\"})\r\n    }\r\n\r\n    clickFollow(){\r\n        this.setState({followClicked: !this.state.followClicked})\r\n    }\r\n\r\n    render(){\r\n        return(\r\n\r\n            <Container style={youtubeComponent}>\r\n            <Row style={{display: 'flex', justifyContent: 'center'}}>\r\n                <Col style={{display: 'flex', flex: 1}}>\r\n                    <Avatar style={{width: 50, height: 50, marginLeft: 10}} src={this.props.profilePic} />\r\n                </Col>\r\n                <Col style={{display: 'flex', flex: 5, flexDirection: \"column\", justifyContent: \"flex-start\", alignSelf: \"start\"}}>\r\n                    <Row style={{display: 'flex', flex: 1, justifyContent: \"flex-start\", alignSelf: \"start\"}}>\r\n                        <Button onClick={this.clickFollow.bind(this)} style={button}>Follow</Button>\r\n                        <Modal\r\n                            open={this.state.followClicked}\r\n                            onClose={this.clickFollow.bind(this)}\r\n                            aria-labelledby=\"simple-modal-title\"\r\n                            aria-describedby=\"simple-modal-description\"\r\n                        >\r\n                                    \r\n                            <FollowOverlay platform=\"youtube\" userName={this.props.userName} channelName={this.props.channelName}  myUID={this.state.uid}  bio={this.props.bio} description={this.props.description} userCheck={this.state.userCheck}/>\r\n                                    \r\n                        </Modal>\r\n                    </Row>\r\n                    <Row style={{display: 'flex', flex: 1, justifyContent: \"flex-start\",  alignSelf: \"start\", height: 0}}>\r\n                        <h2 style={{ color: '#e8e6e3' }} className=\"display-1 font-weight-bolder\">{this.state.trimmedTitle}</h2>\r\n                    </Row>\r\n                    <Row style={{display: 'flex', flex: 1, justifyContent: \"flex-start\",  alignSelf: \"start\", height: 0, marginTop: 0}}>\r\n                        <h4 style={{ color: '#e8e6e3' }} className=\"display-1 font-weight-bolder\">{this.props.date.substr(0,10)}</h4> \r\n                    </Row>\r\n                </Col>\r\n                <Col style={{display: 'flex', flex: 1, justifyContent: 'flex-end', marginRight: 10}}>\r\n                    <Avatar style={{width: 50, height: 50}} src={YTLogo} />\r\n                </Col>\r\n            </Row>\r\n            <Row style={{display: 'flex', justifyContent: 'center'}}>\r\n                <YouTube id={this.props.videoId} />\r\n            </Row>\r\n            <Row style={{display: 'flex', justifyContent: 'center'}}>\r\n                <IconButton onClick={this.clickLike.bind(this)}aria-label=\"like\" color=\"primary\">\r\n                    <ThumbUpAltIcon style={{color: this.state.likeColor, maxWidth: '40px', maxHeight: '40px', minWidth: '40px', minHeight: '40px'}} />\r\n                </IconButton>\r\n                <Form.Group controlId=\"formBasicPassword\">\r\n                    <Form.Control style={{marginTop: 10, maxWidth: '535px', maxHeight: '40px', minWidth: '535px', minHeight: '40px'}} type=\"comment\" placeholder=\"Comment...\" onChange={e => this.setState({ commentValue: e.target.value })} />\r\n                </Form.Group>\r\n                <IconButton onClick={this.sendComment.bind(this)} aria-label=\"like\" color=\"primary\">\r\n                    <SendIcon style={{color: 'white', maxWidth: '40px', maxHeight: '40px', minWidth: '40px', minHeight: '40px'}} />\r\n                </IconButton>\r\n            </Row>\r\n        </Container>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst youtubeComponent = {\r\n    //backgroundColor: \"#ACACAC\",\r\n    backgroundColor: \"#474d50\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    borderRadius: 10,\r\n    borderWidth: 1,\r\n    borderColor: '#fff',\r\n    fluid: true,\r\n    flex: 1,\r\n    marginLeft: 50,\r\n    marginRight: 50,\r\n    paddingTop: 20,\r\n    paddingBottom: 20,\r\n    marginBottom: 20,\r\n    alightSelf: \"center\",\r\n    width: 800\r\n}\r\n\r\nconst button = {\r\n    shadowOpacity: 0.3,\r\n    shadowRadius: 3,\r\n    shadowOffset: {\r\n    height: 0,\r\n    width: 0\r\n    },\r\n    elevation: 1,\r\n    marginTop: '5%',\r\n    backgroundColor: \"#401058\",\r\n    borderRadius: 5,\r\n    borderColor: \"#393939\",\r\n    borderWidth: 1,\r\n    width: 70,\r\n    height: 30,\r\n    color: \"white\",\r\n    justifyContent: \"left\"\r\n}\r\n\r\nexport default YoutubeComponent;","C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\components\\TwitterComponent.js",["274","275","276","277","278"],"import React from 'react';\r\n\r\nimport firebase from \"firebase\";\r\nimport 'firebase/database';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\nimport Form from 'react-bootstrap/Form'\r\n\r\nimport RepeatIcon from '@material-ui/icons/Repeat';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\n\r\nimport TwitterLogo from '../pictureIcons/twitter-image.png'\r\n\r\nimport DefaultPFP from '../pictureIcons/defaultpfp.jpg'\r\n\r\nimport { TwitterTimelineEmbed, TwitterShareButton, TwitterTweetEmbed } from 'react-twitter-embed';\r\n\r\nimport { List, Button } from 'semantic-ui-react'\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\nimport Modal from '@material-ui/core/Modal';\r\nimport FollowOverlay from \"../components/FollowOverlay\";\r\n\r\nclass TwitterComponent extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        //console.log(\"constructor\")\r\n\r\n        this.state = {\r\n            //thumbnailUrl: thumbURL,\r\n            //ytRow: newRow,\r\n            uid: this.props.myUID,\r\n            trimmedTitle: '',\r\n            liked: false,\r\n            commentValue: '',\r\n            hasStopped: false,\r\n\r\n            twitterRe: false,\r\n\r\n            followClicked: false,\r\n\r\n            userCheck: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.checkingUser()\r\n    }\r\n\r\n    checkingUser(){\r\n        console.log(\"checking if user is on platform\")\r\n        const collPath = '/twitterConnections'\r\n        const userName = this.props.twitterName\r\n        firebase.database().ref(collPath).once('value').then((snapshot) => {\r\n            console.log(\"checking user\")\r\n            const exists = snapshot.child(userName).val()\r\n            if(exists){\r\n                console.log(exists.uid)\r\n                this.setState({userCheck: exists.uid})\r\n            } \r\n            else{\r\n                this.setState({userCheck: 'NA'})\r\n            }\r\n        })\r\n    }\r\n\r\n    clickFollow(){\r\n        this.setState({followClicked: !this.state.followClicked})\r\n    }\r\n\r\n    redirectTwitter(){\r\n        this.setState({twitterRe: !this.state.twitterRe}) \r\n        window.open('https://twitter.com/' + this.props.twitterName + '/status/' + this.props.postNum, \"_blank\")\r\n    }\r\n\r\n    redirectTwitterOpen(){\r\n        this.setState({twitterRe: !this.state.twitterRe})\r\n    }\r\n\r\n    render(){\r\n        return(\r\n\r\n            <Container style={tweetComponent}>\r\n\r\n                        <Row style={{display: 'flex', flexDirection: 'row', flex: 1, justifyContent: \"center\", alignSelf: \"center\"}}>\r\n                            <Modal\r\n                                open={this.state.twitterRe}\r\n                                onClose={this.redirectTwitterOpen.bind(this)}\r\n                                aria-labelledby=\"simple-modal-title\"\r\n                                aria-describedby=\"simple-modal-description\"\r\n                            >\r\n                            <div style={rootStyle} className=\"redirect-modal\" id=\"RedirectModal\">           \r\n                            <Container style={redirectStyle}>          \r\n                                <Row style={{display: 'flex', flex: 1, justifyContent: \"center\", alignSelf: \"center\", height: '100%'}}> \r\n                                <h2 style={{ color: '#e8e6e3' }} style={{justifyContent: \"center\", marginTop: 30}}>Must redirect to twitter to perform action...</h2>\r\n                                <Button onClick={this.redirectTwitter.bind(this)} style={button2}>Redirect</Button>\r\n                                </Row> \r\n                            </Container>\r\n                            </div>  \r\n                            </Modal>\r\n                        </Row>\r\n\r\n                <Row style={{display: 'flex', justifyContent: 'center', height: 75}}>\r\n                    <Col style={{display: 'flex', flex: 1}}>\r\n                        <Avatar style={{width: 50, height: 50, marginLeft: 10}} src={DefaultPFP} />\r\n                    </Col>\r\n                    <Col style={{display: 'flex', flex: 5, flexDirection: \"column\", justifyContent: \"flex-start\", alignSelf: \"start\"}}>\r\n                        <Row style={{display: 'flex', flex: 1, justifyContent: \"flex-start\", alignSelf: \"start\"}}>\r\n                            <Button onClick={this.clickFollow.bind(this)} style={button}>Follow</Button>\r\n                            <Modal\r\n                                    open={this.state.followClicked}\r\n                                    onClose={this.clickFollow.bind(this)}\r\n                                    aria-labelledby=\"simple-modal-title\"\r\n                                    aria-describedby=\"simple-modal-description\"\r\n                                >\r\n                                    \r\n                                    <FollowOverlay platform=\"twitter\" userName={this.props.twitterName}  myUID={this.state.uid} userCheck={this.state.userCheck}/>\r\n                                    \r\n                            </Modal>\r\n                        </Row>\r\n                        <Row style={{display: 'flex', flex: 1, justifyContent: \"flex-start\",  alignSelf: \"start\"}}>\r\n                            <h2 style={{ color: '#e8e6e3' }} className=\"display-1 font-weight-bolder\">{this.props.twitterName}</h2> \r\n                        </Row>\r\n                    </Col>\r\n                    <Col style={{display: 'flex', flex: 1, justifyContent: 'flex-end', marginRight: 10}}>\r\n                        <Avatar style={{width: 50, height: 50}} src={TwitterLogo} />\r\n                    </Col>\r\n                </Row>\r\n                <Row style={{marginLeft: 125}}>\r\n                        <TwitterTweetEmbed\r\n                            tweetId={this.props.postNum}\r\n                            options={{height: 800, width: '100vh'}}\r\n                        />\r\n                </Row>\r\n                <Row style={{display: 'flex', justifyContent: 'flex-start'}}>\r\n                    <IconButton onClick={this.redirectTwitterOpen.bind(this)}aria-label=\"like\" color=\"primary\">\r\n                        <FavoriteIcon style={{color: 'white', maxWidth: '40px', maxHeight: '40px', minWidth: '40px', minHeight: '40px'}} />\r\n                    </IconButton>\r\n                    <IconButton onClick={this.redirectTwitterOpen.bind(this)} aria-label=\"like\" color=\"primary\">\r\n                        <RepeatIcon style={{color: 'white', maxWidth: '40px', maxHeight: '40px', minWidth: '40px', minHeight: '40px'}} />\r\n                    </IconButton>\r\n                    <Form.Group controlId=\"formBasicPassword\">\r\n                        <Form.Control style={{marginTop: 10, maxWidth: '535px', maxHeight: '40px', minWidth: '535px', minHeight: '40px'}} type=\"comment\" placeholder=\"Comment...\" onChange={e => this.setState({ twitterComment: e.target.value })} />\r\n                    </Form.Group>\r\n                    <IconButton onClick={this.redirectTwitterOpen.bind(this)} aria-label=\"like\" color=\"primary\">\r\n                        <SendIcon style={{color: 'white', maxWidth: '40px', maxHeight: '40px', minWidth: '40px', minHeight: '40px'}} />\r\n                    </IconButton>\r\n                </Row>\r\n            </Container>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst rootStyle = {\r\n    height: \"100hv\",\r\n    backgroundColor: \"#313131\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    paddingTop: 30,\r\n    paddingBottom: 30,\r\n    display: 'flex',\r\n    flexDirection: \"column\"\r\n}\r\n\r\nconst tweetComponent = {\r\n    backgroundColor: \"#474d50\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    borderRadius: 10,\r\n    borderWidth: 1,\r\n    borderColor: '#fff',\r\n    fluid: true,\r\n    flex: 1,\r\n    marginLeft: 50,\r\n    marginRight: 50,\r\n    paddingTop: 20,\r\n    paddingBottom: 20,\r\n    marginBottom: 20,\r\n    alightSelf: \"center\",\r\n    width: 800\r\n}\r\n\r\nconst button = {\r\n    shadowOpacity: 0.3,\r\n    shadowRadius: 3,\r\n    shadowOffset: {\r\n    height: 0,\r\n    width: 0\r\n    },\r\n    elevation: 1,\r\n    marginTop: '5%',\r\n    backgroundColor: \"#401058\",\r\n    borderRadius: 5,\r\n    borderColor: \"#393939\",\r\n    borderWidth: 1,\r\n    width: 70,\r\n    height: 30,\r\n    color: \"white\",\r\n    justifyContent: \"left\"\r\n}\r\n\r\nconst redirectStyle = {\r\n    backgroundColor: \"#ACACAC\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    borderRadius: 10,\r\n    borderWidth: 1,\r\n    borderColor: '#fff',\r\n    fluid: true,\r\n    flex: 1,\r\n    display: 'flex',\r\n    flexDirection: \"column\",\r\n    //marginLeft: 95,\r\n    //marginRight: 50,\r\n    paddingTop: 20,\r\n    paddingBottom: 20,\r\n    marginBottom: 20,\r\n    alightSelf: \"center\",\r\n    width: 800\r\n}\r\n\r\nconst button2 = {\r\n    shadowOpacity: 0.3,\r\n    shadowRadius: 3,\r\n    shadowOffset: {\r\n    height: 0,\r\n    width: 0\r\n    },\r\n    elevation: 1,\r\n    marginTop: '5%',\r\n    backgroundColor: \"#401058\",\r\n    borderRadius: 5,\r\n    borderColor: \"#393939\",\r\n    borderWidth: 1,\r\n    width: 70,\r\n    height: 30,\r\n    color: \"white\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    marginLeft: 10,\r\n    marginBottom: 35\r\n}\r\n\r\nexport default TwitterComponent;","C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\components\\InstagramComponent.js",["279","280","281","282","283"],"import React from 'react';\r\n\r\nimport firebase from \"firebase\";\r\nimport 'firebase/database';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\nimport Form from 'react-bootstrap/Form'\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport ThumbUpAltIcon from '@material-ui/icons/ThumbUpAlt';\r\n\r\nimport IgLogo from '../pictureIcons/ig-image.png'\r\n\r\nimport DefaultPFP from '../pictureIcons/defaultpfp.jpg'\r\n\r\nimport { InstagramMedia, instagramMediaParser } from 'react-instagram-media'\r\nimport InstagramEmbed from 'react-instagram-embed';\r\n//import InstagramEmbed from 'react-social-embed'\r\n\r\nimport { List, Button } from 'semantic-ui-react'\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\nimport Modal from '@material-ui/core/Modal';\r\nimport FollowOverlay from \"../components/FollowOverlay\";\r\n\r\nimport ReactPlayer from 'react-player'\r\n\r\nclass InstagramComponent extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        //console.log(\"constructor\")\r\n\r\n\r\n        const igHtml = '<iframe src=\"http://instagram.com/p/' + this.props.postID + '/embed\" width=\"500\" height=\"600\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>'\r\n\r\n        const starter = <span style={{justifyContent: 'center'}} dangerouslySetInnerHTML={{__html: igHtml}} />\r\n\r\n        this.state = {\r\n            //thumbnailUrl: thumbURL,\r\n            //ytRow: newRow,\r\n            uid:  this.props.myUID,\r\n            trimmedTitle: '',\r\n            liked: false,\r\n            commentValue: '',\r\n            hasStopped: false,\r\n\r\n            followClicked: false,\r\n\r\n            igRe: false,\r\n\r\n            userCheck: '',\r\n\r\n            startRow: starter,\r\n\r\n            row: null\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.checkingUser()\r\n        this.checkType()\r\n    }\r\n\r\n    checkType(){\r\n        const mediaUrl = this.props.mediaUrl\r\n\r\n        var wasVideo = false\r\n        for(var i=0; i<mediaUrl.length; i++){\r\n            if(mediaUrl.substr(i, 4) == '.mp4'){\r\n                wasVideo = true\r\n            }\r\n        }\r\n\r\n        var mediaRow;\r\n        if(wasVideo){\r\n            mediaRow = <ReactPlayer controls={true} url={this.props.mediaUrl} />\r\n        }\r\n        else{\r\n            mediaRow = <Image src={this.props.mediaUrl} />\r\n        }\r\n\r\n        this.setState({row: mediaRow})\r\n    }\r\n\r\n    checkingUser(){\r\n        console.log(\"checking if user is on platform\")\r\n        const collPath = '/igConnections'\r\n        const userName = this.props.igID\r\n        firebase.database().ref(collPath).once('value').then((snapshot) => {\r\n            console.log(\"checking user\")\r\n            const exists = snapshot.child(userName).val()\r\n            if(exists){\r\n                console.log(exists.uid)\r\n                this.setState({userCheck: exists.uid})\r\n            } \r\n            else{\r\n                this.setState({userCheck: 'NA'})\r\n            }\r\n        })\r\n    }\r\n\r\n    clickFollow(){\r\n        this.setState({followClicked: !this.state.followClicked})\r\n    }\r\n\r\n    redirectIg(){\r\n        this.setState({igRe: !this.state.igRe})\r\n        window.open('https://www.instagram.com/p/' + this.props.postID + '/', \"_blank\")\r\n    }\r\n\r\n    redirectIgOpen(){\r\n        this.setState({igRe: !this.state.igRe})\r\n    }\r\n\r\n    render(){\r\n        //width=\"600\" height=\"600\"\r\n        //const igHtml = '<div style=\"width: 1000px; height: 1000px; overflow: hidden; justifyContent: center; marginLeft: 500\"><iframe width=\"600\" height=\"600\" style=\"border:none\" scrolling=\"no\" src=\"https://instagram.com/p/' + this.props.postID + '/embed\" frameborder=\"0\"></iframe></div>'\r\n        //const igHtml = '<iframe src=\"http://instagram.com/p/' + this.props.postID + '/embed\" width=\"500\" height=\"580\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>'\r\n        return(\r\n\r\n            <Container style={igComponent}>\r\n\r\n                        <Row style={{display: 'flex', flexDirection: 'row', flex: 1, justifyContent: \"center\", alignSelf: \"center\"}}>\r\n                            <Modal\r\n                                open={this.state.igRe}\r\n                                onClose={this.redirectIgOpen.bind(this)}\r\n                                aria-labelledby=\"simple-modal-title\"\r\n                                aria-describedby=\"simple-modal-description\"\r\n                            >\r\n                            <div style={rootStyle} className=\"redirect-modal\" id=\"RedirectModal\">\r\n                            <Container style={redirectStyle}>          \r\n                                <Row style={{display: 'flex', flex: 1, justifyContent: \"center\", alignSelf: \"center\", height: '100%'}}> \r\n                                <h2 style={{justifyContent: \"center\", marginTop: 30, color: '#e8e6e3'}}>Must redirect to instagram to perform action...</h2>\r\n                                <Button onClick={this.redirectIg.bind(this)} style={button2}>Redirect</Button>\r\n                                </Row> \r\n                            </Container>  \r\n                            </div>  \r\n                            </Modal>\r\n                        </Row>\r\n\r\n                    <Row style={{display: 'flex', justifyContent: 'center', height: 85}}>\r\n                        <Col style={{display: 'flex', flex: 1}}>\r\n                            <Avatar style={{width: 50, height: 50, marginLeft: 10}} src={DefaultPFP} />\r\n                        </Col>\r\n                        <Col style={{display: 'flex', flex: 5, flexDirection: \"column\", justifyContent: \"flex-start\", alignSelf: \"start\"}}>\r\n                            <Row style={{display: 'flex', flex: 1, justifyContent: \"flex-start\", alignSelf: \"start\"}}>\r\n                                <Button onClick={this.clickFollow.bind(this)} style={button}>Follow</Button>\r\n                                <Modal\r\n                                    open={this.state.followClicked}\r\n                                    onClose={this.clickFollow.bind(this)}\r\n                                    aria-labelledby=\"simple-modal-title\"\r\n                                    aria-describedby=\"simple-modal-description\"\r\n                                >\r\n                                    \r\n                                    <FollowOverlay platform=\"ig\" userName={this.state.userName}  myUID={this.state.uid} userCheck={this.state.userCheck}/>\r\n                                    \r\n                                </Modal>\r\n                            </Row>\r\n                            <Row style={{display: 'flex', flex: 1, justifyContent: \"flex-start\",  alignSelf: \"start\"}}>\r\n                                <h2 style={{ color: '#e8e6e3' }} className=\"display-1 font-weight-bolder\">{this.props.name}</h2> \r\n                            </Row>\r\n                        </Col>\r\n                        <Col style={{display: 'flex', flex: 1, justifyContent: 'flex-end', marginRight: 10}}>\r\n                            <Avatar style={{width: 50, height: 50}} src={IgLogo} />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row style={{display: 'flex', justifyContent: 'center'}}>\r\n\r\n                        {this.state.row}\r\n\r\n                        {/*<Image src={'https://scontent-dfw5-1.cdninstagram.com/v/t51.2885-15/e35/78787841_2493860204212163_1691682267844488816_n.jpg?_nc_ht=scontent-dfw5-1.cdninstagram.com&_nc_cat=111&_nc_ohc=hwH54Avq8dYAX-NHytn&tp=1&oh=a7371825187f81ab62a622e31cbb51db&oe=6003EA53'} />*/}\r\n                        \r\n                        {/*<ReactPlayer controls={true} url={this.props.mediaUrl} />*/}\r\n\r\n                        {/*<InstagramMedia\r\n                            uri={\"https://www.instagram.com/p/\" + this.props.postID + \"/\"}      \r\n                            renderItem={\r\n                                ({ display_url, video_url, type, caption }) => {\r\n                                if (type === 'video') {\r\n                                    return (\r\n                                    <video poster={display_url} controls>\r\n                                        <source src={video_url} type=\"video/mp4\" />\r\n                                    </video>\r\n                                    )\r\n                                }\r\n                                return (\r\n                                    <img\r\n                                    src={display_url}\r\n                                    alt={caption}\r\n                                    />\r\n                                )\r\n                                }\r\n                            }\r\n                            renderMediaList={children => (\r\n                                <div className=\"swiper\">\r\n                                {children}\r\n                                </div>\r\n                            )}\r\n                            renderError={() => (\r\n                                <div>Refresh page to view post...</div>\r\n                            )}\r\n                            renderLoading={() => (\r\n                                <div>Loading</div>\r\n                            )}\r\n                            />*/}\r\n                    </Row>\r\n                    <Row style={{display: 'flex', justifyContent: 'center'}}>\r\n                        <IconButton onClick={this.redirectIgOpen.bind(this)}aria-label=\"like\" color=\"primary\">\r\n                            <ThumbUpAltIcon style={{color: 'white', maxWidth: '40px', maxHeight: '40px', minWidth: '40px', minHeight: '40px'}} />\r\n                        </IconButton>\r\n                        <Form.Group controlId=\"formBasicPassword\">\r\n                            <Form.Control style={{marginTop: 10, maxWidth: '535px', maxHeight: '40px', minWidth: '535px', minHeight: '40px'}} type=\"comment\" placeholder=\"Comment...\" onChange={e => this.setState({ twitterComment: e.target.value })} />\r\n                        </Form.Group>\r\n                        <IconButton onClick={this.redirectIgOpen.bind(this)} aria-label=\"like\" color=\"primary\">\r\n                            <SendIcon style={{color: 'white', maxWidth: '40px', maxHeight: '40px', minWidth: '40px', minHeight: '40px'}} />\r\n                        </IconButton>\r\n                    </Row>\r\n                </Container>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst rootStyle = {\r\n    height: \"100hv\",\r\n    backgroundColor: \"#313131\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    paddingTop: 30,\r\n    paddingBottom: 30,\r\n    display: 'flex',\r\n    flexDirection: \"column\"\r\n}\r\n\r\nconst igComponent = {\r\n    backgroundColor: \"#474d50\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    borderRadius: 10,\r\n    borderWidth: 1,\r\n    borderColor: '#fff',\r\n    fluid: true,\r\n    flex: 1,\r\n    marginLeft: 50,\r\n    marginRight: 50,\r\n    paddingTop: 20,\r\n    paddingBottom: 20,\r\n    marginBottom: 20,\r\n    alightSelf: \"center\",\r\n    width: 800\r\n}\r\n\r\nconst button = {\r\n    shadowOpacity: 0.3,\r\n    shadowRadius: 3,\r\n    shadowOffset: {\r\n    height: 0,\r\n    width: 0\r\n    },\r\n    elevation: 1,\r\n    marginTop: '5%',\r\n    backgroundColor: \"#401058\",\r\n    borderRadius: 5,\r\n    borderColor: \"#393939\",\r\n    borderWidth: 1,\r\n    width: 70,\r\n    height: 30,\r\n    color: \"white\",\r\n    justifyContent: \"left\"\r\n}\r\n\r\nconst redirectStyle = {\r\n    backgroundColor: \"#ACACAC\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    borderRadius: 10,\r\n    borderWidth: 1,\r\n    borderColor: '#fff',\r\n    fluid: true,\r\n    flex: 1,\r\n    display: 'flex',\r\n    flexDirection: \"column\",\r\n    //marginLeft: 565,\r\n    //marginRight: 50,\r\n    paddingTop: 20,\r\n    paddingBottom: 20,\r\n    marginBottom: 20,\r\n    alightSelf: \"center\",\r\n    width: 800\r\n}\r\n\r\nconst button2 = {\r\n    shadowOpacity: 0.3,\r\n    shadowRadius: 3,\r\n    shadowOffset: {\r\n    height: 0,\r\n    width: 0\r\n    },\r\n    elevation: 1,\r\n    marginTop: '5%',\r\n    backgroundColor: \"#401058\",\r\n    borderRadius: 5,\r\n    borderColor: \"#393939\",\r\n    borderWidth: 1,\r\n    width: 70,\r\n    height: 30,\r\n    color: \"white\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    marginLeft: 10,\r\n    marginBottom: 35\r\n}\r\n\r\nexport default InstagramComponent;","C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\components\\FollowOverlay.js",["284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390","391","392","393"],"import React from 'react';\r\n\r\nimport firebase from \"firebase\";\r\nimport 'firebase/database';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\n\r\nimport Modal from '@material-ui/core/Modal';\r\n\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\n\r\nimport { TwitchEmbed, TwitchChat, TwitchClip, TwitchPlayer } from 'react-twitch-embed';\r\n\r\nimport DefaultPFP from '../pictureIcons/defaultpfp.jpg'\r\n\r\nimport TwitchLogo from '../pictureIcons/twitch-image.png'\r\nimport IgLogo from '../pictureIcons/ig-image.png'\r\nimport TwitterLogo from '../pictureIcons/twitter-image.png'\r\nimport YTLogo from '../pictureIcons/youtube-image.png'\r\nimport AllLogo from '../pictureIcons/allpic.jpg'\r\n\r\nimport { List, Button } from 'semantic-ui-react'\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\nclass FollowOverlay extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            uid: this.props.myUID,\r\n            //loggedUID: this.props.loggedUID,\r\n            userName: '',\r\n            modalVisible: false,\r\n            loadingModalVisible: false,\r\n            trimmedTitle: '',\r\n            platformLogo: TwitchLogo,\r\n            twitchName: 'NA',\r\n            twitchFollowed: false,\r\n            twitchFollowText: \"Follow\",\r\n            youtubeName: 'NA',\r\n            youtubeID: 'NA',\r\n            youtubeFollowed: false,\r\n            youtubeFollowText: \"Follow\",\r\n            twitterName: 'NA',\r\n            igName: 'NA',\r\n            twitterRedirectModalVisible: false,\r\n            igRedirectModalVisible: false,\r\n\r\n            twitchFollows: [],\r\n            twitchLoading: false,\r\n            twitchColor: \"#401058\",\r\n            twitchFollowText: \"Follow\",\r\n\r\n            ytFollows: [],\r\n            youtubeColor: \"#401058\",\r\n            youtubeFollowText: \"Follow\",\r\n\r\n            userCheck: this.props.userCheck,\r\n\r\n            displayName: 'This user is not on the platform...',\r\n\r\n            onApp: false,\r\n            isFollowed: false,\r\n            isFollowed: false,\r\n            followText: \"Follow\",\r\n            followColor: \"#401058\",\r\n\r\n            igRe: false,\r\n            twitterRe: false\r\n        }\r\n    };\r\n\r\n    async componentDidMount(){\r\n\r\n        console.log(\"UID CHECKS\")\r\n        console.log(this.props.myUID)\r\n        console.log(this.state.uid)\r\n        //console.log(this.props.loggedUID)\r\n        console.log(this.props.userCheck)\r\n        console.log(this.state.userCheck)\r\n\r\n        if(this.props.platform == 'exists'){\r\n            this.startFollowOnApp()\r\n        }\r\n        else{\r\n            const retrunVal = await this.setPlatform()\r\n            console.log(retrunVal)\r\n            this.startFollowChannel()\r\n        }\r\n    }\r\n\r\n    startFollowOnApp(){\r\n        const collPath2 = '/usersConnections/' + this.state.userCheck\r\n        console.log(\"getting connected user\")\r\n\r\n        var accTwitchName = \"\"\r\n        var accYoutubeName = \"\"\r\n        var accTwitterName = \"\"\r\n        var accIgName = \"\"\r\n        var accDisplayName = \"\"\r\n        firebase.database().ref(collPath2).once('value').then((snapshot) => {\r\n            accTwitchName = snapshot.child(\"twitchName\").val()\r\n            accYoutubeName = snapshot.child(\"youtubeName\").val()\r\n            accTwitterName = snapshot.child(\"twitterName\").val()\r\n            accIgName = snapshot.child(\"igName\").val()\r\n            accDisplayName = snapshot.child(\"displayName\").val()\r\n\r\n            this.setState({twitchName: accTwitchName})\r\n            this.setState({youtubeName: accYoutubeName})\r\n            this.setState({twitterName: accTwitterName})\r\n            this.setState({igName: accIgName})\r\n            this.setState({displayName: accDisplayName})\r\n        })\r\n        this.checkFollowsInApp()\r\n        this.checkFollows()\r\n    }\r\n\r\n    setPlatform(){\r\n        //console.log(\"checking other platforms and follows\")\r\n        console.log(\"query tests\")\r\n        //console.log(this.props.platform)\r\n        //console.log(this.props.userName)\r\n        const collPath = '/'+ this.props.platform + 'Connections'\r\n        //const userName = 'hdwheezy'\r\n        //const userName = 'UCL5A4nt36nUieS5uFGR8xJQ'\r\n        const userName = this.props.userName\r\n        /*\r\n        firebase.database().ref(collPath).once('value').then((snapshot) => {\r\n            console.log(\"checking user\")\r\n            const exists = snapshot.child(userName).val()\r\n            const doesntExist = snapshot.child('notname').val()\r\n            console.log(exists)\r\n            console.log(doesntExist)\r\n            console.log(exists.uid)\r\n            if(exists){\r\n                console.log(exists.uid)\r\n                this.setState({userCheck: exists.uid})\r\n            }  \r\n        })*/\r\n\r\n        console.log(\"user name\")\r\n        console.log(this.props.userName)\r\n        var returnPlat = \"\"\r\n        if(this.props.platform == \"twitch\"){\r\n            console.log(\"platform was twitch\")\r\n            this.setState({twitchName: this.props.userName})\r\n            //this.setState({youtubeName: 'was twitch'})\r\n            returnPlat = \"twitch - \" + this.props.userName\r\n\r\n            this.setState({twitchLoading: true})\r\n        }\r\n        else if(this.props.platform == \"youtube\"){\r\n            this.setState({youtubeName: this.props.channelName})\r\n            //this.setState({twitchName: 'was youtube'})\r\n            returnPlat = \"youtube - \" + this.props.channelName\r\n        }\r\n        return returnPlat\r\n        \r\n    }\r\n\r\n    async startFollowChannel() {\r\n\r\n        const collPath = '/'+ this.props.platform + 'Connections/' + this.props.userName \r\n        console.log(\"checking for user\")\r\n        console.log(this.props.userName)\r\n        console.log(this.props.channelName)\r\n        console.log(collPath)\r\n        var userCheck = this.state.userCheck\r\n        console.log(userCheck)\r\n        /*\r\n        firebase.database().ref(collPath).once('value').then((snapshot) => {\r\n            userCheck = snapshot.child(\"uid\").val()\r\n            console.log(\"user check\")\r\n            console.log(userCheck)\r\n        })*/\r\n\r\n        var accConnected = false\r\n        if(userCheck == \"NA\"){\r\n            console.log(\"was null\")\r\n        }\r\n        else{\r\n            console.log(\"was NOT null\")\r\n            accConnected = true\r\n        }\r\n\r\n        if(this.props.platform == \"youtube\" && !accConnected){\r\n            //console.log(this.props.bio)\r\n            //console.log(this.props.description)\r\n            const results1 = await this.ytScan(this.props.description)\r\n            const results2 = await this.ytScan(this.props.bio)\r\n            //console.log(results1)\r\n            //console.log(results2)\r\n\r\n            if(results1[0] !== \"twitch\"){\r\n                this.setState({ twitchName: results1[0] })\r\n            }\r\n            else if(results2[0] !== \"twitch\"){\r\n                this.setState({ twitchName: results2[0] })\r\n            }\r\n\r\n            if(results1[1] !== \"twitter\"){\r\n                this.setState({ twitterName: results1[1] })\r\n            }\r\n            else if(results2[1] !== \"twitter\"){\r\n                this.setState({ twitterName: results2[1] })\r\n            }\r\n\r\n            if(results1[2] !== \"ig\"){\r\n                this.setState({ igName: results1[2] })\r\n            }\r\n            else if(results2[2] !== \"ig\"){\r\n                this.setState({ igName: results2[2] })\r\n            }\r\n        }\r\n\r\n        this.setState({ loadingModalVisible: true});\r\n\r\n        if(this.props.platform == \"twitch\" && !accConnected){\r\n            const twitchBio = await this.getTwitchBio()\r\n            //console.log(\"twitch bio\")\r\n            //console.log(twitchBio)\r\n\r\n            this.ytTwitch(twitchBio)\r\n            this.twitterTwitch(twitchBio)\r\n            this.igTwitch(twitchBio)\r\n        }\r\n\r\n        var accTwitchName = \"\"\r\n        var accYoutubeName = \"\"\r\n        var accTwitterName = \"\"\r\n        var accIgName = \"\"\r\n        var accDisplayName = \"\"\r\n        if(accConnected){\r\n\r\n            this.setState({onApp: true})\r\n\r\n            const collPath2 = '/usersConnections/' + userCheck\r\n            console.log(\"getting connected user\")\r\n\r\n            firebase.database().ref(collPath2).once('value').then((snapshot) => {\r\n                accTwitchName = snapshot.child(\"twitchName\").val()\r\n                accYoutubeName = snapshot.child(\"youtubeName\").val()\r\n                accTwitterName = snapshot.child(\"twitterName\").val()\r\n                accIgName = snapshot.child(\"igName\").val()\r\n                accDisplayName = snapshot.child(\"displayName\").val()\r\n\r\n                this.setState({twitchName: accTwitchName})\r\n                this.setState({youtubeName: accYoutubeName})\r\n                this.setState({twitterName: accTwitterName})\r\n                this.setState({igName: accIgName})\r\n                this.setState({displayName: accDisplayName})\r\n            })\r\n\r\n            this.checkFollowsInApp()\r\n        }\r\n\r\n        this.setState({ twitchLoading: false});\r\n        \r\n        // check if already following accounts\r\n        this.checkFollows()\r\n\r\n    }\r\n\r\n    async getTwitchBio(){\r\n        //console.log(\"getting twitch bio\")\r\n        //console.log(this.state.twitchName)\r\n        const twitchBio = await fetch(\"https://api.dataflowkit.com/v1/fetch?api_key=2c08cd7a4822ad457dafc08546c3b18d2a5ff1cca592664cc4ea79b6ad7e3188\", {\r\n            body: \"{\\n    \\\"url\\\": \\\"https://www.twitch.tv/\" + this.state.twitchName + \"/about\\\",\\n    \\\"type\\\": \\\"chrome\\\",\\n    \\\"waitDelay\\\": 1.0\\n}\",\r\n            headers: {\r\n            \"Content-Type\": \"application/json\"\r\n            },\r\n            method: \"POST\"\r\n        })\r\n        .then(response => response.text())\r\n        return twitchBio\r\n    }\r\n\r\n    async ytScan(str){\r\n        var socials = ['twitch', 'twitter', 'ig']\r\n\r\n        for(var i=0; i<str.length; i++){\r\n            var tempstr = ''\r\n            var wasCom = false\r\n            if(str.substr(i, 9).toLowerCase() == \"twitch.tv\" && socials[0] == \"twitch\"){\r\n                console.log('twitch')\r\n                console.log(str.substr(i+10, 50))\r\n                tempstr = str.substr(i+10, 50)\r\n                tempstr = tempstr.replace(/[\\n\\r]/g, ' ');\r\n                wasCom = true\r\n            }\r\n            else if(str.substr(i, 11).toLowerCase() == \"twitter.com\" && socials[1] == \"twitter\"){\r\n                console.log('twitter')\r\n                console.log(str.substr(i+12, 50))\r\n                tempstr = str.substr(i+12, 50)\r\n                tempstr = tempstr.replace(/[\\n\\r]/g, ' ');\r\n                wasCom = true\r\n            }\r\n            else if(str.substr(i, 13).toLowerCase() == \"instagram.com\" && socials[2] == \"ig\"){\r\n                console.log('instagram')\r\n                console.log(str.substr(i+14, 50))\r\n                tempstr = str.substr(i+14, 50)\r\n                tempstr = tempstr.replace(/[\\n\\r]/g, ' ');\r\n                wasCom = true\r\n            }\r\n\r\n            var end = tempstr.length\r\n            if(wasCom == true){\r\n                for(var j=0; j<tempstr.length; j++){\r\n                    if(tempstr[j] == ' ' || tempstr[j] == '/'){\r\n                        console.log('end found')\r\n                        end = j\r\n                        console.log(end)\r\n                        j = tempstr.length\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(str.substr(i, 9).toLowerCase() == \"twitch.tv\" && socials[0] == \"twitch\"){\r\n                console.log('twitch 2')\r\n                console.log(tempstr.substr(0, end))\r\n                socials[0] = tempstr.substr(0, end).replace(/[&\\/\\\\#,+()$~%'\":*?<>{}]/g, '')\r\n            }\r\n            else if(str.substr(i, 11).toLowerCase() == \"twitter.com\" && socials[1] == \"twitter\"){\r\n                console.log('twitter 2')\r\n                console.log(tempstr.substr(0, end))\r\n                socials[1] = tempstr.substr(0, end).replace(/[&\\/\\\\#,+()$~%'\":*?<>{}]/g, '')\r\n            }\r\n            else if(str.substr(i, 13).toLowerCase() == \"instagram.com\" && socials[2] == \"ig\"){\r\n                console.log('instagram 2')\r\n                console.log(tempstr.substr(0, end))\r\n                socials[2] = tempstr.substr(0, end).replace(/[&\\/\\\\#,+()$~%'\":*?<>{}]/g, '')\r\n            }\r\n\r\n\r\n            // for bios only using twitch twitter etc. not twitch.tv twitter.com\r\n            var notCom = false\r\n            if(str.substr(i, 6).toLowerCase() == \"twitch\" && socials[0] == \"twitch\" && !wasCom){\r\n                console.log('twitch 3')\r\n                console.log(str.substr(i+7, 50))\r\n                tempstr = str.substr(i+7, 50)\r\n                tempstr = tempstr.replace(/[\\n\\r]/g, ' ');\r\n                notCom = true\r\n            }\r\n            else if(str.substr(i, 7).toLowerCase() == \"twitter\" && socials[1] == \"twitter\" && !wasCom){\r\n                console.log('twitter 3')\r\n                console.log(str.substr(i+8, 50))\r\n                tempstr = str.substr(i+8, 50)\r\n                tempstr = tempstr.replace(/[\\n\\r]/g, ' ');\r\n                notCom = true\r\n            }\r\n            else if(str.substr(i, 9).toLowerCase() == \"instagram\" && socials[2] == \"ig\" && !wasCom){\r\n                console.log('instagram 3')\r\n                console.log(str.substr(i+10, 50))\r\n                tempstr = str.substr(i+10, 50)\r\n                tempstr = tempstr.replace(/[\\n\\r]/g, ' ');\r\n                notCom = true\r\n            }\r\n\r\n            for(var j=0; j<tempstr.length; j++){\r\n                if(tempstr.substr(j, 4) == \".com\" || tempstr.substr(j, 3) == \".tv\"){\r\n                    console.log(\".com or .tv found\")\r\n                    notCom = false\r\n                }\r\n            }\r\n\r\n            var count = 0\r\n            var end = tempstr.length\r\n            var start = 0\r\n            if(notCom == true){\r\n                for(var j=0; j<tempstr.length; j++){\r\n                    if(tempstr[j] !== ' '){\r\n                        if(count == 0){\r\n                            start = j\r\n                        }\r\n                        count = count + 1\r\n                    }\r\n                    else{\r\n                        if(count > 4){\r\n                            end = j\r\n                            j = tempstr.length\r\n                        }\r\n                        count = 0\r\n                    }\r\n                }\r\n                console.log(tempstr.substr(start, end - start))\r\n            }\r\n            \r\n            if(str.substr(i, 6).toLowerCase() == \"twitch\" && socials[0] == \"twitch\" && !wasCom && notCom){\r\n                console.log('twitch 3')\r\n                socials[0] = tempstr.substr(start, end - start).replace(/[&\\/\\\\#,+()$~%'\":*?<>{}@]/g, '')\r\n            }\r\n            else if(str.substr(i, 7).toLowerCase() == \"twitter\" && socials[1] == \"twitter\" && !wasCom && notCom){\r\n                console.log('twitter 3')\r\n                socials[1] = tempstr.substr(start, end - start).replace(/[&\\/\\\\#,+()$~%'\":*?<>{}@]/g, '')\r\n            }\r\n            else if(str.substr(i, 9).toLowerCase() == \"instagram\" && socials[2] == \"ig\" && !wasCom && notCom){\r\n                console.log('instagram 3')\r\n                socials[2] = tempstr.substr(start, end - start).replace(/[&\\/\\\\#,+()$~%'\":*?<>{}@]/g, '')\r\n            }\r\n\r\n        }\r\n\r\n        return socials\r\n    }\r\n\r\n    ytTwitch(responseJson){\r\n        //console.log(\"yt tests\")\r\n\r\n        /* fetch(\"https://api.dataflowkit.com/v1/fetch?api_key=2c08cd7a4822ad457dafc08546c3b18d2a5ff1cca592664cc4ea79b6ad7e3188\", {\r\n            body: \"{\\n    \\\"url\\\": \\\"https://www.twitch.tv/\" + this.state.twitchName + \"/about\\\",\\n    \\\"type\\\": \\\"chrome\\\",\\n    \\\"waitDelay\\\": 1.0\\n}\",\r\n            headers: {\r\n            \"Content-Type\": \"application/json\"\r\n            },\r\n            method: \"POST\"\r\n        })\r\n        .then(response => response.text())\r\n        .then((responseJson)=> { */\r\n        //console.log(responseJson)\r\n\r\n        for(var i=0; i<responseJson.length; i++){\r\n            //if(responseJson.substr(i, 15) == \"www.youtube.com\")\r\n            if(responseJson.substr(i, 15) == \"www.youtube.com\"){\r\n                console.log(\"youtube found\")\r\n                //console.log(responseJson.substr(i-50, 200))\r\n\r\n                var tempstr = responseJson.substr(i, 200).replace(/\\s/g,'')\r\n\r\n                console.log(tempstr)\r\n                for(var j=0; j<tempstr.length; j++){\r\n                    //console.log(tempstr[j])\r\n                    if(tempstr[j] == \"\\\"\" || tempstr[j] == \"\\'\"){\r\n                        //console.log(\"end found\")\r\n                        //console.log(j)\r\n                        //console.log(tempstr.substr(0, j))\r\n                        tempstr = tempstr.substr(0, j)\r\n                        j = 300\r\n                    }\r\n                }\r\n                for(var j=0; j<tempstr.length; j++){\r\n                    //console.log(tempstr[j])\r\n                    if(tempstr[j] == \"?\"){\r\n                        //console.log(\"end found\")\r\n                        //console.log(j)\r\n                        //console.log(tempstr.substr(0, j))\r\n                        tempstr = tempstr.substr(0, j)\r\n                        j = 300\r\n                    }\r\n                }\r\n                //console.log(tempstr.substr(tempstr.length-24, 24))\r\n                //tempstr = tempstr.substr(tempstr.length-24, 24)\r\n                var first = 0\r\n                var start = 0\r\n                var end = tempstr.length\r\n                var count = 0\r\n                for(var j=0; j<tempstr.length; j++){\r\n                    //console.log(tempstr[j])\r\n                    if(tempstr[j] == \"/\"){\r\n                        if(count == 0){\r\n                            first = j\r\n                        }\r\n                        else if(count == 1){\r\n                            start = j\r\n                        }\r\n                        else if(count == 2){\r\n                            end = j\r\n                        }\r\n                        count++\r\n                    }\r\n                }\r\n                if(count == 1){\r\n                    //console.log(count)\r\n                    tempstr = tempstr.substr(first+1, end-first-1)\r\n                }\r\n                else if(count > 1){\r\n                    //console.log(count)\r\n                    tempstr = tempstr.substr(start+1, end-start-1)\r\n                }\r\n                //console.log(tempstr)\r\n                i = responseJson.length\r\n                console.log(\"youtube name\")\r\n                console.log(tempstr)\r\n                this.setState({youtubeName: tempstr})\r\n            }\r\n        }\r\n\r\n        /* })\r\n        .catch(error=>console.log(error)) */ //to catch the errors if any\r\n\r\n        var ytidURL = 'https://www.googleapis.com/youtube/v3/channels?part=snippet&id=' + this.state.youtubeName + '&key=AIzaSyCIeFNZorTXAH5MSFxIAaILwRTNMfEr3fY'\r\n\r\n        const collPath = '/mainCollection/' + this.state.uid + '/ytInfo'\r\n\r\n        console.log(ytidURL)\r\n        console.log(collPath)\r\n\r\n        firebase.database().ref(collPath).once('value').then((snapshot) => {\r\n            const ytAuthToken = snapshot.child('youtubeAuthToken').val()\r\n\r\n            //console.log(ytAuthToken)\r\n            var ytAuthFormat = 'Bearer ' + ytAuthToken\r\n\r\n            fetch(ytidURL, {\r\n                headers: {\r\n                    'Authorization': ytAuthFormat,\r\n                    'Accept': 'application/json'\r\n                }\r\n            })\r\n            .then(response => response.json())\r\n            .then((responseJson)=> {\r\n                console.log(\"getting yt account\")\r\n                console.log(responseJson)\r\n                //console.log(responseJson.items[0].snippet)\r\n                //console.log(responseJson.items[0].snippet.title)\r\n                if(responseJson.pageInfo.totalResults !== 0){\r\n                    //console.log(\"was not 0\")\r\n                    this.setState({youtubeID: this.state.youtubeName})\r\n                    this.setState({youtubeName: responseJson.items[0].snippet.title})\r\n                }\r\n                else{\r\n                    //console.log(\"was 0\")\r\n                }\r\n            })\r\n        })    \r\n\r\n    }\r\n\r\n    twitterTwitch(responseJson){\r\n        //console.log(\"twitter tests\")\r\n        /* fetch(\"https://api.dataflowkit.com/v1/fetch?api_key=2c08cd7a4822ad457dafc08546c3b18d2a5ff1cca592664cc4ea79b6ad7e3188\", {\r\n            body: \"{\\n    \\\"url\\\": \\\"https://www.twitch.tv/\" + this.state.twitchName + \"/about\\\",\\n    \\\"type\\\": \\\"chrome\\\",\\n    \\\"waitDelay\\\": 1.0\\n}\",\r\n            headers: {\r\n            \"Content-Type\": \"application/json\"\r\n            },\r\n            method: \"POST\"\r\n        })\r\n        .then(response => response.text())\r\n        .then((responseJson)=> { */\r\n        //console.log(responseJson)\r\n\r\n        for(var i=0; i<responseJson.length; i++){\r\n            if(responseJson.substr(i, 11) == \"twitter.com\"){\r\n                    //console.log(\"twitter found\")\r\n                    //console.log(responseJson.substr(i-50, 200))\r\n\r\n                    var tempstr = responseJson.substr(i, 200).replace(/\\s/g,'')\r\n\r\n                    //console.log(tempstr)\r\n                    for(var j=0; j<tempstr.length; j++){\r\n                        //console.log(tempstr[j])\r\n                        if(tempstr[j] == \"\\\"\" || tempstr[j] == \"\\'\"){\r\n                            //console.log(\"end found\")\r\n                            //console.log(j)\r\n                            //console.log(tempstr.substr(0, j))\r\n                            tempstr = tempstr.substr(0, j)\r\n                            j = 300\r\n                        }\r\n                    }\r\n                    for(var j=0; j<tempstr.length; j++){\r\n                        //console.log(tempstr[j])\r\n                        if(tempstr[j] == \"?\"){\r\n                            //console.log(\"end found\")\r\n                            //console.log(j)\r\n                            //console.log(tempstr.substr(0, j))\r\n                            tempstr = tempstr.substr(0, j)\r\n                            j = 300\r\n                        }\r\n                    }\r\n                    //console.log(tempstr.substr(tempstr.length-24, 24))\r\n                    //tempstr = tempstr.substr(tempstr.length-24, 24)\r\n                    var first = 0\r\n                    var start = 0\r\n                    var end = tempstr.length\r\n                    var count = 0\r\n                    for(var j=0; j<tempstr.length; j++){\r\n                        //console.log(tempstr[j])\r\n                        if(tempstr[j] == \"/\"){\r\n                            if(count == 0){\r\n                                first = j\r\n                            }\r\n                            else if(count == 1){\r\n                                start = j\r\n                            }\r\n                            else if(count == 2){\r\n                                end = j\r\n                            }\r\n                            count++\r\n                        }\r\n                    }\r\n                   \r\n                    if(count == 1){\r\n                        //console.log(count)\r\n                        tempstr = tempstr.substr(first+1, end-first-1)\r\n                    }\r\n                    else{\r\n                        //console.log(count)\r\n                        tempstr = tempstr.substr(first+1, start-first-1)\r\n                    } \r\n                    tempstr = tempstr.replace(/[^a-zA-Z0-9]/g, '')\r\n                    /*\r\n                    else if(count > 2){\r\n                        console.log(count)\r\n                        tempstr = tempstr.substr(start+1, end-start-1)\r\n                    }\r\n                    */\r\n                    //console.log(tempstr)\r\n                    //i = responseJson.length\r\n                    this.setState({twitterName: tempstr})\r\n                }\r\n        }\r\n\r\n        /* })\r\n        .catch(error=>console.log(error)) */ //to catch the errors if any\r\n    }\r\n\r\n    igTwitch(responseJson){\r\n        //console.log(\"instagram tests\")\r\n        /* fetch(\"https://api.dataflowkit.com/v1/fetch?api_key=2c08cd7a4822ad457dafc08546c3b18d2a5ff1cca592664cc4ea79b6ad7e3188\", {\r\n            body: \"{\\n    \\\"url\\\": \\\"https://www.twitch.tv/\" + this.state.twitchName + \"/about\\\",\\n    \\\"type\\\": \\\"chrome\\\",\\n    \\\"waitDelay\\\": 1.0\\n}\",\r\n            headers: {\r\n            \"Content-Type\": \"application/json\"\r\n            },\r\n            method: \"POST\"\r\n        })\r\n        .then(response => response.text())\r\n        .then((responseJson)=> {\r\n        console.log(responseJson) */\r\n\r\n        for(var i=0; i<responseJson.length; i++){\r\n            if(responseJson.substr(i, 9) == \"instagram\"){\r\n                    //console.log(\"instagram found\")\r\n                    //console.log(responseJson.substr(i-50, 2000))\r\n\r\n                    var tempstr = responseJson.substr(i, 200).replace(/\\s/g,'')\r\n\r\n                    console.log(tempstr)\r\n                    for(var j=0; j<tempstr.length; j++){\r\n                        //console.log(tempstr[j])\r\n                        if(tempstr[j] == \"\\\"\" || tempstr[j] == \"\\'\"){\r\n                            //console.log(\"end found\")\r\n                            //console.log(j)\r\n                            //console.log(tempstr.substr(0, j))\r\n                            tempstr = tempstr.substr(0, j)\r\n                            j = 300\r\n                        }\r\n                    }\r\n                    for(var j=0; j<tempstr.length; j++){\r\n                        //console.log(tempstr[j])\r\n                        if(tempstr[j] == \"?\"){\r\n                            //console.log(\"end found\")\r\n                            //console.log(j)\r\n                            //console.log(tempstr.substr(0, j))\r\n                            tempstr = tempstr.substr(0, j)\r\n                            j = 300\r\n                        }\r\n                    }\r\n                    //console.log(tempstr.substr(tempstr.length-24, 24))\r\n                    //tempstr = tempstr.substr(tempstr.length-24, 24)\r\n                    var first = 0\r\n                    var start = 0\r\n                    var end = tempstr.length\r\n                    var count = 0\r\n                    for(var j=0; j<tempstr.length; j++){\r\n                        //console.log(tempstr[j])\r\n                        if(tempstr[j] == \"/\"){\r\n                            if(count == 0){\r\n                                first = j\r\n                            }\r\n                            else if(count == 1){\r\n                                start = j\r\n                            }\r\n                            else if(count == 2){\r\n                                end = j\r\n                            }\r\n                            count++\r\n                        }\r\n                    }\r\n                    if(count == 1){\r\n                        //console.log(count)\r\n                        tempstr = tempstr.substr(first+1, end-first-1)\r\n                    }\r\n                    else if(count == 2){\r\n                        //console.log(count)\r\n                        tempstr = tempstr.substr(first+1, start-first-1)\r\n                    }\r\n                    else if(count > 2){\r\n                        //console.log(count)\r\n                        tempstr = tempstr.substr(first+1, start-first-1)\r\n                    }\r\n                    //console.log(tempstr)\r\n                    if(tempstr == tempstr.replace(/[&\\/\\\\#,+()$~%'\":*?<>{}]/g, '')){\r\n                        i = responseJson.length\r\n                    }\r\n                    \r\n                    this.setState({igName: tempstr})\r\n                }\r\n        }\r\n\r\n        /* })\r\n        .catch(error=>console.log(error)) */ //to catch the errors if any\r\n    }\r\n\r\n    checkFollowsInApp(){\r\n\r\n        console.log(\"getting follows\")\r\n        const collPath = '/mainCollection/'+ this.state.uid\r\n        var follows = []\r\n        firebase.database().ref(collPath).once('value').then((snapshot) => {\r\n            follows = snapshot.child('inAppFollows').val()\r\n            this.setState({inAppFollows: follows})\r\n            console.log(follows)\r\n            console.log(follows.length)\r\n            //this.leaveLoading()\r\n            for(var i=0; i<follows.length; i++){\r\n                if(follows[i] == this.state.userCheck){\r\n                console.log(\"already followed\")\r\n                this.setState({isFollowed: true})\r\n                this.setState({followText: \"Unfollow\"})\r\n                this.setState({followColor: \"#FD0101\"})\r\n                i = follows.length\r\n                }\r\n                else{\r\n                console.log(\"not followed\")\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    checkFollows(){\r\n        const collPath = '/usersFollows/' + this.state.uid\r\n        console.log(\"checking follows\")\r\n        console.log(collPath)\r\n\r\n        //var twitchFollows = ''\r\n        //var ytFollows = []\r\n        firebase.database().ref(collPath).once('value').then((snapshot) => {\r\n            const twitchFollows = snapshot.child(\"twitch\").val()\r\n            const ytFollows = snapshot.child(\"youtube\").val()\r\n            //console.log(twitchFollows)\r\n            //console.log(ytFollows)\r\n\r\n            this.setState({twitchFollows: twitchFollows})\r\n            this.setState({ytFollows: ytFollows})\r\n\r\n            for(var i=0; i<twitchFollows.length; i++){\r\n                if(twitchFollows[i][0] == this.state.twitchName.toLowerCase() || twitchFollows[i][1] == this.state.twitchName.toLowerCase()){\r\n                    console.log(\"ALREADY FOLLOWED twitch\")\r\n                    this.setState({twitchFollowed: true})\r\n                    this.setState({twitchFollowText: \"Unfollow\"})\r\n                    this.setState({twitchColor: \"#FD0101\"})\r\n                    //this.setState({twitchFollows: twitchFollows})\r\n                }\r\n            }\r\n            for(var i=0; i<ytFollows.length; i++){\r\n                if(ytFollows[i][0] == this.state.youtubeID || ytFollows[i][0] == this.state.youtubeName || ytFollows[i][1].toLowerCase() == this.state.youtubeName.toLowerCase()){\r\n                    console.log(\"ALREADY FOLLOWED youtube\")\r\n                    this.setState({youtubeFollowed: true})\r\n                    this.setState({youtubeFollowText: \"Unfollow\"})\r\n                    this.setState({youtubeColor: \"#FD0101\"})\r\n                    //this.setState({ytFollows: ytFollows})\r\n                }\r\n            }\r\n        })\r\n        //console.log(twitchFollows)\r\n        //console.log(ytFollows)\r\n    }\r\n\r\n    closeTwitchLoading(){\r\n        this.setState({twitchLoading: !this.state.twitchLoading})\r\n    }\r\n\r\n    followUser(){\r\n\r\n        if(this.state.onApp && !this.state.isFollowed){\r\n            var followsList = []\r\n            //var followsList = this.state.inAppFollows\r\n            followsList.push(this.props.location.state.usersUid)\r\n            //followsList.push(\"testUID\")\r\n    \r\n            const collPath = '/mainCollection/' + this.state.uid\r\n            firebase.database().ref(collPath).update({\r\n                inAppFollows: followsList\r\n            })\r\n    \r\n            this.setState({isFollowed: true})\r\n            this.setState({followText: \"Unfollow\"})\r\n            this.setState({followColor: \"#FD0101\"})\r\n        }\r\n        else{\r\n            console.log(\"not on app or already followed\")\r\n        }\r\n        \r\n    }\r\n\r\n    followTwitch(){\r\n        console.log(\"follow twitch\")\r\n\r\n        const collPath = '/mainCollection/' + this.state.uid + \"/twitchInfo\"\r\n        var myName = \"\"\r\n        var authToken = \"\"\r\n        firebase.database().ref(collPath).once('value').then((snapshot) => {\r\n            myName = snapshot.child(\"userName\").val()\r\n            authToken = snapshot.child(\"twitchAuthToken\").val()\r\n        \r\n            var getMyURL = 'https://api.twitch.tv/helix/users?login=' + this.state.twitchName + '&login=' + myName\r\n\r\n            console.log(getMyURL)\r\n\r\n            var authFormat = 'Bearer ' + authToken\r\n\r\n            fetch(getMyURL, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Accept': 'application/vnd.twitchtv.v5+json',\r\n                    'Client-ID': '2fnwtwy41t2avoiqdc1py6oybitz4r',\r\n                    'Authorization': authFormat\r\n                }\r\n            })\r\n            .then(response => response.json())\r\n            .then((responseJson)=> {\r\n                console.log('getting ids')\r\n                console.log(responseJson)\r\n                console.log(responseJson.data)\r\n                console.log(responseJson.data[0])\r\n                console.log(responseJson.data[1])\r\n\r\n                var followID = responseJson.data[0].id\r\n                //following\r\n\r\n                var twitchURL = 'https://api.twitch.tv/helix/users/follows?from_id=' + responseJson.data[1].id + '&to_id=' + responseJson.data[0].id\r\n                //var authFormat = 'OAuth ' + authToken\r\n\r\n                fetch(twitchURL, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Accept': 'application/vnd.twitchtv.v5+json',\r\n                        'Client-ID': '2fnwtwy41t2avoiqdc1py6oybitz4r',\r\n                        'Authorization': authFormat\r\n                    }\r\n                })\r\n                .then(response => response.text())\r\n                .then((responseJson)=> {\r\n                    console.log('getting subscriptions')\r\n                    console.log(responseJson)\r\n\r\n                })\r\n                .catch(error=>console.log(error)) //to catch the errors if any\r\n\r\n                if(!this.state.twitchFollowed){\r\n                    //var followsList = []\r\n                    var followsList = this.state.twitchFollows\r\n                    followsList.push([this.state.twitchName, followID])\r\n                    //followsList.push(\"testUID\")\r\n            \r\n                    const collPath2 = '/usersFollows/' + this.state.uid\r\n                    firebase.database().ref(collPath2).update({\r\n                        twitch: followsList\r\n                    })\r\n    \r\n                }\r\n\r\n                this.setState({twitchFollowed: true})\r\n                this.setState({twitchFollowText: \"Unfollow\"})\r\n                this.setState({twitchColor: \"#FD0101\"})\r\n\r\n            })\r\n            .catch(error=>console.log(error)) //to catch the errors if any\r\n\r\n        })\r\n\r\n    }\r\n\r\n    followYoutube(){\r\n        console.log(\"follow youtube\")\r\n\r\n        console.log(this.state.youtubeID)\r\n        console.log(this.state.youtubeName)\r\n\r\n        const collPath = '/mainCollection/' + this.state.uid + \"/ytInfo\"\r\n        var myID = \"\"\r\n        var authToken = \"\"\r\n        firebase.database().ref(collPath).once('value').then((snapshot) => {\r\n            myID = snapshot.child(\"youtubeID\").val()\r\n            authToken = snapshot.child(\"youtubeAuthToken\").val()\r\n\r\n            var followBody = \"\"\r\n            if(this.state.youtubeID == \"NA\"){\r\n                followBody = this.state.youtubeName\r\n            }\r\n            else{\r\n                followBody = this.state.youtubeID\r\n            }\r\n\r\n            fetch(\"https://youtube.googleapis.com/youtube/v3/subscriptions?part=snippet,id&key=AIzaSyCIeFNZorTXAH5MSFxIAaILwRTNMfEr3fY\", {\r\n                body: \"{\\\"snippet\\\":{\\\"resourceId\\\":{\\\"channelId\\\":\\\"\" + followBody + \"\\\",\\\"kind\\\":\\\"youtube#channel\\\"}}}\",\r\n                headers: {\r\n                    Accept: \"application/json\",\r\n                    Authorization: \"Bearer \" + authToken,\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                method: \"POST\"\r\n            })\r\n            .then(response => response.json())\r\n            .then((responseJson)=> {\r\n                console.log('getting subscriptions')\r\n                console.log(responseJson)\r\n\r\n            })\r\n            .catch(error=>console.log(error))\r\n\r\n            if(!this.state.youtubeFollowed){\r\n                //var followsList = []\r\n                var followsList = this.state.ytFollows\r\n                followsList.push([this.state.youtubeID, this.state.youtubeName])\r\n                //followsList.push(\"testUID\")\r\n        \r\n                const collPath2 = '/usersFollows/' + this.state.uid\r\n                firebase.database().ref(collPath2).update({\r\n                    youtube: followsList\r\n                })\r\n\r\n            }\r\n\r\n            this.setState({youtubeFollowed: true})\r\n            this.setState({youtubeColor: \"#FD0101\"})\r\n            this.setState({youtubeFollowText: \"Unfollow\"})\r\n\r\n        })\r\n        \r\n    }\r\n\r\n    testButton(){\r\n        console.log(\"TEST TEST TEST\")\r\n    }\r\n\r\n    redirectIg(){\r\n        this.setState({igRe: !this.state.igRe})\r\n        window.open('https://www.instagram.com/' + this.state.igName, \"_blank\")\r\n    }\r\n\r\n    redirectIgOpen(){\r\n        this.setState({igRe: !this.state.igRe})\r\n    }\r\n\r\n    redirectTwitter(){\r\n        this.setState({twitterRe: !this.state.twitterRe})\r\n        window.open('https://twitter.com/' + this.state.twitterName, \"_blank\")\r\n    }\r\n\r\n    redirectTwitterOpen(){\r\n        this.setState({twitterRe: !this.state.twitterRe})\r\n    }\r\n\r\n    render(){\r\n        return(\r\n\r\n                <div style={rootStyle} className=\"follow-modal\" id=\"FollowModal\">\r\n\r\n                    <Container style={twitchComponent}>\r\n\r\n                        <Row style={{display: 'flex', flexDirection: 'row', flex: 1, justifyContent: \"center\", alignSelf: \"center\"}}>\r\n                            <Modal\r\n                                open={this.state.igRe}\r\n                                onClose={this.redirectIgOpen.bind(this)}\r\n                                aria-labelledby=\"simple-modal-title\"\r\n                                aria-describedby=\"simple-modal-description\"\r\n                            >\r\n                            <div style={rootStyle} className=\"redirect-modal\" id=\"RedirectModal\">  \r\n                            <Container style={redirectStyle}>          \r\n                                <Row style={{display: 'flex', flex: 1, justifyContent: \"center\", alignSelf: \"center\", height: '100%'}}> \r\n                                <h2 style={{justifyContent: \"center\", marginTop: 30, color: '#e8e6e3'}}>Must redirect to instagram to perform action...</h2>\r\n                                <Button onClick={this.redirectIg.bind(this)} style={button2}>Redirect</Button>\r\n                                </Row> \r\n                            </Container>   \r\n                            </div> \r\n                            </Modal>\r\n                        </Row>\r\n\r\n                        <Row style={{display: 'flex', flexDirection: 'row', flex: 1, justifyContent: \"center\", alignSelf: \"center\"}}>\r\n                            <Modal\r\n                                open={this.state.twitterRe}\r\n                                onClose={this.redirectTwitterOpen.bind(this)}\r\n                                aria-labelledby=\"simple-modal-title\"\r\n                                aria-describedby=\"simple-modal-description\"\r\n                            >         \r\n                            <div style={rootStyle} className=\"redirect-modal\" id=\"RedirectModal\">  \r\n                            <Container style={redirectStyle}>          \r\n                                <Row style={{display: 'flex', flex: 1, justifyContent: \"center\", alignSelf: \"center\", height: '100%'}}> \r\n                                <h2 style={{justifyContent: \"center\", marginTop: 30, color: '#e8e6e3'}}>Must redirect to twitter to perform action...</h2>\r\n                                <Button onClick={this.redirectTwitter.bind(this)} style={button2}>Redirect</Button>\r\n                                </Row> \r\n                            </Container>  \r\n                            </div>  \r\n                            </Modal>\r\n                        </Row>\r\n\r\n                        <Row style={{display: 'flex', flex: 1, justifyContent: \"center\", alignSelf: \"center\"}}>\r\n                            <Modal\r\n                                open={this.state.twitchLoading}\r\n                                onClose={this.closeTwitchLoading.bind(this)}\r\n                                aria-labelledby=\"simple-modal-title\"\r\n                                aria-describedby=\"simple-modal-description\"\r\n                            >                         \r\n                                <Row style={{display: 'flex', flex: 1, justifyContent: \"center\", alignSelf: \"center\", height: '100%'}}> \r\n                                <h1 style={{justifyContent: \"center\", marginTop: 330, color: '#e8e6e3'}}>Loading...</h1>\r\n                                </Row>   \r\n                            </Modal>\r\n                        </Row>\r\n\r\n                        <Row style={{display: 'flex', flex: 1, flexDirection: 'row', alignItems: 'center', justifyContent: 'center'}}>\r\n                            <h2 style={{ color: '#e8e6e3' }}>{this.state.displayName}</h2> \r\n                        </Row>\r\n                        <Row style={{display: 'flex', flex: 1, flexDirection: 'row', alignItems: 'center', justifyContent: 'center'}}>\r\n                            <Button onClick={this.followUser.bind(this)} style={{ \r\n                                    shadowOpacity: 0.3,\r\n                                    shadowRadius: 3,\r\n                                    shadowOffset: {\r\n                                    height: 0,\r\n                                    width: 0\r\n                                    },\r\n                                    elevation: 1,\r\n                                    marginTop: '5%',\r\n                                    backgroundColor: this.state.followColor,\r\n                                    borderRadius: 5,\r\n                                    borderColor: \"#393939\",\r\n                                    borderWidth: 1,\r\n                                    width: 70,\r\n                                    height: 30,\r\n                                    color: \"white\",\r\n                                    justifyContent: \"center\",\r\n                                    alignItems: \"center\",\r\n                                    marginLeft: 10,\r\n                                    marginBottom: 35\r\n                                }}>{this.state.followText}</Button>\r\n                        </Row>\r\n                        <Row style={{display: 'flex', flex: 1, flexDirection: 'row', alignItems: 'center', justifyContent: 'center'}}>\r\n                            <Avatar style={{width: 30, height: 30}} src={TwitchLogo} />\r\n                            <h3 style={{marginLeft: 5, color: '#e8e6e3'}}>{this.state.twitchName}</h3> \r\n                            <Button onClick={this.followTwitch.bind(this)} style={{ \r\n                                shadowOpacity: 0.3,\r\n                                shadowRadius: 3,\r\n                                shadowOffset: {\r\n                                height: 0,\r\n                                width: 0\r\n                                },\r\n                                elevation: 1,\r\n                                marginTop: '5%',\r\n                                backgroundColor: this.state.twitchColor,\r\n                                borderRadius: 5,\r\n                                borderColor: \"#393939\",\r\n                                borderWidth: 1,\r\n                                width: 70,\r\n                                height: 30,\r\n                                color: \"white\",\r\n                                justifyContent: \"center\",\r\n                                alignItems: \"center\",\r\n                                marginLeft: 10,\r\n                                marginBottom: 35\r\n                            }}>{this.state.twitchFollowText}</Button>\r\n                        </Row>\r\n                        <Row style={{display: 'flex', flex: 1, flexDirection: 'row', alignItems: 'center', justifyContent: 'center'}}>\r\n                            <Avatar style={{width: 30, height: 30}} src={YTLogo} />\r\n                            <h3 style={{marginLeft: 5, color: '#e8e6e3'}}>{this.state.youtubeName}</h3>\r\n                            <Button onClick={this.followYoutube.bind(this)} style={{ \r\n                                shadowOpacity: 0.3,\r\n                                shadowRadius: 3,\r\n                                shadowOffset: {\r\n                                height: 0,\r\n                                width: 0\r\n                                },\r\n                                elevation: 1,\r\n                                marginTop: '5%',\r\n                                backgroundColor: this.state.youtubeColor,\r\n                                borderRadius: 5,\r\n                                borderColor: \"#393939\",\r\n                                borderWidth: 1,\r\n                                width: 70,\r\n                                height: 30,\r\n                                color: \"white\",\r\n                                justifyContent: \"center\",\r\n                                alignItems: \"center\",\r\n                                marginLeft: 10,\r\n                                marginBottom: 35\r\n                            }}>{this.state.youtubeFollowText}</Button>\r\n                        </Row>\r\n                        <Row style={{display: 'flex', flex: 1, flexDirection: 'row', alignItems: 'center', justifyContent: 'center'}}>\r\n                            <Avatar style={{width: 30, height: 30}} src={IgLogo} />\r\n                            <h3 style={{marginLeft: 5, color: '#e8e6e3'}}>{this.state.igName}</h3>\r\n                            <Button onClick={this.redirectIgOpen.bind(this)} style={button2}>Follow</Button>\r\n                        </Row>\r\n                        <Row style={{display: 'flex', flex: 1, flexDirection: 'row', alignItems: 'center', justifyContent: 'center'}}>\r\n                            <Avatar style={{width: 30, height: 30}} src={TwitterLogo} />\r\n                            <h3 style={{marginLeft: 5, color: '#e8e6e3'}}>{this.state.twitterName}</h3>\r\n                            <Button onClick={this.redirectTwitterOpen.bind(this)} style={button2}>Follow</Button>\r\n                        </Row>\r\n                    </Container>\r\n                \r\n                </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst rootStyle = {\r\n    height: \"100hv\",\r\n    backgroundColor: \"#313131\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    paddingTop: 30,\r\n    paddingBottom: 30,\r\n    display: 'flex',\r\n    flexDirection: \"column\"\r\n}\r\n\r\nconst redirectStyle = {\r\n    backgroundColor: \"#ACACAC\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    borderRadius: 10,\r\n    borderWidth: 1,\r\n    borderColor: '#fff',\r\n    fluid: true,\r\n    flex: 1,\r\n    display: 'flex',\r\n    flexDirection: \"column\",\r\n    //marginLeft: 95,\r\n    //marginRight: 50,\r\n    paddingTop: 20,\r\n    paddingBottom: 20,\r\n    marginBottom: 20,\r\n    alightSelf: \"center\",\r\n    width: 800\r\n}\r\n\r\nconst twitchComponent = {\r\n    backgroundColor: \"#ACACAC\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    borderRadius: 10,\r\n    borderWidth: 1,\r\n    borderColor: '#fff',\r\n    fluid: true,\r\n    flex: 1,\r\n    marginLeft: 50,\r\n    marginRight: 50,\r\n    paddingTop: 20,\r\n    paddingBottom: 20,\r\n    marginBottom: 20,\r\n    alightSelf: \"center\",\r\n    width: 800\r\n}\r\n\r\nconst button2 = {\r\n    shadowOpacity: 0.3,\r\n    shadowRadius: 3,\r\n    shadowOffset: {\r\n    height: 0,\r\n    width: 0\r\n    },\r\n    elevation: 1,\r\n    marginTop: '5%',\r\n    backgroundColor: \"#401058\",\r\n    borderRadius: 5,\r\n    borderColor: \"#393939\",\r\n    borderWidth: 1,\r\n    width: 70,\r\n    height: 30,\r\n    color: \"white\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    marginLeft: 10,\r\n    marginBottom: 35\r\n}\r\n\r\nconst button = {\r\n    shadowOpacity: 0.3,\r\n    shadowRadius: 3,\r\n    shadowOffset: {\r\n    height: 0,\r\n    width: 0\r\n    },\r\n    elevation: 1,\r\n    //marginTop: '5%',\r\n    backgroundColor: \"#401058\",\r\n    borderRadius: 5,\r\n    borderColor: \"#393939\",\r\n    borderWidth: 1,\r\n    width: 70,\r\n    height: 30,\r\n    color: \"white\",\r\n    justifyContent: \"left\"\r\n}\r\n\r\nexport default FollowOverlay;","C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\screens\\SearchScreen.js",["394","395","396","397","398","399","400","401","402"],"import React from 'react';\r\nimport { withRouter, Link } from 'react-router-dom';\r\nimport axios from \"axios\";\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport { List, Image, Button } from 'semantic-ui-react'\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\nimport firebase from \"firebase\";\r\nimport 'firebase/database';\r\n\r\nimport Cookies from 'universal-cookie';\r\n\r\nimport DefaultPFP from '../pictureIcons/defaultpfp.jpg'\r\n\r\nimport TwitchLogo from '../pictureIcons/twitch-image.png'\r\nimport IgLogo from '../pictureIcons/ig-image.png'\r\nimport TwitterLogo from '../pictureIcons/twitter-image.png'\r\nimport YTLogo from '../pictureIcons/youtube-image.png'\r\n\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\n\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Nav from 'react-bootstrap/Nav'\r\n\r\nimport StickyFooter from 'react-sticky-footer';\r\n\r\nclass SearchScreen extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        const startRow = <Row style={{marginTop: 100, marginBottom: 900}}> </Row>\r\n        var startRows = []\r\n        startRows.push(startRow)\r\n\r\n        this.state = {\r\n            email: \"\",\r\n            uid: firebase.auth().currentUser.uid,\r\n            password: \"\",\r\n            errorMessage: null,\r\n\r\n            searchValue: \"\",\r\n\r\n            startRows: startRows,\r\n            searchFeed: startRows,\r\n\r\n            usersUid: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        firebase.auth().onAuthStateChanged(function(user) {\r\n            if (user) {\r\n                console.log(\"YES logged in\")\r\n\r\n            } else {\r\n              console.log(\"NO logged in\")\r\n              this.props.history.push(\"/OpenScreen\");\r\n            }\r\n        }.bind(this));\r\n    }\r\n\r\n    searchChange(e){\r\n        this.setState({ searchValue: e.target.value })\r\n        console.log(e.target.value)\r\n\r\n        var allLower = e.target.value.toLowerCase()\r\n        console.log(allLower)\r\n\r\n        var searchResults = []\r\n\r\n        firebase.database().ref('mainCollection').orderByChild(\"displayAllLow\").startAt(e.target.value).on(\"child_added\", function(snapshot){\r\n            //then can search for using through the UID\r\n            console.log(\"search event\")\r\n            console.log(snapshot.key)\r\n            console.log(snapshot)\r\n            searchResults.push([snapshot, snapshot.key])\r\n        })\r\n\r\n        if(searchResults.length > 0){\r\n            console.log(\"not undefined\")\r\n            console.log(searchResults[0][1])\r\n        }\r\n        else{\r\n            console.log(\"undefined\")\r\n        }\r\n\r\n        const newRows = []\r\n\r\n        if(searchResults.length > 0){\r\n\r\n        for(var i=0; i<searchResults.length; i++){\r\n            console.log(searchResults[i][1])\r\n            const tempUid = searchResults[i][1]\r\n            //console.log(searchResults[i][0].child('ytInfo').child('userName').val())\r\n            const newResult = [\r\n                <Container key={\"results\" + i} style={twitchComponent}>\r\n                <Row style={{display: 'flex', flex: 1, flexDirection: 'row', alignItems: 'center', marginLeft: 20}}>\r\n                    <h3 style={{ color: '#e8e6e3' }}>{searchResults[i][0].child('displayName').val()}</h3>\r\n                </Row>\r\n                <Row style={{display: 'flex', flex: 1, justifyContent: \"flex-start\", alignSelf: \"start\", marginLeft: 20}}>\r\n                    <Button onClick={() => this.goToProfile(tempUid)} style={button}>Visit</Button>\r\n                </Row>\r\n                <Row style={{display: 'flex', flex: 1, flexDirection: 'row', alignItems: 'center', marginLeft: 20}}>\r\n                    <Avatar style={{width: 30, height: 30}} src={YTLogo} />\r\n                    <h4 style={{marginLeft: 5, color: '#e8e6e3'}}>{searchResults[i][0].child('ytInfo').child('userName').val()}</h4>\r\n                </Row>\r\n                <Row style={{display: 'flex', flex: 1, flexDirection: 'row', alignItems: 'center', marginLeft: 20}}>\r\n                    <Avatar style={{width: 30, height: 30}} src={TwitchLogo} />\r\n                    <h4 style={{marginLeft: 5, color: '#e8e6e3'}}>{searchResults[i][0].child('twitchInfo').child('userName').val()}</h4>\r\n                </Row>\r\n                <Row style={{display: 'flex', flex: 1, flexDirection: 'row', alignItems: 'center', marginLeft: 20}}>\r\n                    <Avatar style={{width: 30, height: 30}} src={TwitterLogo}/>  \r\n                    <h4 style={{marginLeft: 5, color: '#e8e6e3'}}>{searchResults[i][0].child('twitterInfo').child('userName').val()}</h4>\r\n                </Row>\r\n                <Row style={{display: 'flex', flex: 1, flexDirection: 'row', alignItems: 'center', marginLeft: 20}}>\r\n                    <Avatar style={{width: 30, height: 30}} src={IgLogo}/>  \r\n                    <h4 style={{marginLeft: 5, color: '#e8e6e3'}}>{searchResults[i][0].child('igInfo').child('userName').val()}</h4>\r\n                </Row>\r\n                </Container>\r\n            ]\r\n            newRows.push(newResult)\r\n            //newRows.push(newResult)\r\n        }\r\n\r\n        if(searchResults.length < 3)\r\n            newRows.push(this.state.startRows)\r\n        }\r\n        if(searchResults.length > 0){\r\n            console.log(\"not undefined\")\r\n            //console.log(searchResults[0][1])\r\n        }\r\n        else{\r\n            console.log(\"undefined\")\r\n            newRows.push(this.state.startRows)\r\n        }\r\n\r\n        this.setState({searchFeed: newRows})\r\n\r\n    }\r\n\r\n    goToProfile(tempUid){\r\n        console.log(\"navigate to user profile\")\r\n        console.log(tempUid)\r\n\r\n        this.setState({usersUid: tempUid})\r\n\r\n        this.props.history.push({ pathname: \"/OthersProfile\", state: {\r\n                pastState: this.props.location.state, \r\n                usersUid: tempUid\r\n            } \r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div style={rootStyle} className=\"profile-screen\" id=\"ProfileScreen\">\r\n\r\n\r\n                <Container style={headerComponent} >\r\n                    <Row style={{display: 'flex', justifyContent: 'center'}}>\r\n                        <Form.Group controlId=\"formBasicPassword\">\r\n                            <Form.Control style={{marginTop: 10, maxWidth: '535px', maxHeight: '40px', minWidth: '535px', minHeight: '40px'}} type=\"search\" placeholder=\"Search for user...\" onChange={this.searchChange.bind(this)} />\r\n                        </Form.Group>\r\n                    </Row>\r\n                </Container>\r\n\r\n                <Container style={{zIndex: 0}}>\r\n\r\n                    {this.state.searchFeed}\r\n\r\n                </Container>\r\n\r\n                <StickyFooter\r\n                    bottomThreshold={50}\r\n                    normalStyles={{\r\n                    backgroundColor: \"#999999\",\r\n                    padding: \"2rem\"\r\n                    }}\r\n                    stickyStyles={{\r\n                    backgroundColor: \"rgba(255,255,255,.8)\",\r\n                    padding: \"2rem\"\r\n                    }}\r\n                >\r\n\r\n                <Navbar style={{footer}} sticky='bottom' bg=\"dark\" variant=\"dark\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Nav.Link as={Link} \r\n                            to={{pathname: \"/FeedScreen\",\r\n                                state:\r\n                                    this.props.location.state\r\n                            }}\r\n                        >\r\n                            <HomeIcon style={{marginLeft: 100, marginRight: 40, color: 'black', maxWidth: '50px', maxHeight: '50px', minWidth: '50px', minHeight: '50px'}} />\r\n                        </Nav.Link>\r\n                        <Nav.Link as={Link} \r\n                            to={{pathname: \"/FeedScreen\",\r\n                                state:\r\n                                    this.props.location.state\r\n                            }}\r\n                        >\r\n                            <StarIcon style={{marginLeft: 40, marginRight: 40, color: 'black', maxWidth: '50px', maxHeight: '50px', minWidth: '50px', minHeight: '50px'}} />\r\n                        </Nav.Link>\r\n                        <Nav.Link as={Link} \r\n                            to={{pathname: \"/ProfileScreen\",\r\n                                state:\r\n                                    this.props.location.state\r\n                            }}\r\n                        >\r\n                            <PersonIcon style={{marginLeft: 40, marginRight: 40, color: 'black', maxWidth: '50px', maxHeight: '50px', minWidth: '50px', minHeight: '50px'}} />\r\n                        </Nav.Link>\r\n                        <Nav.Link as={Link} \r\n                            to={{pathname: \"/SearchScreen\",\r\n                                state:\r\n                                    this.props.location.state\r\n                            }}\r\n                        >\r\n                            <SearchIcon style={{marginLeft: 40, marginRight: 40, color: 'black', maxWidth: '50px', maxHeight: '50px', minWidth: '50px', minHeight: '50px'}} />\r\n                        </Nav.Link>\r\n                        <Nav.Link as={Link} \r\n                            to={{pathname: \"/InfoScreen\",\r\n                                state:\r\n                                    this.props.location.state\r\n                            }}\r\n                        >\r\n                            <InfoIcon style={{marginLeft: 40, marginRight: 100, color: 'black', maxWidth: '50px', maxHeight: '50px', minWidth: '50px', minHeight: '50px'}} />\r\n                        </Nav.Link>\r\n                    </Nav>\r\n                </Navbar>\r\n\r\n                </StickyFooter>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst myscrollstyle = {\r\n    height: '100vh',\r\n    width: '400px',\r\n    marginReft: 'auto',\r\n    marginRight: 'auto',\r\n    overflowY: 'scroll'\r\n}\r\n\r\nconst footer = {\r\n    clear: 'both',\r\n    position: 'relative',\r\n    marginTop: '-200px',\r\n}\r\n\r\nconst tweetComponent = {\r\n    backgroundColor: \"#ACACAC\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"stretch\",\r\n    borderRadius: 10,\r\n    borderWidth: 1,\r\n    borderColor: '#fff',\r\n    //fluid: true,\r\n    //flex: 1,\r\n    marginLeft: 50,\r\n    marginRight: 50,\r\n    paddingTop: 20,\r\n    paddingBottom: 20,\r\n    marginBottom: 20,\r\n    alignSelf: \"center\",\r\n    width: 800\r\n}\r\n\r\nconst headerComponent = {\r\n    //backgroundColor: \"#ACACAC\",\r\n    backgroundColor: \"#474d50\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    borderRadius: 10,\r\n    borderWidth: 1,\r\n    borderColor: '#fff',\r\n    fluid: true,\r\n    flex: 1,\r\n    marginLeft: 50,\r\n    marginRight: 50,\r\n    paddingTop: 20,\r\n    paddingBottom: 20,\r\n    marginBottom: 20,\r\n    alignSelf: \"center\",\r\n    width: 800,\r\n    position: '-webkit-sticky',\r\n    position: 'sticky',\r\n    top: 0,\r\n    zIndex: 1000\r\n}\r\n\r\nconst twitchComponent = {\r\n    //backgroundColor: \"#ACACAC\",\r\n    backgroundColor: \"#474d50\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    borderRadius: 10,\r\n    borderWidth: 1,\r\n    borderColor: '#fff',\r\n    fluid: true,\r\n    flex: 1,\r\n    marginLeft: 50,\r\n    marginRight: 50,\r\n    paddingTop: 20,\r\n    paddingBottom: 20,\r\n    marginBottom: 20,\r\n    alightSelf: \"center\",\r\n    width: 800\r\n}\r\n\r\nconst rootStyle = {\r\n    height: \"100hv\",\r\n    //backgroundColor: \"#313131\",\r\n    backgroundColor: \"#25282a\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    paddingTop: 30,\r\n    paddingBottom: 30,\r\n    display: 'flex',\r\n    flexDirection: \"column\"\r\n}\r\n\r\nconst button = {\r\n    shadowOpacity: 0.3,\r\n    shadowRadius: 3,\r\n    shadowOffset: {\r\n    height: 0,\r\n    width: 0\r\n    },\r\n    elevation: 1,\r\n    marginTop: '0',\r\n    backgroundColor: \"#401058\",\r\n    borderRadius: 5,\r\n    borderColor: \"#393939\",\r\n    borderWidth: 1,\r\n    width: 70,\r\n    height: 30,\r\n    color: \"white\",\r\n    justifyContent: \"left\"\r\n}\r\n\r\nexport default withRouter(SearchScreen);","C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\screens\\OthersProfile.js",["403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431","432","433","434","435","436","437","438","439"],"import React from 'react';\r\nimport { withRouter, Link } from 'react-router-dom';\r\nimport axios from \"axios\";\r\n\r\nimport firebase from \"firebase\";\r\nimport 'firebase/database';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport { List, Image, Button } from 'semantic-ui-react'\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\nimport Cookies from 'universal-cookie';\r\n\r\nimport DefaultPFP from '../pictureIcons/defaultpfp.jpg'\r\n\r\nimport TwitchLogo from '../pictureIcons/twitch-image.png'\r\nimport IgLogo from '../pictureIcons/ig-image.png'\r\nimport TwitterLogo from '../pictureIcons/twitter-image.png'\r\nimport YTLogo from '../pictureIcons/youtube-image.png'\r\n\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\n\r\nimport StarBorderOutlinedIcon from '@material-ui/icons/StarBorderOutlined';\r\n\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Nav from 'react-bootstrap/Nav'\r\n\r\nimport StickyFooter from 'react-sticky-footer';\r\n\r\nimport TwitchComponent from \"../components/TwitchComponent\";\r\nimport YoutubeComponent from \"../components/YoutubeComponent\";\r\nimport TwitterComponent from \"../components/TwitterComponent\";\r\nimport InstagramComponent from \"../components/InstagramComponent\";\r\n\r\nimport AutoScrollContainer from 'auto-scroll-container'\r\n\r\nimport { StickyContainer, Sticky } from 'react-sticky';\r\n\r\n\r\nimport ThumbUpAltIcon from '@material-ui/icons/ThumbUpAlt';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport RepeatIcon from '@material-ui/icons/Repeat';\r\n\r\nimport { TwitchEmbed, TwitchChat, TwitchClip, TwitchPlayer } from 'react-twitch-embed';\r\n\r\nimport YouTube from 'react-youtube-embed'\r\n\r\nimport { Timeline, Tweet } from 'react-twitter-widgets'\r\nimport { TwitterTimelineEmbed, TwitterShareButton, TwitterTweetEmbed } from 'react-twitter-embed';\r\n\r\nimport { InstagramMedia } from 'react-instagram-media'\r\n\r\nimport Modal from '@material-ui/core/Modal';\r\nimport FollowOverlay from \"../components/FollowOverlay\";\r\n\r\nclass OthersProfile extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        const startRow = <Row style={{marginTop: 100, marginBottom: 900}}>Click above to view socials...</Row>\r\n        var startRows = []\r\n        startRows.push(startRow)\r\n\r\n        this.state = {\r\n            email: \"\",\r\n\r\n            userCheck: props.location.state.usersUid,\r\n            uid: props.location.state.pastState.myUID,\r\n\r\n            password: \"\",\r\n            errorMessage: null,\r\n\r\n            displayName: \"\",\r\n            twitterName: \"\",\r\n            igName: \"\",\r\n            igUserID: \"\",\r\n            twitchName: \"\",\r\n            youtubeName: \"\",\r\n\r\n            twitchAuth: \"\",\r\n            youtubeAuth: \"\",\r\n            twitterAuth: \"\",\r\n            igAuth: \"\",\r\n\r\n            isFollowed: \"\",\r\n            followText: \"Follow\",\r\n\r\n            rows: startRows,\r\n\r\n            favColor: \"white\",\r\n            notFavColor: \"gold\",\r\n            isFav: false,\r\n\r\n            isFollowed: false,\r\n            followText: \"Follow\",\r\n            followColor: \"#401058\",\r\n\r\n            favList: [],\r\n\r\n            inAppFollows: [],\r\n\r\n            twitchPFP: DefaultPFP,\r\n            ytPFP: DefaultPFP,\r\n            currPFP: DefaultPFP,\r\n            pfpCount: 0,\r\n            currPFPplatform: DefaultPFP,\r\n\r\n            followClicked: false\r\n        };\r\n        console.log(props.location)\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n        firebase.auth().onAuthStateChanged(function(user) {\r\n            if (user) {\r\n                console.log(\"YES logged in\")\r\n\r\n            } else {\r\n              console.log(\"NO logged in\")\r\n              this.props.history.push(\"/OpenScreen\");\r\n            }\r\n        }.bind(this));\r\n\r\n        console.log(\"mount others profile\")\r\n        //console.log(this.props.route.params.myTwitchStream)\r\n        //console.log(this.props.route.params.testProps)\r\n        this.updateProfileInfo()\r\n        this.checkFollow()\r\n        this.checkFav()\r\n    }\r\n\r\n    checkFollow(){\r\n\r\n        console.log(\"getting follows\")\r\n        const collPath = '/mainCollection/'+ this.props.location.state.pastState.myUID\r\n        var follows = []\r\n        firebase.database().ref(collPath).once('value').then((snapshot) => {\r\n            follows = snapshot.child('inAppFollows').val()\r\n            this.setState({inAppFollows: follows})\r\n            console.log(follows)\r\n            console.log(follows.length)\r\n            //this.leaveLoading()\r\n            for(var i=0; i<follows.length; i++){\r\n                if(follows[i] == this.props.location.state.usersUid){\r\n                console.log(\"already followed\")\r\n                this.setState({isFollowed: true})\r\n                this.setState({followText: \"Unfollow\"})\r\n                this.setState({followColor: \"#FD0101\"})\r\n                i = follows.length\r\n                }\r\n                else{\r\n                console.log(\"not followed\")\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    checkFav(){\r\n\r\n        console.log(\"getting favs\")\r\n        const collPath = '/mainCollection/'+ this.props.location.state.pastState.myUID\r\n        var favs = []\r\n        firebase.database().ref(collPath).once('value').then((snapshot) => {\r\n            favs = snapshot.child('favsList').val()\r\n            this.setState({favList: favs})\r\n            console.log(favs)\r\n            console.log(favs.length)\r\n            //this.leaveLoading()\r\n            for(var i=0; i<favs.length; i++){\r\n                if(favs[i] == this.props.location.state.usersUid){\r\n                console.log(\"already followed\")\r\n                this.setState({favColor: \"gold\"})\r\n                this.setState({isFav: true})\r\n                i = favs.length\r\n                }\r\n                else{\r\n                console.log(\"not followed\")\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    updateProfileInfo(){\r\n\r\n        console.log(\"PROPS TEST\")\r\n        console.log(this.props.location.state.usersUid)\r\n\r\n\r\n        const collPath = '/mainCollection/' + this.props.location.state.usersUid\r\n        firebase.database().ref(collPath).once('value').then((snapshot) => {\r\n            const myDisplayName = snapshot.child('displayName').val()\r\n            this.setState({displayName: myDisplayName})\r\n\r\n            const newTwitter = snapshot.child('twitterInfo').val()\r\n            const newIG = snapshot.child('igInfo').val()\r\n            const newTwitch = snapshot.child('twitchInfo').val()\r\n            const newYoutube = snapshot.child('ytInfo').val()\r\n \r\n            console.log(\"mainCollection info\")\r\n            console.log(newTwitter.userName)\r\n\r\n            this.setState({twitchName: newTwitch.userName})\r\n            this.setState({twitchAuth: newTwitch.twitchAuthToken})\r\n\r\n            this.setState({youtubeName: newYoutube.userName})\r\n            this.setState({youtubeAuth: newYoutube.youtubeAuthToken})\r\n\r\n            this.setState({twitterName: newTwitter.userName})\r\n            this.setState({twitterAuth: newTwitter.twitterAuthToken})\r\n\r\n            this.setState({igName: newIG.userName})\r\n            this.setState({igAuth: newIG.igAuthToken})\r\n            this.setState({igUserID: newIG.igUserID})\r\n\r\n            this.updateTwitch()\r\n            this.updateYT()\r\n\r\n        })\r\n    }\r\n\r\n    updateIg(){\r\n        console.log(\"in get ig posts\")\r\n\r\n        var newRows = []\r\n\r\n        var igMediaURL = 'https://graph.instagram.com/' + this.state.igUserID + '/media?fields=permalink,username,media_url&access_token=' + this.state.igAuth\r\n        console.log(igMediaURL)\r\n\r\n        fetch(igMediaURL)\r\n        .then(response => response.json())\r\n        .then((responseJson)=> {\r\n          console.log('response')\r\n          console.log(responseJson)\r\n          console.log(responseJson.data[0].username)\r\n          console.log(responseJson.data[0].permalink)\r\n\r\n          const permLink = responseJson.data[0].permalink\r\n          const permID = permLink.substr(permLink.length - 12, 11)\r\n\r\n          console.log(permID)\r\n\r\n          const posts = responseJson.data\r\n          console.log(posts.length)\r\n          console.log(posts)\r\n          var postsRows = []\r\n          for(var i=0; i<10; i++){\r\n              console.log(posts[i].permalink)\r\n              const postsID = posts[i].permalink\r\n              const trimID = postsID.substr(postsID.length - 12, 11)\r\n              //const igRow = <InstagramComponent key={trimID} postID={trimID}/> \r\n              const igRow = <InstagramComponent postID={trimID} name={posts[i].username} mediaUrl={posts[i].media_url} myUID={this.props.location.state.pastState.myUID}/> \r\n              newRows.push(igRow)\r\n          }\r\n          //this.setState({igPosts: newRows})\r\n          //console.log(newRows)\r\n\r\n          this.setState({rows: newRows})\r\n        })\r\n        .catch(error=>console.log(error)) //to catch the errors if any\r\n    }\r\n\r\n    updateTwitter(){\r\n\r\n        console.log(\"getting tweets\")\r\n\r\n        //const twitterName = this.state.twitterName\r\n        const twitterName = this.state.twitterName\r\n\r\n        var newRows = []\r\n\r\n        const exchangeEndpoint = 'https://smbackendnodejs.herokuapp.com/getTweets'\r\n        //local\r\n        //const exchangeEndpoint = '/getTweets'\r\n        axios.get(exchangeEndpoint + \"/?twitterName=\" + twitterName + \"&token=\" + this.state.twitterAuth).then(responseJson => {\r\n    \r\n            console.log(\"next getting FOLLOWS tweets\")\r\n            console.log(responseJson)\r\n\r\n            //loop through here\r\n            \r\n            for(var i=0; i<responseJson.data.data.length; i++){\r\n                console.log(responseJson.data.data[i])\r\n                //const twitRow = <TwitterComponent twitterName=\"wheezyoutcast\" postNum={responseJson.data[i].id}/>\r\n                const twitRow = <TwitterComponent twitterName={twitterName} postNum={responseJson.data.data[i].id} myUID={this.props.location.state.pastState.myUID}/>\r\n                newRows.push(twitRow)\r\n            }\r\n\r\n            console.log(newRows)\r\n            this.setState({rows: newRows})\r\n\r\n        })\r\n      \r\n    }\r\n\r\n    updateYT(){\r\n        var ytidURL = 'https://www.googleapis.com/youtube/v3/channels?part=snippet%2CcontentDetails%2Cstatistics%2CbrandingSettings%2CtopicDetails&mine=true&key=AIzaSyCIeFNZorTXAH5MSFxIAaILwRTNMfEr3fY'\r\n\r\n        var ytAuthFormat = 'Bearer ' + this.state.youtubeAuth\r\n        console.log(ytidURL)\r\n        console.log(ytAuthFormat)\r\n        fetch(ytidURL, {\r\n            headers: {\r\n                'Authorization': ytAuthFormat,\r\n                'Accept': 'application/json'\r\n            }\r\n        })\r\n        .then(response => response.json())\r\n        .then((responseJson)=> {          \r\n            var playlistURL = 'https://www.googleapis.com/youtube/v3/playlistItems?playlistId=' + responseJson.items[0].contentDetails.relatedPlaylists.uploads + '&part=snippet&maxResults=50&key=AIzaSyCIeFNZorTXAH5MSFxIAaILwRTNMfEr3fY'\r\n\r\n            const profilePic = responseJson.items[0].snippet.thumbnails.medium.url\r\n\r\n            this.setState({ytProfPic: profilePic})\r\n\r\n            const chanID = responseJson.items[0].id\r\n\r\n            this.setState({youtubeID: chanID})\r\n\r\n            const channelDescription = responseJson.items[0].snippet.description\r\n\r\n            console.log(playlistURL)\r\n            fetch(playlistURL, {\r\n                headers: {\r\n                    'Authorization': ytAuthFormat,\r\n                    'Accept': 'application/json'\r\n                }\r\n            })\r\n            .then(response => response.json())\r\n            .then((responseJson)=> {\r\n                const vidsList = responseJson.items\r\n\r\n                //const newVid = <YoutubeComponent key={vidsList[i].snippet.resourceId.videoId} videoId={vidsList[i].snippet.resourceId.videoId} thumbnailUrl={vidsList[i].snippet.thumbnails.high.url} vidTitle={vidsList[i].snippet.title} channelName={vidsList[i].snippet.channelTitle}/>\r\n                var newRows = []\r\n                for(var i=0; i<vidsList.length-1; i++){\r\n                    //console.log(vidsList[i].id.videoId)\r\n                    const newVid = <YoutubeComponent key={vidsList[i].snippet.resourceId.videoId} date={responseJson.items[i].snippet.publishedAt} videoId={vidsList[i].snippet.resourceId.videoId} thumbnailUrl={vidsList[i].snippet.thumbnails.high.url} vidTitle={vidsList[i].snippet.title} channelName={vidsList[i].snippet.channelTitle} profilePic={profilePic} userName={chanID} bio={channelDescription} description={responseJson.items[i].snippet.description} authToken={this.state.youtubeAuth} myUID={this.props.location.state.pastState.myUID}/>\r\n                    //const newVid = [vidsList[i].snippet.resourceId.videoId, vidsList[i].snippet.resourceId.videoId, vidsList[i].snippet.thumbnails.high.url, vidsList[i].snippet.title, vidsList[i].snippet.channelTitle, profilePic, subsList[currNum][0], channelDescription, responseJson.items[0].snippet.description]\r\n                    //const newVid = [vidsList[i].snippet.resourceId.videoId, vidsList[i].snippet.resourceId.videoId, vidsList[i].snippet.thumbnails.high.url, vidsList[i].snippet.title, vidsList[i].snippet.channelTitle, profilePic, chanID, channelDescription, responseJson.items[i].snippet.description, this.state.youtubeAuthToken]\r\n                    newRows.push(newVid)\r\n                }\r\n                this.setState({myYTRow: newRows})\r\n                this.setState({ytPFP: profilePic})\r\n                //console.log(this.state.myYTvids)\r\n            })\r\n            .catch(error=>console.log(error)) //to catch the errors if any\r\n        })\r\n        .catch(error=>console.log(error)) //to catch the errors if any\r\n      \r\n    }\r\n\r\n    setRowYT(){\r\n        this.setState({rows: this.state.myYTRow})\r\n    }\r\n\r\n    updateTwitch(){\r\n\r\n        var authFormat = 'Bearer ' + this.state.twitchAuth\r\n            \r\n        var followURL = \"https://api.twitch.tv/helix/users\"\r\n        fetch(followURL, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Accept': 'application/vnd.twitchtv.v5+json',\r\n                'Client-ID': '2fnwtwy41t2avoiqdc1py6oybitz4r',\r\n                'Authorization': authFormat\r\n            }\r\n        })\r\n        .then(response => response.json())\r\n        .then((responseJson)=> {\r\n            //console.log(responseJson)\r\n            console.log(responseJson)\r\n\r\n            var followsStreamsURL = \"https://api.twitch.tv/helix/streams?user_id=\" + responseJson._id\r\n\r\n            this.setState({twitchID: responseJson._id})\r\n\r\n            var myTwitchName = responseJson.name\r\n\r\n            const pfpLink = responseJson.data[0].profile_image_url\r\n\r\n            this.setState({ twitchProfPic: pfpLink })\r\n            \r\n            //this.selectFile()\r\n\r\n            this.setState({displayProfPic: this.state.twitchProfPic})\r\n            this.setState({profPicCount: 1})\r\n            this.setState({isStart: false})\r\n            this.setState({currLogo: TwitchLogo})\r\n\r\n            //console.log(followsStreamsURL)\r\n            var authFormat = 'Bearer ' + this.state.twitchAuth\r\n            fetch(followsStreamsURL, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Client-ID': '2fnwtwy41t2avoiqdc1py6oybitz4r',\r\n                    'Authorization': authFormat\r\n                }\r\n            })\r\n            .then(response => response.json())\r\n            .then(async (responseJson)=> {\r\n                //console.log(myTwitchName)\r\n                console.log(responseJson)\r\n                console.log(\"USER DATA CHECK\")\r\n                console.log(responseJson.data)\r\n\r\n                let liveCheck = responseJson.data\r\n\r\n                //let liveCheck = responseJson.data\r\n                //console.log(liveCheck.length)\r\n                if(liveCheck.length !== 0){\r\n                    //console.log(\"live\")\r\n                    //const myTwitchRow = <TwitchComponent key={liveCheck[0].user_name} userName={liveCheck[0].user_name} streamTitle={liveCheck[0].title} twitchAuth={this.state.twitchToken} myName={this.state.twitchName}/>\r\n                    //const twitchRow = [liveStreams[i].user_name, liveStreams[i].user_name, liveStreams[i].title, this.state.twitchAuthToken, this.state.twitchName, liveStreams[i].thumbnail_url, profJson.data[0].profile_image_url, liveStreams[i].user_id]\r\n                    \r\n                    const urlForProfPic = 'https://api.twitch.tv/helix/users?id=' + liveCheck[0].user_id\r\n\r\n                    const profJson = await fetch(urlForProfPic, {\r\n                    method: 'GET',\r\n                    headers: {\r\n                        'Client-ID': '2fnwtwy41t2avoiqdc1py6oybitz4r',\r\n                        'Authorization': authFormat\r\n                    }\r\n                    }).then(response => response.json())\r\n                    \r\n                    //const myTwitchRow = [liveCheck[0].user_name, liveCheck[0].user_name, liveCheck[0].title, this.state.twitchToken, this.state.twitchName, liveCheck[0].thumbnail_url, profJson.data[0].profile_image_url, liveCheck[0].user_id]\r\n                    const myTwitchRow = <TwitchComponent key={liveCheck[0].user_name} userName={liveCheck[0].user_name} streamTitle={liveCheck[0].title} twitchAuth={this.state.twitchAuth} myName={this.state.twitchName} thumbnail={liveCheck[0].thumbnail_url} profilePic={profJson.data[0].profile_image_url} myUID={this.props.location.state.pastState.myUID} />\r\n                    this.setState({rows: myTwitchRow})\r\n                    this.setState({twitchPFP: profJson.data[0].profile_image_url})\r\n                }\r\n                else{\r\n                    //console.log(\"not live\")\r\n                    const myTwitchRow = <TwitchComponent key={this.state.twitchName} userName={this.state.twitchName} streamTitle={\"Offline\"} twitchAuth={this.state.twitchAuth} myName={this.state.twitchName} profilePic={pfpLink} myUID={this.props.location.state.pastState.myUID} />\r\n                    //const myTwitchRow = <TwitchComponent key={this.state.twitchName} userName={this.state.twitchName} streamTitle={\"Offline\"} twitchAuth={this.state.twitchAuthToken} myName={this.state.twitchName}/>\r\n                    //const myTwitchRow = [this.state.twitchName, this.state.twitchName, \"Offline\", this.state.twitchAuthToken, this.state.twitchName]\r\n                    this.setState({myTwitchRow: myTwitchRow})\r\n                    this.setState({twitchPFP: pfpLink})\r\n                }\r\n\r\n                this.switchPFP()\r\n                \r\n            })\r\n            .catch(error=>console.log(error))\r\n        })\r\n        .catch(error=>console.log(error)) //to catch the errors if any\r\n      \r\n    }\r\n\r\n    setRowTwitch(){\r\n        var fillRows = []\r\n        const startRow = <Row style={{marginTop: 100, marginBottom: 320}}></Row>\r\n        fillRows.push(this.state.myTwitchRow)\r\n        fillRows.push(startRow)\r\n        this.setState({rows: fillRows})\r\n    }\r\n\r\n    goBack(){\r\n        this.props.history.push({ pathname: \"/SearchScreen\", state: this.props.location.state.pastState});\r\n    }\r\n\r\n    clickedFav(){\r\n        console.log(\"fav clicked\")\r\n        //const tempColor = this.state.notFavColor\r\n        //this.setState({notFavColor: this.state.favColor})\r\n        if(!this.state.isFav){\r\n\r\n            var favsList = this.state.favList\r\n            favsList.push(this.props.location.state.usersUid)\r\n\r\n            const collPath = '/mainCollection/' + this.props.location.state.pastState.myUID\r\n            firebase.database().ref(collPath).update({\r\n                favsList: favsList\r\n            })\r\n\r\n            this.setState({favColor: \"gold\"})\r\n            this.setState({isFav: true})\r\n        }\r\n\r\n    }\r\n\r\n    clickFollow(){\r\n\r\n        if(!this.state.isFollowed){\r\n            //var followsList = []\r\n            var followsList = this.state.inAppFollows\r\n            followsList.push(this.props.location.state.usersUid)\r\n            //followsList.push(\"testUID\")\r\n    \r\n            const collPath = '/mainCollection/' + this.props.location.state.pastState.myUID\r\n            firebase.database().ref(collPath).update({\r\n                inAppFollows: followsList\r\n            })\r\n    \r\n            this.setState({isFollowed: true})\r\n            this.setState({followText: \"Unfollow\"})\r\n            this.setState({followColor: \"#FD0101\"})\r\n        }\r\n\r\n        this.setState({followClicked: !this.state.followClicked})\r\n        \r\n    }\r\n\r\n    switchPFP(){\r\n        if(this.state.pfpCount == 0){\r\n            this.setState({currPFPplatform: TwitchLogo})\r\n            this.setState({currPFP: this.state.twitchPFP})\r\n            this.setState({pfpCount: 1})\r\n        }\r\n        else if(this.state.pfpCount == 1){\r\n            this.setState({currPFPplatform: YTLogo})\r\n            this.setState({currPFP: this.state.ytPFP})\r\n            this.setState({pfpCount: 0})\r\n        }\r\n        else{\r\n            this.setState({currPFPplatform: DefaultPFP})\r\n            this.setState({currPFP: DefaultPFP})\r\n            this.setState({pfpCount: 0})\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div style={rootStyle} className=\"profile-screen\" id=\"ProfileScreen\">\r\n\r\n\r\n                <Container style={headerComponent} >\r\n                    <Row style={{display: 'flex', justifyContent: 'center'}}>\r\n                        <Col style={{display: 'flex', flex: 1}}>\r\n                            <Avatar onClick={this.switchPFP.bind(this)} style={{width: 100, height: 100, marginLeft: 10}} src={this.state.currPFP} />\r\n                            <Avatar style={{width: 20, height: 20, marginLeft: 0}} src={this.state.currPFPplatform} />\r\n                        </Col>\r\n                        <Col style={{display: 'flex', flex: 5, flexDirection: \"column\", justifyContent: \"flex-start\", alignSelf: \"start\"}}>\r\n                            <Row style={{display: 'flex', flex: 1, justifyContent: \"flex-start\", alignSelf: \"start\", marginLeft: 20, marginTop: 10}}>\r\n                                <Button onClick={this.clickFollow.bind(this)} style={{ \r\n                                    shadowOpacity: 0.3,\r\n                                    shadowRadius: 3,\r\n                                    shadowOffset: {\r\n                                    height: 0,\r\n                                    width: 0\r\n                                    },\r\n                                    elevation: 1,\r\n                                    marginTop: '5%',\r\n                                    backgroundColor: this.state.followColor,\r\n                                    borderRadius: 5,\r\n                                    borderColor: \"#393939\",\r\n                                    borderWidth: 1,\r\n                                    width: 70,\r\n                                    height: 30,\r\n                                    color: \"white\",\r\n                                    justifyContent: \"center\",\r\n                                    alignItems: \"center\",\r\n                                    marginLeft: 10,\r\n                                    marginBottom: 35\r\n                                }}>{this.state.followText}</Button>\r\n\r\n                                <Modal\r\n                                    open={this.state.followClicked}\r\n                                    onClose={this.clickFollow.bind(this)}\r\n                                    aria-labelledby=\"simple-modal-title\"\r\n                                    aria-describedby=\"simple-modal-description\"\r\n                                >\r\n                                    \r\n                                    <FollowOverlay platform=\"exists\" userName={this.state.displayName}  myUID={this.state.uid} userCheck={this.state.userCheck} />\r\n                                    \r\n                                </Modal>\r\n                                           \r\n                                <Button onClick={this.goBack.bind(this)} style={button2}>Go Back</Button>\r\n                            </Row>\r\n                            <Row style={{display: 'flex', flex: 1, justifyContent: \"flex-start\",  alignSelf: \"start\", marginLeft: 22}}>\r\n                            <StarIcon onClick={this.clickedFav.bind(this)} style={{marginTop: 10, marginLeft: 10, marginRight: 10, color: this.state.favColor, maxWidth: '50px', maxHeight: '50px', minWidth: '50px', minHeight: '50px'}} />\r\n                                <h2 style={{ color: '#e8e6e3' }}>{this.state.displayName}</h2> \r\n                            </Row>\r\n                        </Col>\r\n                        <Col style={{display: 'flex', flex: 1, justifyContent: 'flex-end', marginRight: 10}}>\r\n                            {/* <Avatar style={{width: 50, height: 50}} src={TwitchLogo} /> */}\r\n                        </Col>\r\n                    </Row>\r\n                    <Row style={{display: 'flex', justifyContent: 'center', marginTop: 10, height: 90}}>\r\n                        <Col style={{display: 'flex', flex: 1, flexDirection: 'column', justifyContent: 'center', marginLeft: 50}}>\r\n                            <Row  style={{display: 'flex', flex: 1, flexDirection: 'row', height: 30}}>\r\n                                <h3 style={{ color: '#e8e6e3' }}>Social</h3> \r\n                            </Row>\r\n                            <Row style={{display: 'flex', flex: 1, flexDirection: 'row', alignItems: 'center'}}>\r\n                                <Avatar onClick={this.setRowTwitch.bind(this)} style={{width: 30, height: 30}} src={TwitchLogo} />\r\n                                <h3 style={{marginLeft: 5, color: '#e8e6e3'}}>{this.state.twitchName}</h3> \r\n                            </Row>\r\n                            <Row style={{display: 'flex', flex: 1, flexDirection: 'row', alignItems: 'center', height: 20}}>\r\n                                <Avatar onClick={this.setRowYT.bind(this)} style={{width: 30, height: 30}} src={YTLogo} />\r\n                                <h3 style={{marginLeft: 5, color: '#e8e6e3'}}>{this.state.youtubeName}</h3> \r\n                            </Row>\r\n                        </Col>\r\n                        <Col style={{display: 'flex', flex: 1, flexDirection: 'column', justifyContent: 'center', marginLeft: 50}}>\r\n                            <Row  style={{display: 'flex', flex: 1, flexDirection: 'row', height: 30}}>\r\n                                <h3 style={{ color: '#e8e6e3' }}>Social</h3> \r\n                            </Row>\r\n                            <Row style={{display: 'flex', flex: 1, flexDirection: 'row', alignItems: 'center'}}>\r\n                                <Avatar onClick={this.updateIg.bind(this)} style={{width: 30, height: 30}} src={IgLogo} />\r\n                                <h3 style={{marginLeft: 5, color: '#e8e6e3'}}>{this.state.igName}</h3> \r\n                            </Row>\r\n                            <Row style={{display: 'flex', flex: 1, flexDirection: 'row', alignItems: 'center', height: 20}}>\r\n                                <Avatar onClick={this.updateTwitter.bind(this)} style={{width: 30, height: 30}} src={TwitterLogo} />\r\n                                <h3 style={{marginLeft: 5, color: '#e8e6e3'}}>{this.state.twitterName}</h3> \r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n\r\n                <Container style={{zIndex: 0}}>\r\n\r\n                    {this.state.rows}\r\n\r\n                </Container>\r\n\r\n                <StickyFooter\r\n                    bottomThreshold={50}\r\n                    normalStyles={{\r\n                    backgroundColor: \"#999999\",\r\n                    padding: \"2rem\"\r\n                    }}\r\n                    stickyStyles={{\r\n                    backgroundColor: \"rgba(255,255,255,.8)\",\r\n                    padding: \"2rem\"\r\n                    }}\r\n                >\r\n\r\n                <Navbar style={{footer}} sticky='bottom' bg=\"dark\" variant=\"dark\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Nav.Link as={Link} \r\n                            to={{pathname: \"/FeedScreen\",\r\n                                state:\r\n                                    this.props.location.state.pastState\r\n                            }}\r\n                        >\r\n                            <HomeIcon style={{marginLeft: 100, marginRight: 40, color: 'black', maxWidth: '50px', maxHeight: '50px', minWidth: '50px', minHeight: '50px'}} />\r\n                        </Nav.Link>\r\n                        <Nav.Link as={Link} \r\n                            to={{pathname: \"/FeedScreen\",\r\n                                state:\r\n                                    this.props.location.state.pastState\r\n                            }}\r\n                        >\r\n                            <StarIcon style={{marginLeft: 40, marginRight: 40, color: 'black', maxWidth: '50px', maxHeight: '50px', minWidth: '50px', minHeight: '50px'}} />\r\n                        </Nav.Link>\r\n                        <Nav.Link as={Link} \r\n                            to={{pathname: \"/ProfileScreen\",\r\n                                state:\r\n                                    this.props.location.state.pastState\r\n                            }}\r\n                        >\r\n                            <PersonIcon style={{marginLeft: 40, marginRight: 40, color: 'black', maxWidth: '50px', maxHeight: '50px', minWidth: '50px', minHeight: '50px'}} />\r\n                        </Nav.Link>\r\n                        <Nav.Link as={Link} \r\n                            to={{pathname: \"/SearchScreen\",\r\n                                state:\r\n                                    this.props.location.state.pastState\r\n                            }}\r\n                        >\r\n                            <SearchIcon style={{marginLeft: 40, marginRight: 40, color: 'black', maxWidth: '50px', maxHeight: '50px', minWidth: '50px', minHeight: '50px'}} />\r\n                        </Nav.Link>\r\n                        <Nav.Link as={Link} \r\n                            to={{pathname: \"/InfoScreen\",\r\n                                state:\r\n                                    this.props.location.state\r\n                            }}\r\n                        >\r\n                            <InfoIcon style={{marginLeft: 40, marginRight: 100, color: 'black', maxWidth: '50px', maxHeight: '50px', minWidth: '50px', minHeight: '50px'}} />\r\n                        </Nav.Link>\r\n                    </Nav>\r\n                </Navbar>\r\n\r\n                </StickyFooter>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst myscrollstyle = {\r\n    height: '100vh',\r\n    width: '400px',\r\n    marginReft: 'auto',\r\n    marginRight: 'auto',\r\n    overflowY: 'scroll'\r\n}\r\n\r\nconst footer = {\r\n    clear: 'both',\r\n    position: 'relative',\r\n    marginTop: '-200px',\r\n}\r\n\r\nconst tweetComponent = {\r\n    backgroundColor: \"#ACACAC\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"stretch\",\r\n    borderRadius: 10,\r\n    borderWidth: 1,\r\n    borderColor: '#fff',\r\n    //fluid: true,\r\n    //flex: 1,\r\n    marginLeft: 50,\r\n    marginRight: 50,\r\n    paddingTop: 20,\r\n    paddingBottom: 20,\r\n    marginBottom: 20,\r\n    alignSelf: \"center\",\r\n    width: 800\r\n}\r\n\r\nconst headerComponent = {\r\n    //backgroundColor: \"#ACACAC\",\r\n    backgroundColor: \"#474d50\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    borderRadius: 10,\r\n    borderWidth: 1,\r\n    borderColor: '#fff',\r\n    fluid: true,\r\n    flex: 1,\r\n    marginLeft: 50,\r\n    marginRight: 50,\r\n    paddingTop: 20,\r\n    paddingBottom: 20,\r\n    marginBottom: 20,\r\n    alignSelf: \"center\",\r\n    width: 800,\r\n    position: '-webkit-sticky',\r\n    position: 'sticky',\r\n    top: 0,\r\n    zIndex: 1000\r\n}\r\n\r\nconst twitchComponent = {\r\n    backgroundColor: \"#ACACAC\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    borderRadius: 10,\r\n    borderWidth: 1,\r\n    borderColor: '#fff',\r\n    fluid: true,\r\n    flex: 1,\r\n    marginLeft: 50,\r\n    marginRight: 50,\r\n    paddingTop: 20,\r\n    paddingBottom: 20,\r\n    marginBottom: 20,\r\n    alightSelf: \"center\",\r\n    width: 800\r\n}\r\n\r\nconst rootStyle = {\r\n    height: \"100hv\",\r\n    //backgroundColor: \"#313131\",\r\n    backgroundColor: \"#25282a\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    paddingTop: 30,\r\n    paddingBottom: 30,\r\n    display: 'flex',\r\n    flexDirection: \"column\"\r\n}\r\n\r\nconst button = {\r\n    shadowOpacity: 0.3,\r\n    shadowRadius: 3,\r\n    shadowOffset: {\r\n    height: 0,\r\n    width: 0\r\n    },\r\n    elevation: 1,\r\n    marginTop: '5%',\r\n    backgroundColor: \"#401058\",\r\n    borderRadius: 5,\r\n    borderColor: \"#393939\",\r\n    borderWidth: 1,\r\n    width: 70,\r\n    height: 30,\r\n    color: \"white\",\r\n    justifyContent: \"left\"\r\n}\r\n\r\nconst button2 = {\r\n    shadowOpacity: 0.3,\r\n    shadowRadius: 3,\r\n    shadowOffset: {\r\n    height: 0,\r\n    width: 0\r\n    },\r\n    elevation: 1,\r\n    marginTop: '5%',\r\n    backgroundColor: \"#401058\",\r\n    borderRadius: 5,\r\n    borderColor: \"#393939\",\r\n    borderWidth: 1,\r\n    width: 70,\r\n    height: 30,\r\n    color: \"white\",\r\n    marginLeft: 10,\r\n    justifyContent: \"flex-end\"\r\n}\r\n\r\nexport default withRouter(OthersProfile);","C:\\Users\\Hugh\\Desktop\\create react app test\\thesocialmedium\\src\\screens\\InfoScreen.js",["440","441","442","443","444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459"],"import React from 'react';\r\nimport { withRouter, Link } from 'react-router-dom';\r\nimport axios from \"axios\";\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form'\r\n\r\nimport Modal from 'react-bootstrap/Modal'\r\n\r\nimport { List, Image, Button } from 'semantic-ui-react'\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\nimport firebase from \"firebase\";\r\nimport 'firebase/database';\r\n\r\nimport Cookies from 'universal-cookie';\r\n\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\n\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Nav from 'react-bootstrap/Nav'\r\n\r\nimport StickyFooter from 'react-sticky-footer';\r\n\r\nclass InfoScreen extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        console.log(props.location.state)\r\n\r\n        this.state = {\r\n            email: \"\",\r\n            uid: props.location.state.myUID,\r\n            password: \"\",\r\n            errorMessage: null\r\n        };\r\n        console.log(\"in feed screen\")\r\n\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div style={rootStyle} className=\"info-screen\" id=\"infoscreen\">\r\n\r\n\r\n                <Container style={{zIndex: 0}}>\r\n                    <Container  style={tweetComponent}>\r\n                        <Row style={{display: 'flex', justifyContent: 'center'}}>\r\n                            <h1 style={{color: '#e8e6e3'}} className=\"display-1 font-weight-bolder\">Information</h1> \r\n                        </Row>\r\n                        <Row style={{display: 'flex', justifyContent: 'center'}}>\r\n                            <h2 style={{color: '#e8e6e3'}} className=\"display-1 font-weight-bolder\">Thank you for using The Social Medium.</h2>\r\n                        </Row>\r\n                        <Row style={{display: 'flex', justifyContent: 'center'}}>\r\n                            <h2 style={{color: '#e8e6e3'}} className=\"display-1 font-weight-bolder\">Please report any issues you may have came across</h2>\r\n                        </Row>\r\n                        <Row style={{display: 'flex', justifyContent: 'center'}}>\r\n                            <h2 style={{color: '#e8e6e3'}} className=\"display-1 font-weight-bolder\">or any suggestions you have.</h2>\r\n                        </Row>\r\n                        <Row style={{display: 'flex', justifyContent: 'center'}}>\r\n                            <h2 style={{color: '#e8e6e3'}} className=\"display-1 font-weight-bolder\">Twitter (preferred): @wheezyoutcast</h2>   \r\n                        </Row>\r\n                        <Row style={{display: 'flex', justifyContent: 'center'}}>\r\n                            <h2 style={{color: '#e8e6e3'}} className=\"display-1 font-weight-bolder\">Instagram: @ex.wheezy</h2> \r\n                        </Row>\r\n                        <Row style={{display: 'flex', justifyContent: 'center'}}>\r\n                            <h1 style={{color: '#e8e6e3'}} className=\"display-1 font-weight-bolder\">Coming Soon</h1> \r\n                        </Row>\r\n                        <Row style={{display: 'flex', justifyContent: 'center'}}>\r\n                            <h2 style={{color: '#e8e6e3'}} className=\"display-1 font-weight-bolder\">Currently instagram and twitter are not fully functioning.</h2>\r\n                        </Row>\r\n                        <Row style={{display: 'flex', justifyContent: 'center'}}>\r\n                            <h2 style={{color: '#e8e6e3'}} className=\"display-1 font-weight-bolder\">We are hoping to bring this functionality soon.</h2>\r\n                        </Row>\r\n                        <Row style={{display: 'flex', justifyContent: 'center'}}>\r\n                            <h2 style={{color: '#e8e6e3'}} className=\"display-1 font-weight-bolder\">Ability to unfollow coming soon.</h2>\r\n                        </Row>\r\n                    </Container>\r\n                </Container>\r\n                \r\n                \r\n                <StickyFooter\r\n                    bottomThreshold={50}\r\n                    normalStyles={{\r\n                    backgroundColor: \"#999999\",\r\n                    padding: \"2rem\"\r\n                    }}\r\n                    stickyStyles={{\r\n                    backgroundColor: \"rgba(255,255,255,.8)\",\r\n                    padding: \"2rem\"\r\n                    }}\r\n                >\r\n\r\n                <Navbar style={{footer}} sticky='bottom' bg=\"dark\" variant=\"dark\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Nav.Link as={Link} \r\n                            to={{pathname: \"/FeedScreen\",\r\n                                state:\r\n                                    this.props.location.state\r\n                            }}\r\n                        >\r\n                            <HomeIcon style={{marginLeft: 100, marginRight: 40, color: 'black', maxWidth: '50px', maxHeight: '50px', minWidth: '50px', minHeight: '50px'}} />\r\n                        </Nav.Link>\r\n                        <Nav.Link as={Link} \r\n                            to={{pathname: \"/FeedScreen\",\r\n                                state:\r\n                                    this.props.location.state\r\n                            }}\r\n                        >\r\n                            <StarIcon style={{marginLeft: 40, marginRight: 40, color: 'black', maxWidth: '50px', maxHeight: '50px', minWidth: '50px', minHeight: '50px'}} />\r\n                        </Nav.Link>\r\n                        <Nav.Link as={Link} \r\n                            to={{pathname: \"/ProfileScreen\",\r\n                                state:\r\n                                    this.props.location.state\r\n                            }}\r\n                        >\r\n                            <PersonIcon style={{marginLeft: 40, marginRight: 40, color: 'black', maxWidth: '50px', maxHeight: '50px', minWidth: '50px', minHeight: '50px'}} />\r\n                        </Nav.Link>\r\n                        <Nav.Link as={Link} \r\n                            to={{pathname: \"/SearchScreen\",\r\n                                state:\r\n                                    this.props.location.state\r\n                            }}\r\n                        >\r\n                            <SearchIcon style={{marginLeft: 40, marginRight: 40, color: 'black', maxWidth: '50px', maxHeight: '50px', minWidth: '50px', minHeight: '50px'}} />\r\n                        </Nav.Link>\r\n                        <Nav.Link as={Link} \r\n                            to={{pathname: \"/InfoScreen\",\r\n                                state:\r\n                                    this.props.location.state\r\n                            }}\r\n                        >\r\n                            <InfoIcon style={{marginLeft: 40, marginRight: 100, color: 'black', maxWidth: '50px', maxHeight: '50px', minWidth: '50px', minHeight: '50px'}} />\r\n                        </Nav.Link>\r\n                    </Nav>\r\n                </Navbar>\r\n\r\n                </StickyFooter>\r\n  \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst headerComponent = {\r\n    //backgroundColor: \"#ACACAC\",\r\n    backgroundColor: \"#474d50\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    borderRadius: 10,\r\n    borderWidth: 1,\r\n    borderColor: '#fff',\r\n    fluid: true,\r\n    flex: 1,\r\n    marginLeft: 50,\r\n    marginRight: 50,\r\n    paddingTop: 20,\r\n    paddingBottom: 20,\r\n    marginBottom: 20,\r\n    alignSelf: \"center\",\r\n    width: 800,\r\n    position: '-webkit-sticky',\r\n    position: 'sticky',\r\n    top: 0,\r\n    zIndex: 1000\r\n}\r\n\r\nconst footer = {\r\n    clear: 'both',\r\n    position: 'relative',\r\n    height: '200px',\r\n    marginTop: '-200px'\r\n}\r\n\r\nconst tweetComponent = {\r\n    //backgroundColor: \"#ACACAC\",\r\n    backgroundColor: \"#474d50\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"stretch\",\r\n    borderRadius: 10,\r\n    borderWidth: 1,\r\n    borderColor: '#fff',\r\n    //fluid: true,\r\n    //flex: 1,\r\n    marginLeft: 50,\r\n    marginRight: 50,\r\n    paddingTop: 20,\r\n    paddingBottom: 20,\r\n    marginBottom: 20,\r\n    alignSelf: \"center\",\r\n    width: 800\r\n}\r\n\r\nconst tweetComponent2 = {\r\n    backgroundColor: \"#ACACAC\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"stretch\",\r\n    borderRadius: 10,\r\n    borderWidth: 1,\r\n    borderColor: '#fff',\r\n    //fluid: true,\r\n    //flex: 1,\r\n    marginLeft: 50,\r\n    marginRight: 50,\r\n    paddingTop: 20,\r\n    paddingBottom: 20,\r\n    marginBottom: 20,\r\n    alignSelf: \"center\",\r\n    width: 800\r\n}\r\n\r\nconst twitchComponent = {\r\n    backgroundColor: \"#ACACAC\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    borderRadius: 10,\r\n    borderWidth: 1,\r\n    borderColor: '#fff',\r\n    fluid: true,\r\n    flex: 1,\r\n    marginLeft: 50,\r\n    marginRight: 50,\r\n    paddingTop: 20,\r\n    paddingBottom: 20,\r\n    marginBottom: 20,\r\n    alightSelf: \"center\",\r\n    width: 800\r\n}\r\n\r\nconst container = {\r\n    marginHorizontal: 10,\r\n    marginVertical: 10,\r\n    paddingLeft: 50,\r\n    paddingRight: 50,\r\n    backgroundColor: \"#ACACAC\",\r\n    width: \"90%\",\r\n    flex: 1,\r\n    display: 'flex',\r\n    justifyContent: \"center\",\r\n    borderRadius: 10,\r\n    borderWidth: 1,\r\n    borderColor: '#fff'\r\n}\r\n\r\nconst rootStyle = {\r\n    height: \"100%\",\r\n    //backgroundColor: \"#313131\",\r\n    backgroundColor: \"#25282a\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    paddingTop: 30,\r\n    paddingBottom: 30,\r\n    display: 'flex',\r\n    flexDirection: \"column\"\r\n}\r\nconst rootStyle2 = {\r\n    height: \"100%\",\r\n    backgroundColor: \"#313131\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    paddingTop: 30,\r\n    paddingBottom: 30,\r\n    display: 'flex',\r\n    flexDirection: \"column\"\r\n}\r\n\r\nconst mainContainer = {\r\n    backgroundColor: \"#313131\",\r\n    height: \"100%\",\r\n    //fluid: true\r\n}\r\nconst button = {\r\n    shadowOpacity: 0.3,\r\n    shadowRadius: 3,\r\n    shadowOffset: {\r\n    height: 0,\r\n    width: 0\r\n    },\r\n    elevation: 1,\r\n    marginTop: '5%',\r\n    backgroundColor: \"#401058\",\r\n    borderRadius: 5,\r\n    borderColor: \"#393939\",\r\n    borderWidth: 1,\r\n    width: 70,\r\n    height: 30,\r\n    color: \"white\",\r\n    justifyContent: \"left\"\r\n}\r\nconst textStyle = {\r\n    color: \"black\"\r\n}\r\n\r\nconst textStyle2 = {\r\n    color: \"white\",\r\n    alightItems: \"center\"\r\n}\r\n\r\nexport default withRouter(InfoScreen);",{"ruleId":"460","replacedBy":"461"},{"ruleId":"462","replacedBy":"463"},{"ruleId":"464","severity":1,"message":"465","line":3,"column":31,"nodeType":"466","messageId":"467","endLine":3,"endColumn":35},{"ruleId":"464","severity":1,"message":"468","line":40,"column":11,"nodeType":"466","messageId":"467","endLine":40,"endColumn":17},{"ruleId":"464","severity":1,"message":"469","line":4,"column":8,"nodeType":"466","messageId":"467","endLine":4,"endColumn":13},{"ruleId":"464","severity":1,"message":"470","line":6,"column":10,"nodeType":"466","messageId":"467","endLine":6,"endColumn":21},{"ruleId":"464","severity":1,"message":"471","line":6,"column":23,"nodeType":"466","messageId":"467","endLine":6,"endColumn":33},{"ruleId":"464","severity":1,"message":"472","line":6,"column":35,"nodeType":"466","messageId":"467","endLine":6,"endColumn":45},{"ruleId":"464","severity":1,"message":"473","line":6,"column":47,"nodeType":"466","messageId":"467","endLine":6,"endColumn":59},{"ruleId":"464","severity":1,"message":"474","line":8,"column":8,"nodeType":"466","messageId":"467","endLine":8,"endColumn":15},{"ruleId":"464","severity":1,"message":"475","line":10,"column":10,"nodeType":"466","messageId":"467","endLine":10,"endColumn":18},{"ruleId":"464","severity":1,"message":"476","line":10,"column":20,"nodeType":"466","messageId":"467","endLine":10,"endColumn":25},{"ruleId":"464","severity":1,"message":"477","line":12,"column":8,"nodeType":"466","messageId":"467","endLine":12,"endColumn":22},{"ruleId":"464","severity":1,"message":"478","line":27,"column":8,"nodeType":"466","messageId":"467","endLine":27,"endColumn":18},{"ruleId":"464","severity":1,"message":"479","line":31,"column":8,"nodeType":"466","messageId":"467","endLine":31,"endColumn":20},{"ruleId":"464","severity":1,"message":"480","line":33,"column":8,"nodeType":"466","messageId":"467","endLine":33,"endColumn":22},{"ruleId":"464","severity":1,"message":"481","line":35,"column":10,"nodeType":"466","messageId":"467","endLine":35,"endColumn":24},{"ruleId":"464","severity":1,"message":"482","line":99,"column":15,"nodeType":"466","messageId":"467","endLine":99,"endColumn":21},{"ruleId":"483","severity":1,"message":"484","line":64,"column":32,"nodeType":"485","messageId":"486","endLine":64,"endColumn":34},{"ruleId":"483","severity":1,"message":"484","line":66,"column":46,"nodeType":"485","messageId":"486","endLine":66,"endColumn":48},{"ruleId":"483","severity":1,"message":"484","line":77,"column":24,"nodeType":"485","messageId":"486","endLine":77,"endColumn":26},{"ruleId":"464","severity":1,"message":"487","line":15,"column":10,"nodeType":"466","messageId":"467","endLine":15,"endColumn":25},{"ruleId":"464","severity":1,"message":"488","line":33,"column":15,"nodeType":"466","messageId":"467","endLine":33,"endColumn":26},{"ruleId":"483","severity":1,"message":"484","line":69,"column":24,"nodeType":"485","messageId":"486","endLine":69,"endColumn":26},{"ruleId":"483","severity":1,"message":"484","line":71,"column":45,"nodeType":"485","messageId":"486","endLine":71,"endColumn":47},{"ruleId":"483","severity":1,"message":"484","line":88,"column":22,"nodeType":"485","messageId":"486","endLine":88,"endColumn":24},{"ruleId":"464","severity":1,"message":"469","line":3,"column":8,"nodeType":"466","messageId":"467","endLine":3,"endColumn":13},{"ruleId":"464","severity":1,"message":"489","line":8,"column":8,"nodeType":"466","messageId":"467","endLine":8,"endColumn":12},{"ruleId":"464","severity":1,"message":"490","line":10,"column":8,"nodeType":"466","messageId":"467","endLine":10,"endColumn":13},{"ruleId":"464","severity":1,"message":"491","line":12,"column":10,"nodeType":"466","messageId":"467","endLine":12,"endColumn":14},{"ruleId":"464","severity":1,"message":"492","line":12,"column":16,"nodeType":"466","messageId":"467","endLine":12,"endColumn":21},{"ruleId":"464","severity":1,"message":"493","line":12,"column":23,"nodeType":"466","messageId":"467","endLine":12,"endColumn":29},{"ruleId":"464","severity":1,"message":"494","line":18,"column":8,"nodeType":"466","messageId":"467","endLine":18,"endColumn":15},{"ruleId":"464","severity":1,"message":"470","line":21,"column":10,"nodeType":"466","messageId":"467","endLine":21,"endColumn":21},{"ruleId":"464","severity":1,"message":"471","line":21,"column":23,"nodeType":"466","messageId":"467","endLine":21,"endColumn":33},{"ruleId":"464","severity":1,"message":"472","line":21,"column":35,"nodeType":"466","messageId":"467","endLine":21,"endColumn":45},{"ruleId":"464","severity":1,"message":"473","line":21,"column":47,"nodeType":"466","messageId":"467","endLine":21,"endColumn":59},{"ruleId":"464","severity":1,"message":"474","line":23,"column":8,"nodeType":"466","messageId":"467","endLine":23,"endColumn":15},{"ruleId":"464","severity":1,"message":"475","line":25,"column":10,"nodeType":"466","messageId":"467","endLine":25,"endColumn":18},{"ruleId":"464","severity":1,"message":"476","line":25,"column":20,"nodeType":"466","messageId":"467","endLine":25,"endColumn":25},{"ruleId":"464","severity":1,"message":"495","line":26,"column":10,"nodeType":"466","messageId":"467","endLine":26,"endColumn":30},{"ruleId":"464","severity":1,"message":"496","line":26,"column":32,"nodeType":"466","messageId":"467","endLine":26,"endColumn":50},{"ruleId":"464","severity":1,"message":"497","line":26,"column":52,"nodeType":"466","messageId":"467","endLine":26,"endColumn":69},{"ruleId":"464","severity":1,"message":"481","line":28,"column":10,"nodeType":"466","messageId":"467","endLine":28,"endColumn":24},{"ruleId":"464","severity":1,"message":"498","line":35,"column":8,"nodeType":"466","messageId":"467","endLine":35,"endColumn":26},{"ruleId":"464","severity":1,"message":"499","line":38,"column":8,"nodeType":"466","messageId":"467","endLine":38,"endColumn":18},{"ruleId":"464","severity":1,"message":"500","line":46,"column":8,"nodeType":"466","messageId":"467","endLine":46,"endColumn":22},{"ruleId":"464","severity":1,"message":"501","line":47,"column":8,"nodeType":"466","messageId":"467","endLine":47,"endColumn":18},{"ruleId":"464","severity":1,"message":"502","line":48,"column":8,"nodeType":"466","messageId":"467","endLine":48,"endColumn":16},{"ruleId":"464","severity":1,"message":"503","line":49,"column":8,"nodeType":"466","messageId":"467","endLine":49,"endColumn":20},{"ruleId":"464","severity":1,"message":"504","line":50,"column":8,"nodeType":"466","messageId":"467","endLine":50,"endColumn":18},{"ruleId":"464","severity":1,"message":"505","line":61,"column":8,"nodeType":"466","messageId":"467","endLine":61,"endColumn":20},{"ruleId":"464","severity":1,"message":"506","line":62,"column":10,"nodeType":"466","messageId":"467","endLine":62,"endColumn":20},{"ruleId":"464","severity":1,"message":"507","line":63,"column":8,"nodeType":"466","messageId":"467","endLine":63,"endColumn":23},{"ruleId":"464","severity":1,"message":"508","line":161,"column":15,"nodeType":"466","messageId":"467","endLine":161,"endColumn":25},{"ruleId":"464","severity":1,"message":"509","line":165,"column":15,"nodeType":"466","messageId":"467","endLine":165,"endColumn":25},{"ruleId":"464","severity":1,"message":"510","line":169,"column":15,"nodeType":"466","messageId":"467","endLine":169,"endColumn":24},{"ruleId":"483","severity":1,"message":"484","line":454,"column":38,"nodeType":"485","messageId":"486","endLine":454,"endColumn":40},{"ruleId":"483","severity":1,"message":"484","line":457,"column":43,"nodeType":"485","messageId":"486","endLine":457,"endColumn":45},{"ruleId":"483","severity":1,"message":"484","line":460,"column":43,"nodeType":"485","messageId":"486","endLine":460,"endColumn":45},{"ruleId":"483","severity":1,"message":"484","line":463,"column":43,"nodeType":"485","messageId":"486","endLine":463,"endColumn":45},{"ruleId":"511","severity":1,"message":"512","line":602,"column":5,"nodeType":"513","messageId":"486","endLine":602,"endColumn":13},{"ruleId":"464","severity":1,"message":"514","line":615,"column":7,"nodeType":"466","messageId":"467","endLine":615,"endColumn":21},{"ruleId":"464","severity":1,"message":"515","line":633,"column":7,"nodeType":"466","messageId":"467","endLine":633,"endColumn":22},{"ruleId":"464","severity":1,"message":"516","line":651,"column":7,"nodeType":"466","messageId":"467","endLine":651,"endColumn":22},{"ruleId":"464","severity":1,"message":"517","line":669,"column":7,"nodeType":"466","messageId":"467","endLine":669,"endColumn":16},{"ruleId":"464","severity":1,"message":"518","line":694,"column":7,"nodeType":"466","messageId":"467","endLine":694,"endColumn":17},{"ruleId":"464","severity":1,"message":"519","line":705,"column":7,"nodeType":"466","messageId":"467","endLine":705,"endColumn":20},{"ruleId":"464","severity":1,"message":"520","line":710,"column":7,"nodeType":"466","messageId":"467","endLine":710,"endColumn":13},{"ruleId":"464","severity":1,"message":"521","line":728,"column":7,"nodeType":"466","messageId":"467","endLine":728,"endColumn":16},{"ruleId":"464","severity":1,"message":"522","line":732,"column":7,"nodeType":"466","messageId":"467","endLine":732,"endColumn":17},{"ruleId":"464","severity":1,"message":"471","line":11,"column":23,"nodeType":"466","messageId":"467","endLine":11,"endColumn":33},{"ruleId":"464","severity":1,"message":"472","line":11,"column":35,"nodeType":"466","messageId":"467","endLine":11,"endColumn":45},{"ruleId":"464","severity":1,"message":"473","line":11,"column":47,"nodeType":"466","messageId":"467","endLine":11,"endColumn":59},{"ruleId":"464","severity":1,"message":"499","line":13,"column":8,"nodeType":"466","messageId":"467","endLine":13,"endColumn":18},{"ruleId":"464","severity":1,"message":"523","line":16,"column":8,"nodeType":"466","messageId":"467","endLine":16,"endColumn":14},{"ruleId":"464","severity":1,"message":"524","line":17,"column":8,"nodeType":"466","messageId":"467","endLine":17,"endColumn":19},{"ruleId":"464","severity":1,"message":"525","line":18,"column":8,"nodeType":"466","messageId":"467","endLine":18,"endColumn":14},{"ruleId":"464","severity":1,"message":"526","line":19,"column":8,"nodeType":"466","messageId":"467","endLine":19,"endColumn":15},{"ruleId":"464","severity":1,"message":"491","line":21,"column":10,"nodeType":"466","messageId":"467","endLine":21,"endColumn":14},{"ruleId":"483","severity":1,"message":"484","line":41,"column":35,"nodeType":"485","messageId":"486","endLine":41,"endColumn":37},{"ruleId":"464","severity":1,"message":"527","line":166,"column":7,"nodeType":"466","messageId":"467","endLine":166,"endColumn":16},{"ruleId":"464","severity":1,"message":"528","line":196,"column":7,"nodeType":"466","messageId":"467","endLine":196,"endColumn":14},{"ruleId":"464","severity":1,"message":"529","line":4,"column":10,"nodeType":"466","messageId":"467","endLine":4,"endColumn":15},{"ruleId":"464","severity":1,"message":"530","line":4,"column":17,"nodeType":"466","messageId":"467","endLine":4,"endColumn":23},{"ruleId":"464","severity":1,"message":"531","line":4,"column":25,"nodeType":"466","messageId":"467","endLine":4,"endColumn":33},{"ruleId":"464","severity":1,"message":"532","line":5,"column":10,"nodeType":"466","messageId":"467","endLine":5,"endColumn":20},{"ruleId":"464","severity":1,"message":"533","line":5,"column":22,"nodeType":"466","messageId":"467","endLine":5,"endColumn":28},{"ruleId":"464","severity":1,"message":"534","line":7,"column":8,"nodeType":"466","messageId":"467","endLine":7,"endColumn":17},{"ruleId":"464","severity":1,"message":"493","line":9,"column":8,"nodeType":"466","messageId":"467","endLine":9,"endColumn":14},{"ruleId":"464","severity":1,"message":"535","line":14,"column":8,"nodeType":"466","messageId":"467","endLine":14,"endColumn":18},{"ruleId":"464","severity":1,"message":"519","line":58,"column":7,"nodeType":"466","messageId":"467","endLine":58,"endColumn":20},{"ruleId":"464","severity":1,"message":"520","line":63,"column":7,"nodeType":"466","messageId":"467","endLine":63,"endColumn":13},{"ruleId":"464","severity":1,"message":"521","line":78,"column":7,"nodeType":"466","messageId":"467","endLine":78,"endColumn":16},{"ruleId":"464","severity":1,"message":"536","line":81,"column":7,"nodeType":"466","messageId":"467","endLine":81,"endColumn":12},{"ruleId":"460","replacedBy":"537"},{"ruleId":"462","replacedBy":"538"},{"ruleId":"464","severity":1,"message":"469","line":3,"column":8,"nodeType":"466","messageId":"467","endLine":3,"endColumn":13},{"ruleId":"464","severity":1,"message":"489","line":8,"column":8,"nodeType":"466","messageId":"467","endLine":8,"endColumn":12},{"ruleId":"464","severity":1,"message":"491","line":10,"column":10,"nodeType":"466","messageId":"467","endLine":10,"endColumn":14},{"ruleId":"464","severity":1,"message":"492","line":10,"column":16,"nodeType":"466","messageId":"467","endLine":10,"endColumn":21},{"ruleId":"464","severity":1,"message":"494","line":16,"column":8,"nodeType":"466","messageId":"467","endLine":16,"endColumn":15},{"ruleId":"464","severity":1,"message":"539","line":36,"column":8,"nodeType":"466","messageId":"467","endLine":36,"endColumn":27},{"ruleId":"464","severity":1,"message":"540","line":38,"column":10,"nodeType":"466","messageId":"467","endLine":38,"endColumn":25},{"ruleId":"464","severity":1,"message":"541","line":38,"column":27,"nodeType":"466","messageId":"467","endLine":38,"endColumn":33},{"ruleId":"464","severity":1,"message":"500","line":41,"column":8,"nodeType":"466","messageId":"467","endLine":41,"endColumn":22},{"ruleId":"464","severity":1,"message":"501","line":42,"column":8,"nodeType":"466","messageId":"467","endLine":42,"endColumn":18},{"ruleId":"464","severity":1,"message":"502","line":43,"column":8,"nodeType":"466","messageId":"467","endLine":43,"endColumn":16},{"ruleId":"464","severity":1,"message":"503","line":44,"column":8,"nodeType":"466","messageId":"467","endLine":44,"endColumn":20},{"ruleId":"464","severity":1,"message":"504","line":45,"column":8,"nodeType":"466","messageId":"467","endLine":45,"endColumn":18},{"ruleId":"464","severity":1,"message":"470","line":47,"column":10,"nodeType":"466","messageId":"467","endLine":47,"endColumn":21},{"ruleId":"464","severity":1,"message":"471","line":47,"column":23,"nodeType":"466","messageId":"467","endLine":47,"endColumn":33},{"ruleId":"464","severity":1,"message":"472","line":47,"column":35,"nodeType":"466","messageId":"467","endLine":47,"endColumn":45},{"ruleId":"464","severity":1,"message":"473","line":47,"column":47,"nodeType":"466","messageId":"467","endLine":47,"endColumn":59},{"ruleId":"464","severity":1,"message":"474","line":49,"column":8,"nodeType":"466","messageId":"467","endLine":49,"endColumn":15},{"ruleId":"464","severity":1,"message":"475","line":51,"column":10,"nodeType":"466","messageId":"467","endLine":51,"endColumn":18},{"ruleId":"464","severity":1,"message":"476","line":51,"column":20,"nodeType":"466","messageId":"467","endLine":51,"endColumn":25},{"ruleId":"464","severity":1,"message":"495","line":52,"column":10,"nodeType":"466","messageId":"467","endLine":52,"endColumn":30},{"ruleId":"464","severity":1,"message":"496","line":52,"column":32,"nodeType":"466","messageId":"467","endLine":52,"endColumn":50},{"ruleId":"464","severity":1,"message":"497","line":52,"column":52,"nodeType":"466","messageId":"467","endLine":52,"endColumn":69},{"ruleId":"464","severity":1,"message":"481","line":54,"column":10,"nodeType":"466","messageId":"467","endLine":54,"endColumn":24},{"ruleId":"483","severity":1,"message":"484","line":148,"column":32,"nodeType":"485","messageId":"486","endLine":148,"endColumn":34},{"ruleId":"483","severity":1,"message":"484","line":153,"column":37,"nodeType":"485","messageId":"486","endLine":153,"endColumn":39},{"ruleId":"464","severity":1,"message":"542","line":288,"column":7,"nodeType":"466","messageId":"467","endLine":288,"endColumn":20},{"ruleId":"464","severity":1,"message":"514","line":302,"column":7,"nodeType":"466","messageId":"467","endLine":302,"endColumn":21},{"ruleId":"511","severity":1,"message":"512","line":338,"column":5,"nodeType":"513","messageId":"486","endLine":338,"endColumn":13},{"ruleId":"464","severity":1,"message":"516","line":343,"column":7,"nodeType":"466","messageId":"467","endLine":343,"endColumn":22},{"ruleId":"464","severity":1,"message":"531","line":2,"column":9,"nodeType":"466","messageId":"467","endLine":2,"endColumn":17},{"ruleId":"464","severity":1,"message":"487","line":16,"column":10,"nodeType":"466","messageId":"467","endLine":16,"endColumn":25},{"ruleId":"511","severity":1,"message":"543","line":77,"column":13,"nodeType":"513","messageId":"486","endLine":77,"endColumn":24},{"ruleId":"464","severity":1,"message":"544","line":166,"column":17,"nodeType":"466","messageId":"467","endLine":166,"endColumn":29},{"ruleId":"545","severity":1,"message":"546","line":238,"column":21,"nodeType":"466","messageId":"547","endLine":238,"endColumn":29},{"ruleId":"545","severity":1,"message":"548","line":242,"column":25,"nodeType":"466","messageId":"547","endLine":242,"endColumn":26},{"ruleId":"545","severity":1,"message":"548","line":253,"column":25,"nodeType":"466","messageId":"547","endLine":253,"endColumn":26},{"ruleId":"464","severity":1,"message":"549","line":278,"column":31,"nodeType":"466","messageId":"467","endLine":278,"endColumn":42},{"ruleId":"464","severity":1,"message":"550","line":306,"column":31,"nodeType":"466","messageId":"467","endLine":306,"endColumn":48},{"ruleId":"464","severity":1,"message":"551","line":307,"column":31,"nodeType":"466","messageId":"467","endLine":307,"endColumn":48},{"ruleId":"483","severity":1,"message":"552","line":556,"column":25,"nodeType":"485","messageId":"486","endLine":556,"endColumn":27},{"ruleId":"464","severity":1,"message":"553","line":587,"column":13,"nodeType":"466","messageId":"467","endLine":587,"endColumn":31},{"ruleId":"464","severity":1,"message":"554","line":588,"column":13,"nodeType":"466","messageId":"467","endLine":588,"endColumn":29},{"ruleId":"483","severity":1,"message":"484","line":657,"column":28,"nodeType":"485","messageId":"486","endLine":657,"endColumn":30},{"ruleId":"464","severity":1,"message":"555","line":666,"column":23,"nodeType":"466","messageId":"467","endLine":666,"endColumn":33},{"ruleId":"483","severity":1,"message":"484","line":688,"column":34,"nodeType":"485","messageId":"486","endLine":688,"endColumn":36},{"ruleId":"464","severity":1,"message":"556","line":727,"column":19,"nodeType":"466","messageId":"467","endLine":727,"endColumn":28},{"ruleId":"464","severity":1,"message":"557","line":782,"column":23,"nodeType":"466","messageId":"467","endLine":782,"endColumn":29},{"ruleId":"483","severity":1,"message":"484","line":811,"column":27,"nodeType":"485","messageId":"486","endLine":811,"endColumn":29},{"ruleId":"464","severity":1,"message":"556","line":843,"column":26,"nodeType":"466","messageId":"467","endLine":843,"endColumn":35},{"ruleId":"464","severity":1,"message":"558","line":868,"column":27,"nodeType":"466","messageId":"467","endLine":868,"endColumn":35},{"ruleId":"464","severity":1,"message":"559","line":966,"column":25,"nodeType":"466","messageId":"467","endLine":966,"endColumn":44},{"ruleId":"464","severity":1,"message":"560","line":1025,"column":27,"nodeType":"466","messageId":"467","endLine":1025,"endColumn":39},{"ruleId":"561","severity":1,"message":"562","line":1055,"column":29,"nodeType":"466","messageId":"563","endLine":1055,"endColumn":30},{"ruleId":"483","severity":1,"message":"484","line":1078,"column":30,"nodeType":"485","messageId":"486","endLine":1078,"endColumn":32},{"ruleId":"464","severity":1,"message":"560","line":1079,"column":31,"nodeType":"466","messageId":"467","endLine":1079,"endColumn":43},{"ruleId":"464","severity":1,"message":"510","line":1255,"column":15,"nodeType":"466","messageId":"467","endLine":1255,"endColumn":24},{"ruleId":"464","severity":1,"message":"564","line":1256,"column":15,"nodeType":"466","messageId":"467","endLine":1256,"endColumn":26},{"ruleId":"464","severity":1,"message":"565","line":1347,"column":15,"nodeType":"466","messageId":"467","endLine":1347,"endColumn":21},{"ruleId":"464","severity":1,"message":"566","line":1348,"column":15,"nodeType":"466","messageId":"467","endLine":1348,"endColumn":23},{"ruleId":"464","severity":1,"message":"509","line":1436,"column":15,"nodeType":"466","messageId":"467","endLine":1436,"endColumn":25},{"ruleId":"464","severity":1,"message":"567","line":1437,"column":15,"nodeType":"466","messageId":"467","endLine":1437,"endColumn":27},{"ruleId":"464","severity":1,"message":"492","line":9,"column":8,"nodeType":"466","messageId":"467","endLine":9,"endColumn":13},{"ruleId":"464","severity":1,"message":"503","line":15,"column":8,"nodeType":"466","messageId":"467","endLine":15,"endColumn":20},{"ruleId":"464","severity":1,"message":"499","line":19,"column":8,"nodeType":"466","messageId":"467","endLine":19,"endColumn":18},{"ruleId":"464","severity":1,"message":"491","line":23,"column":10,"nodeType":"466","messageId":"467","endLine":23,"endColumn":14},{"ruleId":"511","severity":1,"message":"568","line":43,"column":13,"nodeType":"513","messageId":"486","endLine":43,"endColumn":18},{"ruleId":"569","severity":1,"message":"570","line":90,"column":62,"nodeType":"485","messageId":"571","endLine":90,"endColumn":63},{"ruleId":"464","severity":1,"message":"492","line":9,"column":8,"nodeType":"466","messageId":"467","endLine":9,"endColumn":13},{"ruleId":"464","severity":1,"message":"495","line":21,"column":10,"nodeType":"466","messageId":"467","endLine":21,"endColumn":30},{"ruleId":"464","severity":1,"message":"496","line":21,"column":32,"nodeType":"466","messageId":"467","endLine":21,"endColumn":50},{"ruleId":"464","severity":1,"message":"491","line":23,"column":10,"nodeType":"466","messageId":"467","endLine":23,"endColumn":14},{"ruleId":"572","severity":1,"message":"573","line":101,"column":66,"nodeType":"574","endLine":101,"endColumn":115},{"ruleId":"464","severity":1,"message":"481","line":20,"column":10,"nodeType":"466","messageId":"467","endLine":20,"endColumn":24},{"ruleId":"464","severity":1,"message":"575","line":20,"column":26,"nodeType":"466","messageId":"467","endLine":20,"endColumn":46},{"ruleId":"464","severity":1,"message":"477","line":21,"column":8,"nodeType":"466","messageId":"467","endLine":21,"endColumn":22},{"ruleId":"464","severity":1,"message":"491","line":24,"column":10,"nodeType":"466","messageId":"467","endLine":24,"endColumn":14},{"ruleId":"483","severity":1,"message":"484","line":74,"column":38,"nodeType":"485","messageId":"486","endLine":74,"endColumn":40},{"ruleId":"464","severity":1,"message":"576","line":8,"column":8,"nodeType":"466","messageId":"467","endLine":8,"endColumn":11},{"ruleId":"464","severity":1,"message":"492","line":9,"column":8,"nodeType":"466","messageId":"467","endLine":9,"endColumn":13},{"ruleId":"464","severity":1,"message":"577","line":13,"column":8,"nodeType":"466","messageId":"467","endLine":13,"endColumn":21},{"ruleId":"464","severity":1,"message":"470","line":15,"column":10,"nodeType":"466","messageId":"467","endLine":15,"endColumn":21},{"ruleId":"464","severity":1,"message":"471","line":15,"column":23,"nodeType":"466","messageId":"467","endLine":15,"endColumn":33},{"ruleId":"464","severity":1,"message":"472","line":15,"column":35,"nodeType":"466","messageId":"467","endLine":15,"endColumn":45},{"ruleId":"464","severity":1,"message":"473","line":15,"column":47,"nodeType":"466","messageId":"467","endLine":15,"endColumn":59},{"ruleId":"464","severity":1,"message":"499","line":17,"column":8,"nodeType":"466","messageId":"467","endLine":17,"endColumn":18},{"ruleId":"464","severity":1,"message":"526","line":23,"column":8,"nodeType":"466","messageId":"467","endLine":23,"endColumn":15},{"ruleId":"464","severity":1,"message":"491","line":25,"column":10,"nodeType":"466","messageId":"467","endLine":25,"endColumn":14},{"ruleId":"511","severity":1,"message":"578","line":56,"column":13,"nodeType":"513","messageId":"486","endLine":56,"endColumn":29},{"ruleId":"511","severity":1,"message":"579","line":60,"column":13,"nodeType":"513","messageId":"486","endLine":60,"endColumn":30},{"ruleId":"511","severity":1,"message":"580","line":68,"column":13,"nodeType":"513","messageId":"486","endLine":68,"endColumn":23},{"ruleId":"483","severity":1,"message":"484","line":86,"column":32,"nodeType":"485","messageId":"486","endLine":86,"endColumn":34},{"ruleId":"464","severity":1,"message":"581","line":127,"column":15,"nodeType":"466","messageId":"467","endLine":127,"endColumn":23},{"ruleId":"464","severity":1,"message":"582","line":130,"column":15,"nodeType":"466","messageId":"467","endLine":130,"endColumn":23},{"ruleId":"483","severity":1,"message":"484","line":148,"column":32,"nodeType":"485","messageId":"486","endLine":148,"endColumn":34},{"ruleId":"483","severity":1,"message":"484","line":156,"column":37,"nodeType":"485","messageId":"486","endLine":156,"endColumn":39},{"ruleId":"483","severity":1,"message":"484","line":182,"column":22,"nodeType":"485","messageId":"486","endLine":182,"endColumn":24},{"ruleId":"483","severity":1,"message":"484","line":190,"column":32,"nodeType":"485","messageId":"486","endLine":190,"endColumn":34},{"ruleId":"483","severity":1,"message":"484","line":222,"column":32,"nodeType":"485","messageId":"486","endLine":222,"endColumn":34},{"ruleId":"483","severity":1,"message":"484","line":288,"column":47,"nodeType":"485","messageId":"486","endLine":288,"endColumn":49},{"ruleId":"483","severity":1,"message":"484","line":288,"column":76,"nodeType":"485","messageId":"486","endLine":288,"endColumn":78},{"ruleId":"483","severity":1,"message":"484","line":295,"column":53,"nodeType":"485","messageId":"486","endLine":295,"endColumn":55},{"ruleId":"483","severity":1,"message":"484","line":295,"column":84,"nodeType":"485","messageId":"486","endLine":295,"endColumn":86},{"ruleId":"483","severity":1,"message":"484","line":302,"column":53,"nodeType":"485","messageId":"486","endLine":302,"endColumn":55},{"ruleId":"483","severity":1,"message":"484","line":302,"column":86,"nodeType":"485","messageId":"486","endLine":302,"endColumn":88},{"ruleId":"483","severity":1,"message":"484","line":311,"column":23,"nodeType":"485","messageId":"486","endLine":311,"endColumn":25},{"ruleId":"483","severity":1,"message":"484","line":313,"column":35,"nodeType":"485","messageId":"486","endLine":313,"endColumn":37},{"ruleId":"483","severity":1,"message":"484","line":313,"column":56,"nodeType":"485","messageId":"486","endLine":313,"endColumn":58},{"ruleId":"483","severity":1,"message":"484","line":322,"column":47,"nodeType":"485","messageId":"486","endLine":322,"endColumn":49},{"ruleId":"483","severity":1,"message":"484","line":322,"column":76,"nodeType":"485","messageId":"486","endLine":322,"endColumn":78},{"ruleId":"583","severity":1,"message":"584","line":325,"column":64,"nodeType":"585","messageId":"586","endLine":325,"endColumn":65,"suggestions":"587"},{"ruleId":"483","severity":1,"message":"484","line":327,"column":53,"nodeType":"485","messageId":"486","endLine":327,"endColumn":55},{"ruleId":"483","severity":1,"message":"484","line":327,"column":84,"nodeType":"485","messageId":"486","endLine":327,"endColumn":86},{"ruleId":"583","severity":1,"message":"584","line":330,"column":64,"nodeType":"585","messageId":"586","endLine":330,"endColumn":65,"suggestions":"588"},{"ruleId":"483","severity":1,"message":"484","line":332,"column":53,"nodeType":"485","messageId":"486","endLine":332,"endColumn":55},{"ruleId":"483","severity":1,"message":"484","line":332,"column":86,"nodeType":"485","messageId":"486","endLine":332,"endColumn":88},{"ruleId":"583","severity":1,"message":"584","line":335,"column":64,"nodeType":"585","messageId":"586","endLine":335,"endColumn":65,"suggestions":"589"},{"ruleId":"483","severity":1,"message":"484","line":341,"column":47,"nodeType":"485","messageId":"486","endLine":341,"endColumn":49},{"ruleId":"483","severity":1,"message":"484","line":341,"column":73,"nodeType":"485","messageId":"486","endLine":341,"endColumn":75},{"ruleId":"483","severity":1,"message":"484","line":348,"column":52,"nodeType":"485","messageId":"486","endLine":348,"endColumn":54},{"ruleId":"483","severity":1,"message":"484","line":348,"column":79,"nodeType":"485","messageId":"486","endLine":348,"endColumn":81},{"ruleId":"483","severity":1,"message":"484","line":355,"column":52,"nodeType":"485","messageId":"486","endLine":355,"endColumn":54},{"ruleId":"483","severity":1,"message":"484","line":355,"column":81,"nodeType":"485","messageId":"486","endLine":355,"endColumn":83},{"ruleId":"545","severity":1,"message":"590","line":363,"column":21,"nodeType":"466","messageId":"547","endLine":363,"endColumn":22},{"ruleId":"483","severity":1,"message":"484","line":364,"column":41,"nodeType":"485","messageId":"486","endLine":364,"endColumn":43},{"ruleId":"483","severity":1,"message":"484","line":364,"column":75,"nodeType":"485","messageId":"486","endLine":364,"endColumn":77},{"ruleId":"545","severity":1,"message":"591","line":371,"column":17,"nodeType":"466","messageId":"547","endLine":371,"endColumn":20},{"ruleId":"483","severity":1,"message":"484","line":373,"column":23,"nodeType":"485","messageId":"486","endLine":373,"endColumn":25},{"ruleId":"545","severity":1,"message":"590","line":374,"column":25,"nodeType":"466","messageId":"547","endLine":374,"endColumn":26},{"ruleId":"483","severity":1,"message":"484","line":376,"column":34,"nodeType":"485","messageId":"486","endLine":376,"endColumn":36},{"ruleId":"483","severity":1,"message":"484","line":392,"column":47,"nodeType":"485","messageId":"486","endLine":392,"endColumn":49},{"ruleId":"483","severity":1,"message":"484","line":392,"column":73,"nodeType":"485","messageId":"486","endLine":392,"endColumn":75},{"ruleId":"583","severity":1,"message":"584","line":394,"column":76,"nodeType":"585","messageId":"586","endLine":394,"endColumn":77,"suggestions":"592"},{"ruleId":"483","severity":1,"message":"484","line":396,"column":52,"nodeType":"485","messageId":"486","endLine":396,"endColumn":54},{"ruleId":"483","severity":1,"message":"484","line":396,"column":79,"nodeType":"485","messageId":"486","endLine":396,"endColumn":81},{"ruleId":"583","severity":1,"message":"584","line":398,"column":76,"nodeType":"585","messageId":"586","endLine":398,"endColumn":77,"suggestions":"593"},{"ruleId":"483","severity":1,"message":"484","line":400,"column":52,"nodeType":"485","messageId":"486","endLine":400,"endColumn":54},{"ruleId":"483","severity":1,"message":"484","line":400,"column":81,"nodeType":"485","messageId":"486","endLine":400,"endColumn":83},{"ruleId":"583","severity":1,"message":"584","line":402,"column":76,"nodeType":"585","messageId":"586","endLine":402,"endColumn":77,"suggestions":"594"},{"ruleId":"483","severity":1,"message":"484","line":426,"column":43,"nodeType":"485","messageId":"486","endLine":426,"endColumn":45},{"ruleId":"483","severity":1,"message":"484","line":435,"column":35,"nodeType":"485","messageId":"486","endLine":435,"endColumn":37},{"ruleId":"483","severity":1,"message":"484","line":435,"column":57,"nodeType":"485","messageId":"486","endLine":435,"endColumn":59},{"ruleId":"583","severity":1,"message":"595","line":435,"column":61,"nodeType":"585","messageId":"586","endLine":435,"endColumn":62,"suggestions":"596"},{"ruleId":"545","severity":1,"message":"590","line":443,"column":25,"nodeType":"466","messageId":"547","endLine":443,"endColumn":26},{"ruleId":"483","severity":1,"message":"484","line":445,"column":35,"nodeType":"485","messageId":"486","endLine":445,"endColumn":37},{"ruleId":"545","severity":1,"message":"590","line":459,"column":25,"nodeType":"466","messageId":"547","endLine":459,"endColumn":26},{"ruleId":"483","severity":1,"message":"484","line":461,"column":35,"nodeType":"485","messageId":"486","endLine":461,"endColumn":37},{"ruleId":"483","severity":1,"message":"484","line":462,"column":34,"nodeType":"485","messageId":"486","endLine":462,"endColumn":36},{"ruleId":"483","severity":1,"message":"484","line":465,"column":39,"nodeType":"485","messageId":"486","endLine":465,"endColumn":41},{"ruleId":"483","severity":1,"message":"484","line":468,"column":39,"nodeType":"485","messageId":"486","endLine":468,"endColumn":41},{"ruleId":"483","severity":1,"message":"484","line":474,"column":26,"nodeType":"485","messageId":"486","endLine":474,"endColumn":28},{"ruleId":"483","severity":1,"message":"484","line":545,"column":43,"nodeType":"485","messageId":"486","endLine":545,"endColumn":45},{"ruleId":"483","severity":1,"message":"484","line":554,"column":39,"nodeType":"485","messageId":"486","endLine":554,"endColumn":41},{"ruleId":"483","severity":1,"message":"484","line":554,"column":61,"nodeType":"485","messageId":"486","endLine":554,"endColumn":63},{"ruleId":"583","severity":1,"message":"595","line":554,"column":65,"nodeType":"585","messageId":"586","endLine":554,"endColumn":66,"suggestions":"597"},{"ruleId":"545","severity":1,"message":"590","line":562,"column":29,"nodeType":"466","messageId":"547","endLine":562,"endColumn":30},{"ruleId":"483","severity":1,"message":"484","line":564,"column":39,"nodeType":"485","messageId":"486","endLine":564,"endColumn":41},{"ruleId":"545","severity":1,"message":"590","line":578,"column":29,"nodeType":"466","messageId":"547","endLine":578,"endColumn":30},{"ruleId":"483","severity":1,"message":"484","line":580,"column":39,"nodeType":"485","messageId":"486","endLine":580,"endColumn":41},{"ruleId":"483","severity":1,"message":"484","line":581,"column":38,"nodeType":"485","messageId":"486","endLine":581,"endColumn":40},{"ruleId":"483","severity":1,"message":"484","line":584,"column":43,"nodeType":"485","messageId":"486","endLine":584,"endColumn":45},{"ruleId":"483","severity":1,"message":"484","line":587,"column":43,"nodeType":"485","messageId":"486","endLine":587,"endColumn":45},{"ruleId":"483","severity":1,"message":"484","line":594,"column":30,"nodeType":"485","messageId":"486","endLine":594,"endColumn":32},{"ruleId":"483","severity":1,"message":"484","line":633,"column":42,"nodeType":"485","messageId":"486","endLine":633,"endColumn":44},{"ruleId":"483","severity":1,"message":"484","line":642,"column":39,"nodeType":"485","messageId":"486","endLine":642,"endColumn":41},{"ruleId":"483","severity":1,"message":"484","line":642,"column":61,"nodeType":"485","messageId":"486","endLine":642,"endColumn":63},{"ruleId":"583","severity":1,"message":"595","line":642,"column":65,"nodeType":"585","messageId":"586","endLine":642,"endColumn":66,"suggestions":"598"},{"ruleId":"545","severity":1,"message":"590","line":650,"column":29,"nodeType":"466","messageId":"547","endLine":650,"endColumn":30},{"ruleId":"483","severity":1,"message":"484","line":652,"column":39,"nodeType":"485","messageId":"486","endLine":652,"endColumn":41},{"ruleId":"545","severity":1,"message":"590","line":666,"column":29,"nodeType":"466","messageId":"547","endLine":666,"endColumn":30},{"ruleId":"483","severity":1,"message":"484","line":668,"column":39,"nodeType":"485","messageId":"486","endLine":668,"endColumn":41},{"ruleId":"483","severity":1,"message":"484","line":669,"column":38,"nodeType":"485","messageId":"486","endLine":669,"endColumn":40},{"ruleId":"483","severity":1,"message":"484","line":672,"column":43,"nodeType":"485","messageId":"486","endLine":672,"endColumn":45},{"ruleId":"483","severity":1,"message":"484","line":675,"column":43,"nodeType":"485","messageId":"486","endLine":675,"endColumn":45},{"ruleId":"483","severity":1,"message":"484","line":681,"column":30,"nodeType":"485","messageId":"486","endLine":681,"endColumn":32},{"ruleId":"483","severity":1,"message":"484","line":685,"column":35,"nodeType":"485","messageId":"486","endLine":685,"endColumn":37},{"ruleId":"483","severity":1,"message":"484","line":694,"column":32,"nodeType":"485","messageId":"486","endLine":694,"endColumn":34},{"ruleId":"583","severity":1,"message":"584","line":694,"column":54,"nodeType":"585","messageId":"586","endLine":694,"endColumn":55,"suggestions":"599"},{"ruleId":"483","severity":1,"message":"484","line":718,"column":31,"nodeType":"485","messageId":"486","endLine":718,"endColumn":33},{"ruleId":"483","severity":1,"message":"484","line":749,"column":40,"nodeType":"485","messageId":"486","endLine":749,"endColumn":42},{"ruleId":"483","severity":1,"message":"484","line":749,"column":102,"nodeType":"485","messageId":"486","endLine":749,"endColumn":104},{"ruleId":"545","severity":1,"message":"548","line":757,"column":21,"nodeType":"466","messageId":"547","endLine":757,"endColumn":22},{"ruleId":"483","severity":1,"message":"484","line":758,"column":36,"nodeType":"485","messageId":"486","endLine":758,"endColumn":38},{"ruleId":"483","severity":1,"message":"484","line":758,"column":79,"nodeType":"485","messageId":"486","endLine":758,"endColumn":81},{"ruleId":"483","severity":1,"message":"484","line":758,"column":138,"nodeType":"485","messageId":"486","endLine":758,"endColumn":140},{"ruleId":"464","severity":1,"message":"600","line":886,"column":13,"nodeType":"466","messageId":"467","endLine":886,"endColumn":17},{"ruleId":"483","severity":1,"message":"484","line":890,"column":37,"nodeType":"485","messageId":"486","endLine":890,"endColumn":39},{"ruleId":"464","severity":1,"message":"520","line":1178,"column":7,"nodeType":"466","messageId":"467","endLine":1178,"endColumn":13},{"ruleId":"464","severity":1,"message":"469","line":3,"column":8,"nodeType":"466","messageId":"467","endLine":3,"endColumn":13},{"ruleId":"464","severity":1,"message":"576","line":7,"column":8,"nodeType":"466","messageId":"467","endLine":7,"endColumn":11},{"ruleId":"464","severity":1,"message":"491","line":10,"column":10,"nodeType":"466","messageId":"467","endLine":10,"endColumn":14},{"ruleId":"464","severity":1,"message":"492","line":10,"column":16,"nodeType":"466","messageId":"467","endLine":10,"endColumn":21},{"ruleId":"464","severity":1,"message":"494","line":16,"column":8,"nodeType":"466","messageId":"467","endLine":16,"endColumn":15},{"ruleId":"464","severity":1,"message":"499","line":18,"column":8,"nodeType":"466","messageId":"467","endLine":18,"endColumn":18},{"ruleId":"464","severity":1,"message":"542","line":247,"column":7,"nodeType":"466","messageId":"467","endLine":247,"endColumn":20},{"ruleId":"464","severity":1,"message":"514","line":261,"column":7,"nodeType":"466","messageId":"467","endLine":261,"endColumn":21},{"ruleId":"511","severity":1,"message":"512","line":297,"column":5,"nodeType":"513","messageId":"486","endLine":297,"endColumn":13},{"ruleId":"464","severity":1,"message":"489","line":11,"column":8,"nodeType":"466","messageId":"467","endLine":11,"endColumn":12},{"ruleId":"464","severity":1,"message":"491","line":13,"column":10,"nodeType":"466","messageId":"467","endLine":13,"endColumn":14},{"ruleId":"464","severity":1,"message":"492","line":13,"column":16,"nodeType":"466","messageId":"467","endLine":13,"endColumn":21},{"ruleId":"464","severity":1,"message":"494","line":16,"column":8,"nodeType":"466","messageId":"467","endLine":16,"endColumn":15},{"ruleId":"464","severity":1,"message":"601","line":31,"column":8,"nodeType":"466","messageId":"467","endLine":31,"endColumn":30},{"ruleId":"464","severity":1,"message":"539","line":43,"column":8,"nodeType":"466","messageId":"467","endLine":43,"endColumn":27},{"ruleId":"464","severity":1,"message":"540","line":45,"column":10,"nodeType":"466","messageId":"467","endLine":45,"endColumn":25},{"ruleId":"464","severity":1,"message":"541","line":45,"column":27,"nodeType":"466","messageId":"467","endLine":45,"endColumn":33},{"ruleId":"464","severity":1,"message":"500","line":48,"column":8,"nodeType":"466","messageId":"467","endLine":48,"endColumn":22},{"ruleId":"464","severity":1,"message":"501","line":49,"column":8,"nodeType":"466","messageId":"467","endLine":49,"endColumn":18},{"ruleId":"464","severity":1,"message":"502","line":50,"column":8,"nodeType":"466","messageId":"467","endLine":50,"endColumn":16},{"ruleId":"464","severity":1,"message":"503","line":51,"column":8,"nodeType":"466","messageId":"467","endLine":51,"endColumn":20},{"ruleId":"464","severity":1,"message":"504","line":52,"column":8,"nodeType":"466","messageId":"467","endLine":52,"endColumn":18},{"ruleId":"464","severity":1,"message":"470","line":54,"column":10,"nodeType":"466","messageId":"467","endLine":54,"endColumn":21},{"ruleId":"464","severity":1,"message":"471","line":54,"column":23,"nodeType":"466","messageId":"467","endLine":54,"endColumn":33},{"ruleId":"464","severity":1,"message":"472","line":54,"column":35,"nodeType":"466","messageId":"467","endLine":54,"endColumn":45},{"ruleId":"464","severity":1,"message":"473","line":54,"column":47,"nodeType":"466","messageId":"467","endLine":54,"endColumn":59},{"ruleId":"464","severity":1,"message":"474","line":56,"column":8,"nodeType":"466","messageId":"467","endLine":56,"endColumn":15},{"ruleId":"464","severity":1,"message":"475","line":58,"column":10,"nodeType":"466","messageId":"467","endLine":58,"endColumn":18},{"ruleId":"464","severity":1,"message":"476","line":58,"column":20,"nodeType":"466","messageId":"467","endLine":58,"endColumn":25},{"ruleId":"464","severity":1,"message":"495","line":59,"column":10,"nodeType":"466","messageId":"467","endLine":59,"endColumn":30},{"ruleId":"464","severity":1,"message":"496","line":59,"column":32,"nodeType":"466","messageId":"467","endLine":59,"endColumn":50},{"ruleId":"464","severity":1,"message":"497","line":59,"column":52,"nodeType":"466","messageId":"467","endLine":59,"endColumn":69},{"ruleId":"464","severity":1,"message":"481","line":61,"column":10,"nodeType":"466","messageId":"467","endLine":61,"endColumn":24},{"ruleId":"511","severity":1,"message":"580","line":105,"column":13,"nodeType":"513","messageId":"486","endLine":105,"endColumn":23},{"ruleId":"511","severity":1,"message":"602","line":106,"column":13,"nodeType":"513","messageId":"486","endLine":106,"endColumn":23},{"ruleId":"483","severity":1,"message":"484","line":156,"column":31,"nodeType":"485","messageId":"486","endLine":156,"endColumn":33},{"ruleId":"483","severity":1,"message":"484","line":182,"column":28,"nodeType":"485","messageId":"486","endLine":182,"endColumn":30},{"ruleId":"464","severity":1,"message":"556","line":257,"column":15,"nodeType":"466","messageId":"467","endLine":257,"endColumn":24},{"ruleId":"464","severity":1,"message":"544","line":389,"column":17,"nodeType":"466","messageId":"467","endLine":389,"endColumn":29},{"ruleId":"483","severity":1,"message":"484","line":515,"column":32,"nodeType":"485","messageId":"486","endLine":515,"endColumn":34},{"ruleId":"483","severity":1,"message":"484","line":520,"column":37,"nodeType":"485","messageId":"486","endLine":520,"endColumn":39},{"ruleId":"464","severity":1,"message":"542","line":689,"column":7,"nodeType":"466","messageId":"467","endLine":689,"endColumn":20},{"ruleId":"464","severity":1,"message":"514","line":703,"column":7,"nodeType":"466","messageId":"467","endLine":703,"endColumn":21},{"ruleId":"511","severity":1,"message":"512","line":739,"column":5,"nodeType":"513","messageId":"486","endLine":739,"endColumn":13},{"ruleId":"464","severity":1,"message":"516","line":744,"column":7,"nodeType":"466","messageId":"467","endLine":744,"endColumn":22},{"ruleId":"464","severity":1,"message":"520","line":774,"column":7,"nodeType":"466","messageId":"467","endLine":774,"endColumn":13},{"ruleId":"464","severity":1,"message":"469","line":3,"column":8,"nodeType":"466","messageId":"467","endLine":3,"endColumn":13},{"ruleId":"464","severity":1,"message":"576","line":7,"column":8,"nodeType":"466","messageId":"467","endLine":7,"endColumn":11},{"ruleId":"464","severity":1,"message":"489","line":8,"column":8,"nodeType":"466","messageId":"467","endLine":8,"endColumn":12},{"ruleId":"464","severity":1,"message":"490","line":10,"column":8,"nodeType":"466","messageId":"467","endLine":10,"endColumn":13},{"ruleId":"464","severity":1,"message":"491","line":12,"column":10,"nodeType":"466","messageId":"467","endLine":12,"endColumn":14},{"ruleId":"464","severity":1,"message":"492","line":12,"column":16,"nodeType":"466","messageId":"467","endLine":12,"endColumn":21},{"ruleId":"464","severity":1,"message":"493","line":12,"column":23,"nodeType":"466","messageId":"467","endLine":12,"endColumn":29},{"ruleId":"464","severity":1,"message":"603","line":13,"column":8,"nodeType":"466","messageId":"467","endLine":13,"endColumn":14},{"ruleId":"464","severity":1,"message":"604","line":15,"column":8,"nodeType":"466","messageId":"467","endLine":15,"endColumn":16},{"ruleId":"464","severity":1,"message":"494","line":18,"column":8,"nodeType":"466","messageId":"467","endLine":18,"endColumn":15},{"ruleId":"464","severity":1,"message":"605","line":152,"column":7,"nodeType":"466","messageId":"467","endLine":152,"endColumn":22},{"ruleId":"511","severity":1,"message":"512","line":170,"column":5,"nodeType":"513","messageId":"486","endLine":170,"endColumn":13},{"ruleId":"464","severity":1,"message":"515","line":201,"column":7,"nodeType":"466","messageId":"467","endLine":201,"endColumn":22},{"ruleId":"464","severity":1,"message":"516","line":219,"column":7,"nodeType":"466","messageId":"467","endLine":219,"endColumn":22},{"ruleId":"464","severity":1,"message":"517","line":237,"column":7,"nodeType":"466","messageId":"467","endLine":237,"endColumn":16},{"ruleId":"464","severity":1,"message":"518","line":263,"column":7,"nodeType":"466","messageId":"467","endLine":263,"endColumn":17},{"ruleId":"464","severity":1,"message":"519","line":274,"column":7,"nodeType":"466","messageId":"467","endLine":274,"endColumn":20},{"ruleId":"464","severity":1,"message":"520","line":279,"column":7,"nodeType":"466","messageId":"467","endLine":279,"endColumn":13},{"ruleId":"464","severity":1,"message":"521","line":297,"column":7,"nodeType":"466","messageId":"467","endLine":297,"endColumn":16},{"ruleId":"464","severity":1,"message":"522","line":301,"column":7,"nodeType":"466","messageId":"467","endLine":301,"endColumn":17},"no-native-reassign",["606"],"no-negated-in-lhs",["607"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'styles' is assigned a value but never used.","'axios' is defined but never used.","'TwitchEmbed' is defined but never used.","'TwitchChat' is defined but never used.","'TwitchClip' is defined but never used.","'TwitchPlayer' is defined but never used.","'YouTube' is defined but never used.","'Timeline' is defined but never used.","'Tweet' is defined but never used.","'InstagramEmbed' is defined but never used.","'OauthPopup' is defined but never used.","'TwitterLogin' is defined but never used.","'InstagramLogin' is defined but never used.","'InstagramMedia' is defined but never used.","'igHtml' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'OAuth2PopupFlow' is defined but never used.","'returnToken' is assigned a value but never used.","'Form' is defined but never used.","'Modal' is defined but never used.","'List' is defined but never used.","'Image' is defined but never used.","'Button' is defined but never used.","'Cookies' is defined but never used.","'TwitterTimelineEmbed' is defined but never used.","'TwitterShareButton' is defined but never used.","'TwitterTweetEmbed' is defined but never used.","'InstagramComponent' is defined but never used.","'DefaultPFP' is defined but never used.","'ThumbUpAltIcon' is defined but never used.","'IconButton' is defined but never used.","'SendIcon' is defined but never used.","'FavoriteIcon' is defined but never used.","'RepeatIcon' is defined but never used.","'CustomScroll' is defined but never used.","'ScrollView' is defined but never used.","'ScrollPagedView' is defined but never used.","'twitchRows' is assigned a value but never used.","'ytVidsRows' is assigned a value but never used.","'tweetRows' is assigned a value but never used.","no-dupe-keys","Duplicate key 'position'.","ObjectExpression","'tweetComponent' is assigned a value but never used.","'tweetComponent2' is assigned a value but never used.","'twitchComponent' is assigned a value but never used.","'container' is assigned a value but never used.","'rootStyle2' is assigned a value but never used.","'mainContainer' is assigned a value but never used.","'button' is assigned a value but never used.","'textStyle' is assigned a value but never used.","'textStyle2' is assigned a value but never used.","'IgLogo' is defined but never used.","'TwitterLogo' is defined but never used.","'YTLogo' is defined but never used.","'AllLogo' is defined but never used.","'rootStyle' is assigned a value but never used.","'button2' is assigned a value but never used.","'Route' is defined but never used.","'Switch' is defined but never used.","'Redirect' is defined but never used.","'RoutedTabs' is defined but never used.","'NavTab' is defined but never used.","'Container' is defined but never used.","'FeedScreen' is defined but never used.","'title' is assigned a value but never used.",["606"],["607"],"'AutoScrollContainer' is defined but never used.","'StickyContainer' is defined but never used.","'Sticky' is defined but never used.","'myscrollstyle' is assigned a value but never used.","Duplicate key 'doneLoading'.","'myTwitchName' is assigned a value but never used.","no-redeclare","'tempList' is already defined.","redeclared","'i' is already defined.","'streamThumb' is assigned a value but never used.","'createdTwitchRows' is assigned a value but never used.","'creatMyTwitchRows' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'channelDescription' is assigned a value but never used.","'videoDescription' is assigned a value but never used.","'sortedVids' is assigned a value but never used.","'postsRows' is assigned a value but never used.","'igName' is assigned a value but never used.","'sortedIg' is assigned a value but never used.","'followsTweetsSorted' is assigned a value but never used.","'sortedTweets' is assigned a value but never used.","no-use-before-define","'i' was used before it was defined.","usedBeforeDefined","'tweetMyRows' is assigned a value but never used.","'igRows' is assigned a value but never used.","'igMyRows' is assigned a value but never used.","'ytMyVidsRows' is assigned a value but never used.","Duplicate key 'liked'.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'instagramMediaParser' is defined but never used.","'Col' is defined but never used.","'DialogContent' is defined but never used.","Duplicate key 'twitchFollowText'.","Duplicate key 'youtubeFollowText'.","Duplicate key 'isFollowed'.","'collPath' is assigned a value but never used.","'userName' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\/.","Literal","unnecessaryEscape",["608","609"],["610","611"],["612","613"],"'j' is already defined.","'end' is already defined.",["614","615"],["616","617"],["618","619"],"Unnecessary escape character: \\'.",["620","621"],["622","623"],["624","625"],["626","627"],"'myID' is assigned a value but never used.","'StarBorderOutlinedIcon' is defined but never used.","Duplicate key 'followText'.","'Avatar' is defined but never used.","'firebase' is defined but never used.","'headerComponent' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"messageId":"628","fix":"629","desc":"630"},{"messageId":"631","fix":"632","desc":"633"},{"messageId":"628","fix":"634","desc":"630"},{"messageId":"631","fix":"635","desc":"633"},{"messageId":"628","fix":"636","desc":"630"},{"messageId":"631","fix":"637","desc":"633"},{"messageId":"628","fix":"638","desc":"630"},{"messageId":"631","fix":"639","desc":"633"},{"messageId":"628","fix":"640","desc":"630"},{"messageId":"631","fix":"641","desc":"633"},{"messageId":"628","fix":"642","desc":"630"},{"messageId":"631","fix":"643","desc":"633"},{"messageId":"628","fix":"644","desc":"630"},{"messageId":"631","fix":"645","desc":"633"},{"messageId":"628","fix":"646","desc":"630"},{"messageId":"631","fix":"647","desc":"633"},{"messageId":"628","fix":"648","desc":"630"},{"messageId":"631","fix":"649","desc":"633"},{"messageId":"628","fix":"650","desc":"630"},{"messageId":"631","fix":"651","desc":"633"},"removeEscape",{"range":"652","text":"653"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"654","text":"655"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"656","text":"653"},{"range":"657","text":"655"},{"range":"658","text":"653"},{"range":"659","text":"655"},{"range":"660","text":"653"},{"range":"661","text":"655"},{"range":"662","text":"653"},{"range":"663","text":"655"},{"range":"664","text":"653"},{"range":"665","text":"655"},{"range":"666","text":"653"},{"range":"667","text":"655"},{"range":"668","text":"653"},{"range":"669","text":"655"},{"range":"670","text":"653"},{"range":"671","text":"655"},{"range":"672","text":"653"},{"range":"673","text":"655"},[11676,11677],"",[11676,11676],"\\",[11979,11980],[11979,11979],[12281,12282],[12281,12281],[14723,14724],[14723,14723],[15002,15003],[15002,15002],[15280,15281],[15280,15280],[16550,16551],[16550,16550],[21385,21386],[21385,21385],[25166,25167],[25166,25166],[27507,27508],[27507,27507]]